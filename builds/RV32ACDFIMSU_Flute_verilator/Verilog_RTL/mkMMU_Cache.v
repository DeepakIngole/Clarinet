//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    32 reg
// word64                         O    64
// st_amo_val                     O    64
// exc                            O     1
// exc_code                       O     4 reg
// RDY_server_flush_request_put   O     1 reg
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1 const
// mem_master_awvalid             O     1 reg
// mem_master_awid                O     4 reg
// mem_master_awaddr              O    64 reg
// mem_master_awlen               O     8 reg
// mem_master_awsize              O     3 reg
// mem_master_awburst             O     2 reg
// mem_master_awlock              O     1 reg
// mem_master_awcache             O     4 reg
// mem_master_awprot              O     3 reg
// mem_master_awqos               O     4 reg
// mem_master_awregion            O     4 reg
// mem_master_wvalid              O     1 reg
// mem_master_wdata               O    64 reg
// mem_master_wstrb               O     8 reg
// mem_master_wlast               O     1 reg
// mem_master_bready              O     1 reg
// mem_master_arvalid             O     1 reg
// mem_master_arid                O     4 reg
// mem_master_araddr              O    64 reg
// mem_master_arlen               O     8 reg
// mem_master_arsize              O     3 reg
// mem_master_arburst             O     2 reg
// mem_master_arlock              O     1 reg
// mem_master_arcache             O     4 reg
// mem_master_arprot              O     3 reg
// mem_master_arqos               O     4 reg
// mem_master_arregion            O     4 reg
// mem_master_rready              O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_f3                         I     3
// req_amo_funct7                 I     7 reg
// req_addr                       I    32
// req_st_value                   I    64
// req_priv                       I     2 reg
// req_sstatus_SUM                I     1 reg
// req_mstatus_MXR                I     1 reg
// req_satp                       I    32 reg
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bvalid              I     1
// mem_master_bid                 I     4 reg
// mem_master_bresp               I     2 reg
// mem_master_arready             I     1
// mem_master_rvalid              I     1
// mem_master_rid                 I     4 reg
// mem_master_rdata               I    64 reg
// mem_master_rresp               I     2 reg
// mem_master_rlast               I     1 reg
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_Cache(CLK,
		   RST_N,

		   set_verbosity_verbosity,
		   EN_set_verbosity,
		   RDY_set_verbosity,

		   EN_server_reset_request_put,
		   RDY_server_reset_request_put,

		   EN_server_reset_response_get,
		   RDY_server_reset_response_get,

		   req_op,
		   req_f3,
		   req_amo_funct7,
		   req_addr,
		   req_st_value,
		   req_priv,
		   req_sstatus_SUM,
		   req_mstatus_MXR,
		   req_satp,
		   EN_req,

		   valid,

		   addr,

		   word64,

		   st_amo_val,

		   exc,

		   exc_code,

		   EN_server_flush_request_put,
		   RDY_server_flush_request_put,

		   EN_server_flush_response_get,
		   RDY_server_flush_response_get,

		   EN_tlb_flush,
		   RDY_tlb_flush,

		   mem_master_awvalid,

		   mem_master_awid,

		   mem_master_awaddr,

		   mem_master_awlen,

		   mem_master_awsize,

		   mem_master_awburst,

		   mem_master_awlock,

		   mem_master_awcache,

		   mem_master_awprot,

		   mem_master_awqos,

		   mem_master_awregion,

		   mem_master_awready,

		   mem_master_wvalid,

		   mem_master_wdata,

		   mem_master_wstrb,

		   mem_master_wlast,

		   mem_master_wready,

		   mem_master_bvalid,
		   mem_master_bid,
		   mem_master_bresp,

		   mem_master_bready,

		   mem_master_arvalid,

		   mem_master_arid,

		   mem_master_araddr,

		   mem_master_arlen,

		   mem_master_arsize,

		   mem_master_arburst,

		   mem_master_arlock,

		   mem_master_arcache,

		   mem_master_arprot,

		   mem_master_arqos,

		   mem_master_arregion,

		   mem_master_arready,

		   mem_master_rvalid,
		   mem_master_rid,
		   mem_master_rdata,
		   mem_master_rresp,
		   mem_master_rlast,

		   mem_master_rready);
  parameter [0 : 0] dmem_not_imem = 1'b0;
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_f3;
  input  [6 : 0] req_amo_funct7;
  input  [31 : 0] req_addr;
  input  [63 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [31 : 0] req_satp;
  input  EN_req;

  // value method valid
  output valid;

  // value method addr
  output [31 : 0] addr;

  // value method word64
  output [63 : 0] word64;

  // value method st_amo_val
  output [63 : 0] st_amo_val;

  // value method exc
  output exc;

  // value method exc_code
  output [3 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_m_awvalid
  output mem_master_awvalid;

  // value method mem_master_m_awid
  output [3 : 0] mem_master_awid;

  // value method mem_master_m_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_m_awlen
  output [7 : 0] mem_master_awlen;

  // value method mem_master_m_awsize
  output [2 : 0] mem_master_awsize;

  // value method mem_master_m_awburst
  output [1 : 0] mem_master_awburst;

  // value method mem_master_m_awlock
  output mem_master_awlock;

  // value method mem_master_m_awcache
  output [3 : 0] mem_master_awcache;

  // value method mem_master_m_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_m_awqos
  output [3 : 0] mem_master_awqos;

  // value method mem_master_m_awregion
  output [3 : 0] mem_master_awregion;

  // value method mem_master_m_awuser

  // action method mem_master_m_awready
  input  mem_master_awready;

  // value method mem_master_m_wvalid
  output mem_master_wvalid;

  // value method mem_master_m_wdata
  output [63 : 0] mem_master_wdata;

  // value method mem_master_m_wstrb
  output [7 : 0] mem_master_wstrb;

  // value method mem_master_m_wlast
  output mem_master_wlast;

  // value method mem_master_m_wuser

  // action method mem_master_m_wready
  input  mem_master_wready;

  // action method mem_master_m_bvalid
  input  mem_master_bvalid;
  input  [3 : 0] mem_master_bid;
  input  [1 : 0] mem_master_bresp;

  // value method mem_master_m_bready
  output mem_master_bready;

  // value method mem_master_m_arvalid
  output mem_master_arvalid;

  // value method mem_master_m_arid
  output [3 : 0] mem_master_arid;

  // value method mem_master_m_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_m_arlen
  output [7 : 0] mem_master_arlen;

  // value method mem_master_m_arsize
  output [2 : 0] mem_master_arsize;

  // value method mem_master_m_arburst
  output [1 : 0] mem_master_arburst;

  // value method mem_master_m_arlock
  output mem_master_arlock;

  // value method mem_master_m_arcache
  output [3 : 0] mem_master_arcache;

  // value method mem_master_m_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_m_arqos
  output [3 : 0] mem_master_arqos;

  // value method mem_master_m_arregion
  output [3 : 0] mem_master_arregion;

  // value method mem_master_m_aruser

  // action method mem_master_m_arready
  input  mem_master_arready;

  // action method mem_master_m_rvalid
  input  mem_master_rvalid;
  input  [3 : 0] mem_master_rid;
  input  [63 : 0] mem_master_rdata;
  input  [1 : 0] mem_master_rresp;
  input  mem_master_rlast;

  // value method mem_master_m_rready
  output mem_master_rready;

  // signals for module outputs
  reg [63 : 0] word64;
  wire [63 : 0] mem_master_araddr,
		mem_master_awaddr,
		mem_master_wdata,
		st_amo_val;
  wire [31 : 0] addr;
  wire [7 : 0] mem_master_arlen, mem_master_awlen, mem_master_wstrb;
  wire [3 : 0] exc_code,
	       mem_master_arcache,
	       mem_master_arid,
	       mem_master_arqos,
	       mem_master_arregion,
	       mem_master_awcache,
	       mem_master_awid,
	       mem_master_awqos,
	       mem_master_awregion;
  wire [2 : 0] mem_master_arprot,
	       mem_master_arsize,
	       mem_master_awprot,
	       mem_master_awsize;
  wire [1 : 0] mem_master_arburst, mem_master_awburst;
  wire RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       exc,
       mem_master_arlock,
       mem_master_arvalid,
       mem_master_awlock,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wlast,
       mem_master_wvalid,
       valid;

  // inlined wires
  wire [3 : 0] ctr_wr_rsps_pending_crg$port0__write_1,
	       ctr_wr_rsps_pending_crg$port1__write_1,
	       ctr_wr_rsps_pending_crg$port2__read,
	       ctr_wr_rsps_pending_crg$port3__read;
  wire ctr_wr_rsps_pending_crg$EN_port2__write, dw_valid$whas;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register ctr_wr_rsps_pending_crg
  reg [3 : 0] ctr_wr_rsps_pending_crg;
  wire [3 : 0] ctr_wr_rsps_pending_crg$D_IN;
  wire ctr_wr_rsps_pending_crg$EN;

  // register rg_addr
  reg [31 : 0] rg_addr;
  wire [31 : 0] rg_addr$D_IN;
  wire rg_addr$EN;

  // register rg_amo_funct7
  reg [6 : 0] rg_amo_funct7;
  wire [6 : 0] rg_amo_funct7$D_IN;
  wire rg_amo_funct7$EN;

  // register rg_cset_in_cache
  reg [6 : 0] rg_cset_in_cache;
  wire [6 : 0] rg_cset_in_cache$D_IN;
  wire rg_cset_in_cache$EN;

  // register rg_error_during_refill
  reg rg_error_during_refill;
  wire rg_error_during_refill$D_IN, rg_error_during_refill$EN;

  // register rg_exc_code
  reg [3 : 0] rg_exc_code;
  reg [3 : 0] rg_exc_code$D_IN;
  wire rg_exc_code$EN;

  // register rg_f3
  reg [2 : 0] rg_f3;
  wire [2 : 0] rg_f3$D_IN;
  wire rg_f3$EN;

  // register rg_ld_val
  reg [63 : 0] rg_ld_val;
  reg [63 : 0] rg_ld_val$D_IN;
  wire rg_ld_val$EN;

  // register rg_lower_word32
  reg [31 : 0] rg_lower_word32;
  wire [31 : 0] rg_lower_word32$D_IN;
  wire rg_lower_word32$EN;

  // register rg_lower_word32_full
  reg rg_lower_word32_full;
  wire rg_lower_word32_full$D_IN, rg_lower_word32_full$EN;

  // register rg_lrsc_pa
  reg [33 : 0] rg_lrsc_pa;
  wire [33 : 0] rg_lrsc_pa$D_IN;
  wire rg_lrsc_pa$EN;

  // register rg_lrsc_valid
  reg rg_lrsc_valid;
  wire rg_lrsc_valid$D_IN, rg_lrsc_valid$EN;

  // register rg_mstatus_MXR
  reg rg_mstatus_MXR;
  wire rg_mstatus_MXR$D_IN, rg_mstatus_MXR$EN;

  // register rg_op
  reg [1 : 0] rg_op;
  wire [1 : 0] rg_op$D_IN;
  wire rg_op$EN;

  // register rg_pa
  reg [33 : 0] rg_pa;
  wire [33 : 0] rg_pa$D_IN;
  wire rg_pa$EN;

  // register rg_priv
  reg [1 : 0] rg_priv;
  wire [1 : 0] rg_priv$D_IN;
  wire rg_priv$EN;

  // register rg_pte_pa
  reg [33 : 0] rg_pte_pa;
  wire [33 : 0] rg_pte_pa$D_IN;
  wire rg_pte_pa$EN;

  // register rg_satp
  reg [31 : 0] rg_satp;
  wire [31 : 0] rg_satp$D_IN;
  wire rg_satp$EN;

  // register rg_sstatus_SUM
  reg rg_sstatus_SUM;
  wire rg_sstatus_SUM$D_IN, rg_sstatus_SUM$EN;

  // register rg_st_amo_val
  reg [63 : 0] rg_st_amo_val;
  wire [63 : 0] rg_st_amo_val$D_IN;
  wire rg_st_amo_val$EN;

  // register rg_state
  reg [3 : 0] rg_state;
  reg [3 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_word64_set_in_cache
  reg [8 : 0] rg_word64_set_in_cache;
  wire [8 : 0] rg_word64_set_in_cache$D_IN;
  wire rg_word64_set_in_cache$EN;

  // ports of submodule f_fabric_write_reqs
  reg [100 : 0] f_fabric_write_reqs$D_IN;
  wire [100 : 0] f_fabric_write_reqs$D_OUT;
  wire f_fabric_write_reqs$CLR,
       f_fabric_write_reqs$DEQ,
       f_fabric_write_reqs$EMPTY_N,
       f_fabric_write_reqs$ENQ,
       f_fabric_write_reqs$FULL_N;

  // ports of submodule f_pte_writebacks
  wire [65 : 0] f_pte_writebacks$D_IN, f_pte_writebacks$D_OUT;
  wire f_pte_writebacks$CLR,
       f_pte_writebacks$DEQ,
       f_pte_writebacks$EMPTY_N,
       f_pte_writebacks$ENQ,
       f_pte_writebacks$FULL_N;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule master_xactor_f_rd_addr
  reg [96 : 0] master_xactor_f_rd_addr$D_IN;
  wire [96 : 0] master_xactor_f_rd_addr$D_OUT;
  wire master_xactor_f_rd_addr$CLR,
       master_xactor_f_rd_addr$DEQ,
       master_xactor_f_rd_addr$EMPTY_N,
       master_xactor_f_rd_addr$ENQ,
       master_xactor_f_rd_addr$FULL_N;

  // ports of submodule master_xactor_f_rd_data
  wire [70 : 0] master_xactor_f_rd_data$D_IN, master_xactor_f_rd_data$D_OUT;
  wire master_xactor_f_rd_data$CLR,
       master_xactor_f_rd_data$DEQ,
       master_xactor_f_rd_data$EMPTY_N,
       master_xactor_f_rd_data$ENQ,
       master_xactor_f_rd_data$FULL_N;

  // ports of submodule master_xactor_f_wr_addr
  wire [96 : 0] master_xactor_f_wr_addr$D_IN, master_xactor_f_wr_addr$D_OUT;
  wire master_xactor_f_wr_addr$CLR,
       master_xactor_f_wr_addr$DEQ,
       master_xactor_f_wr_addr$EMPTY_N,
       master_xactor_f_wr_addr$ENQ,
       master_xactor_f_wr_addr$FULL_N;

  // ports of submodule master_xactor_f_wr_data
  wire [72 : 0] master_xactor_f_wr_data$D_IN, master_xactor_f_wr_data$D_OUT;
  wire master_xactor_f_wr_data$CLR,
       master_xactor_f_wr_data$DEQ,
       master_xactor_f_wr_data$EMPTY_N,
       master_xactor_f_wr_data$ENQ,
       master_xactor_f_wr_data$FULL_N;

  // ports of submodule master_xactor_f_wr_resp
  wire [5 : 0] master_xactor_f_wr_resp$D_IN, master_xactor_f_wr_resp$D_OUT;
  wire master_xactor_f_wr_resp$CLR,
       master_xactor_f_wr_resp$DEQ,
       master_xactor_f_wr_resp$EMPTY_N,
       master_xactor_f_wr_resp$ENQ,
       master_xactor_f_wr_resp$FULL_N;

  // ports of submodule ram_state_and_ctag_cset
  wire [22 : 0] ram_state_and_ctag_cset$DIA,
		ram_state_and_ctag_cset$DIB,
		ram_state_and_ctag_cset$DOB;
  wire [6 : 0] ram_state_and_ctag_cset$ADDRA, ram_state_and_ctag_cset$ADDRB;
  wire ram_state_and_ctag_cset$ENA,
       ram_state_and_ctag_cset$ENB,
       ram_state_and_ctag_cset$WEA,
       ram_state_and_ctag_cset$WEB;

  // ports of submodule ram_word64_set
  reg [63 : 0] ram_word64_set$DIB;
  reg [8 : 0] ram_word64_set$ADDRB;
  wire [63 : 0] ram_word64_set$DIA, ram_word64_set$DOB;
  wire [8 : 0] ram_word64_set$ADDRA;
  wire ram_word64_set$ENA,
       ram_word64_set$ENB,
       ram_word64_set$WEA,
       ram_word64_set$WEB;

  // ports of submodule soc_map
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr;
  wire soc_map$m_is_mem_addr;

  // ports of submodule tlb
  reg [31 : 0] tlb$insert_pte;
  reg [1 : 0] tlb$insert_level;
  wire [68 : 0] tlb$lookup;
  wire [33 : 0] tlb$insert_pte_pa;
  wire [19 : 0] tlb$insert_vpn, tlb$lookup_vpn;
  wire [8 : 0] tlb$insert_asid, tlb$lookup_asid;
  wire tlb$EN_flush, tlb$EN_insert, tlb$RDY_insert, tlb$RDY_lookup;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_ST_AMO_response,
       CAN_FIRE_RL_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_rl_discard_write_rsp,
       CAN_FIRE_RL_rl_drive_exception_rsp,
       CAN_FIRE_RL_rl_fabric_send_write_req,
       CAN_FIRE_RL_rl_io_AMO_SC_req,
       CAN_FIRE_RL_rl_io_AMO_op_req,
       CAN_FIRE_RL_rl_io_AMO_read_rsp,
       CAN_FIRE_RL_rl_io_read_req,
       CAN_FIRE_RL_rl_io_read_rsp,
       CAN_FIRE_RL_rl_io_write_req,
       CAN_FIRE_RL_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_rl_ptw_level_0,
       CAN_FIRE_RL_rl_ptw_level_1,
       CAN_FIRE_RL_rl_rereq,
       CAN_FIRE_RL_rl_reset,
       CAN_FIRE_RL_rl_start_cache_refill,
       CAN_FIRE_RL_rl_start_reset,
       CAN_FIRE_RL_rl_start_tlb_refill,
       CAN_FIRE_RL_rl_writeback_updated_PTE,
       CAN_FIRE_mem_master_m_arready,
       CAN_FIRE_mem_master_m_awready,
       CAN_FIRE_mem_master_m_bvalid,
       CAN_FIRE_mem_master_m_rvalid,
       CAN_FIRE_mem_master_m_wready,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_rl_ST_AMO_response,
       WILL_FIRE_RL_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_rl_discard_write_rsp,
       WILL_FIRE_RL_rl_drive_exception_rsp,
       WILL_FIRE_RL_rl_fabric_send_write_req,
       WILL_FIRE_RL_rl_io_AMO_SC_req,
       WILL_FIRE_RL_rl_io_AMO_op_req,
       WILL_FIRE_RL_rl_io_AMO_read_rsp,
       WILL_FIRE_RL_rl_io_read_req,
       WILL_FIRE_RL_rl_io_read_rsp,
       WILL_FIRE_RL_rl_io_write_req,
       WILL_FIRE_RL_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_rl_ptw_level_0,
       WILL_FIRE_RL_rl_ptw_level_1,
       WILL_FIRE_RL_rl_rereq,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_RL_rl_start_cache_refill,
       WILL_FIRE_RL_rl_start_reset,
       WILL_FIRE_RL_rl_start_tlb_refill,
       WILL_FIRE_RL_rl_writeback_updated_PTE,
       WILL_FIRE_mem_master_m_arready,
       WILL_FIRE_mem_master_m_awready,
       WILL_FIRE_mem_master_m_bvalid,
       WILL_FIRE_mem_master_m_rvalid,
       WILL_FIRE_mem_master_m_wready,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  wire [100 : 0] MUX_f_fabric_write_reqs$enq_1__VAL_1,
		 MUX_f_fabric_write_reqs$enq_1__VAL_2,
		 MUX_f_fabric_write_reqs$enq_1__VAL_3,
		 MUX_f_fabric_write_reqs$enq_1__VAL_4;
  wire [96 : 0] MUX_master_xactor_f_rd_addr$enq_1__VAL_1,
		MUX_master_xactor_f_rd_addr$enq_1__VAL_2,
		MUX_master_xactor_f_rd_addr$enq_1__VAL_3,
		MUX_master_xactor_f_rd_addr$enq_1__VAL_4;
  wire [63 : 0] MUX_dw_output_ld_val$wset_1__VAL_3,
		MUX_ram_word64_set$a_put_3__VAL_2,
		MUX_rg_ld_val$write_1__VAL_2;
  wire [33 : 0] MUX_rg_pa$write_1__VAL_1;
  wire [22 : 0] MUX_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [8 : 0] MUX_ram_word64_set$b_put_2__VAL_2,
	       MUX_ram_word64_set$b_put_2__VAL_4;
  wire [6 : 0] MUX_rg_cset_in_cache$write_1__VAL_1;
  wire [3 : 0] MUX_rg_exc_code$write_1__VAL_1,
	       MUX_rg_exc_code$write_1__VAL_5,
	       MUX_rg_state$write_1__VAL_11,
	       MUX_rg_state$write_1__VAL_13,
	       MUX_rg_state$write_1__VAL_14,
	       MUX_rg_state$write_1__VAL_16,
	       MUX_rg_state$write_1__VAL_2,
	       MUX_rg_state$write_1__VAL_4;
  wire MUX_dw_output_ld_val$wset_1__SEL_1,
       MUX_dw_output_ld_val$wset_1__SEL_2,
       MUX_dw_output_ld_val$wset_1__SEL_3,
       MUX_dw_output_ld_val$wset_1__SEL_4,
       MUX_f_fabric_write_reqs$enq_1__SEL_2,
       MUX_master_xactor_f_rd_addr$enq_1__SEL_1,
       MUX_master_xactor_f_rd_addr$enq_1__SEL_2,
       MUX_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_ram_word64_set$a_put_1__SEL_1,
       MUX_ram_word64_set$b_put_1__SEL_2,
       MUX_rg_error_during_refill$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_2,
       MUX_rg_exc_code$write_1__SEL_3,
       MUX_rg_exc_code$write_1__SEL_5,
       MUX_rg_exc_code$write_1__SEL_6,
       MUX_rg_exc_code$write_1__SEL_7,
       MUX_rg_ld_val$write_1__SEL_2,
       MUX_rg_lrsc_valid$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_11,
       MUX_rg_state$write_1__SEL_16,
       MUX_rg_state$write_1__SEL_17,
       MUX_rg_state$write_1__SEL_3,
       MUX_tlb$insert_1__SEL_1,
       MUX_tlb$insert_1__SEL_2,
       MUX_tlb$insert_1__SEL_3;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h3266;
  reg [31 : 0] v__h4416;
  reg [31 : 0] v__h4517;
  reg [31 : 0] v__h4666;
  reg [31 : 0] v__h14320;
  reg [31 : 0] v__h17908;
  reg [31 : 0] v__h21279;
  reg [31 : 0] v__h22212;
  reg [31 : 0] v__h21970;
  reg [31 : 0] v__h22610;
  reg [31 : 0] v__h22498;
  reg [31 : 0] v__h22141;
  reg [31 : 0] v__h23149;
  reg [31 : 0] v__h23220;
  reg [31 : 0] v__h23302;
  reg [31 : 0] v__h23078;
  reg [31 : 0] v__h23427;
  reg [31 : 0] v__h24186;
  reg [31 : 0] v__h24408;
  reg [31 : 0] v__h26016;
  reg [31 : 0] v__h26366;
  reg [31 : 0] v__h27466;
  reg [31 : 0] v__h27573;
  reg [31 : 0] v__h27678;
  reg [31 : 0] v__h27758;
  reg [31 : 0] v__h27968;
  reg [31 : 0] v__h28086;
  reg [31 : 0] v__h28380;
  reg [31 : 0] v__h28555;
  reg [31 : 0] v__h30814;
  reg [31 : 0] v__h28651;
  reg [31 : 0] v__h31421;
  reg [31 : 0] v__h31382;
  reg [31 : 0] v__h4051;
  reg [31 : 0] v__h31769;
  reg [31 : 0] v__h32945;
  reg [31 : 0] v__h3260;
  reg [31 : 0] v__h4045;
  reg [31 : 0] v__h4410;
  reg [31 : 0] v__h4511;
  reg [31 : 0] v__h4660;
  reg [31 : 0] v__h14314;
  reg [31 : 0] v__h17902;
  reg [31 : 0] v__h21273;
  reg [31 : 0] v__h21964;
  reg [31 : 0] v__h22135;
  reg [31 : 0] v__h22206;
  reg [31 : 0] v__h22492;
  reg [31 : 0] v__h22604;
  reg [31 : 0] v__h23072;
  reg [31 : 0] v__h23143;
  reg [31 : 0] v__h23214;
  reg [31 : 0] v__h23296;
  reg [31 : 0] v__h23421;
  reg [31 : 0] v__h24180;
  reg [31 : 0] v__h24402;
  reg [31 : 0] v__h26010;
  reg [31 : 0] v__h26360;
  reg [31 : 0] v__h27460;
  reg [31 : 0] v__h27567;
  reg [31 : 0] v__h27672;
  reg [31 : 0] v__h27752;
  reg [31 : 0] v__h27962;
  reg [31 : 0] v__h28080;
  reg [31 : 0] v__h28374;
  reg [31 : 0] v__h28549;
  reg [31 : 0] v__h28645;
  reg [31 : 0] v__h30808;
  reg [31 : 0] v__h31376;
  reg [31 : 0] v__h31415;
  reg [31 : 0] v__h31763;
  reg [31 : 0] v__h32939;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] CASE_rg_addr_BITS_2_TO_0_0x0_result0522_0x4_re_ETC__q50,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result4140_0x4_re_ETC__q30,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result7246_0x4_re_ETC__q34,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result7311_0x4_re_ETC__q35,
	       CASE_rg_f3_0b0_IF_rg_addr_6_BITS_2_TO_0_07_EQ__ETC__q52,
	       CASE_x1_avValue_pa593_BITS_2_TO_0_0x0_ram_word_ETC__q33,
	       CASE_x1_avValue_pa593_BITS_2_TO_0_0x0_ram_word_ETC__q53,
	       IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d676,
	       IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d685,
	       IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d741,
	       IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d750,
	       IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1062,
	       IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1082,
	       IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1169,
	       IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1189,
	       IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1199,
	       IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d534,
	       IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d554,
	       IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d564,
	       IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1046,
	       IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1074,
	       IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1153,
	       IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1181,
	       IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d518,
	       IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d546,
	       IF_rg_f3_03_EQ_0b0_04_THEN_IF_IF_rg_priv_6_ULE_ETC___d694,
	       IF_rg_f3_03_EQ_0b0_04_THEN_IF_IF_rg_priv_6_ULE_ETC___d759,
	       IF_rg_f3_03_EQ_0b0_04_THEN_IF_rg_addr_6_BITS_2_ETC___d572,
	       IF_rg_f3_03_EQ_0b10_34_THEN_SEXT_IF_rg_f3_03_E_ETC___d634,
	       _theResult_____2__h18406,
	       _theResult_____2__h28727,
	       ld_val__h26475,
	       mem_req_wr_data_wdata__h3017,
	       new_ld_val__h28681,
	       w1__h18398,
	       w1__h28715,
	       w1__h28719;
  reg [33 : 0] _theResult___fst__h6092;
  reg [7 : 0] mem_req_wr_data_wstrb__h3018;
  reg [2 : 0] value__h28267, x__h2838;
  reg CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_03_ETC__q29,
      IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d296,
      IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d301,
      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_OR_rg_ad_ETC___d225,
      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_OR_rg_ad_ETC___d233,
      IF_rg_f3_03_EQ_0b0_04_OR_rg_f3_03_EQ_0b100_05__ETC___d247,
      IF_rg_f3_03_EQ_0b0_04_THEN_IF_IF_rg_priv_6_ULE_ETC___d308;
  wire [63 : 0] IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_1_E_ETC___d580,
		IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_IF__ETC___d1200,
		IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_ram_ETC___d565,
		IF_rg_f3_03_EQ_0b10_34_THEN_SEXT_rg_st_amo_val_ETC___d698,
		IF_rg_op_12_EQ_1_50_OR_rg_op_12_EQ_2_15_AND_rg_ETC___d767,
		_theResult___snd_fst__h3025,
		cline_fabric_addr__h23480,
		fabric_addr__h28138,
		lev_0_pte_pa_w64_fa__h22246,
		lev_1_pte_pa_w64_fa__h21334,
		mem_req_wr_addr_awaddr__h2791,
		new_st_val__h18128,
		new_st_val__h18410,
		new_st_val__h18501,
		new_st_val__h19481,
		new_st_val__h19485,
		new_st_val__h19489,
		new_st_val__h19493,
		new_st_val__h19498,
		new_st_val__h19504,
		new_st_val__h19509,
		new_st_val__h28731,
		new_st_val__h28822,
		new_st_val__h30682,
		new_st_val__h30686,
		new_st_val__h30690,
		new_st_val__h30694,
		new_st_val__h30699,
		new_st_val__h30705,
		new_st_val__h30710,
		new_value__h16998,
		new_value__h7025,
		result__h13408,
		result__h13436,
		result__h13464,
		result__h13492,
		result__h13520,
		result__h13548,
		result__h13576,
		result__h13604,
		result__h13649,
		result__h13677,
		result__h13705,
		result__h13733,
		result__h13761,
		result__h13789,
		result__h13817,
		result__h13845,
		result__h13890,
		result__h13918,
		result__h13946,
		result__h13974,
		result__h14015,
		result__h14043,
		result__h14071,
		result__h14099,
		result__h14140,
		result__h14168,
		result__h14207,
		result__h14235,
		result__h26535,
		result__h26565,
		result__h26592,
		result__h26619,
		result__h26646,
		result__h26673,
		result__h26700,
		result__h26727,
		result__h26771,
		result__h26798,
		result__h26825,
		result__h26852,
		result__h26879,
		result__h26906,
		result__h26933,
		result__h26960,
		result__h27004,
		result__h27031,
		result__h27058,
		result__h27085,
		result__h27125,
		result__h27152,
		result__h27179,
		result__h27206,
		result__h27246,
		result__h27273,
		result__h27311,
		result__h27338,
		result__h28910,
		result__h29818,
		result__h29846,
		result__h29874,
		result__h29902,
		result__h29930,
		result__h29958,
		result__h29986,
		result__h30031,
		result__h30059,
		result__h30087,
		result__h30115,
		result__h30143,
		result__h30171,
		result__h30199,
		result__h30227,
		result__h30272,
		result__h30300,
		result__h30328,
		result__h30356,
		result__h30397,
		result__h30425,
		result__h30453,
		result__h30481,
		result__h30522,
		result__h30550,
		result__h30589,
		result__h30617,
		w1___1__h18469,
		w1___1__h28790,
		w2___1__h28791,
		w2__h28721,
		word64__h6843,
		x__h14707,
		x__h28710,
		x__h3652,
		y__h7052;
  wire [33 : 0] _theResult___fst__h5681,
		_theResult___fst__h5753,
		cline_addr__h23479,
		lev_0_PTN_pa__h22242,
		lev_0_pte_pa__h22244,
		lev_0_pte_pa_w64__h22245,
		lev_1_pte_pa__h21332,
		lev_1_pte_pa_w64__h21333,
		pa___1__h6098,
		pa___1__h6147,
		pa__h5581,
		satp_pa__h1894,
		vpn_0_pa__h22243,
		vpn_1_pa__h21331,
		x1_avValue_pa__h5593;
  wire [31 : 0] IF_rg_f3_03_EQ_0b0_04_THEN_IF_rg_addr_6_BITS_2_ETC__q31,
		_theResult____h21598,
		_theResult___snd_fst__h5683,
		_theResult___snd_fst__h5755,
		_theResult___snd_fst__h6230,
		ld_val6475_BITS_31_TO_0__q38,
		ld_val6475_BITS_63_TO_32__q45,
		master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q3,
		master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q10,
		pte___1__h6279,
		pte___1__h6307,
		pte___2__h6090,
		rg_st_amo_val_BITS_31_TO_0__q32,
		w18715_BITS_31_TO_0__q51,
		word64843_BITS_31_TO_0__q17,
		word64843_BITS_63_TO_32__q24,
		x1_avValue_pte__h5596;
  wire [15 : 0] ld_val6475_BITS_15_TO_0__q37,
		ld_val6475_BITS_31_TO_16__q41,
		ld_val6475_BITS_47_TO_32__q44,
		ld_val6475_BITS_63_TO_48__q48,
		master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q2,
		master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6,
		master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q9,
		master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q13,
		word64843_BITS_15_TO_0__q16,
		word64843_BITS_31_TO_16__q20,
		word64843_BITS_47_TO_32__q23,
		word64843_BITS_63_TO_48__q27;
  wire [7 : 0] ld_val6475_BITS_15_TO_8__q39,
	       ld_val6475_BITS_23_TO_16__q40,
	       ld_val6475_BITS_31_TO_24__q42,
	       ld_val6475_BITS_39_TO_32__q43,
	       ld_val6475_BITS_47_TO_40__q46,
	       ld_val6475_BITS_55_TO_48__q47,
	       ld_val6475_BITS_63_TO_56__q49,
	       ld_val6475_BITS_7_TO_0__q36,
	       master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q1,
	       master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q4,
	       master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q5,
	       master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7,
	       master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q8,
	       master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q11,
	       master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q12,
	       master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q14,
	       strobe64__h2955,
	       strobe64__h2957,
	       strobe64__h2959,
	       word64843_BITS_15_TO_8__q18,
	       word64843_BITS_23_TO_16__q19,
	       word64843_BITS_31_TO_24__q21,
	       word64843_BITS_39_TO_32__q22,
	       word64843_BITS_47_TO_40__q25,
	       word64843_BITS_55_TO_48__q26,
	       word64843_BITS_63_TO_56__q28,
	       word64843_BITS_7_TO_0__q15;
  wire [5 : 0] shift_bits__h2805;
  wire [3 : 0] IF_rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_ETC___d401,
	       IF_rg_op_12_EQ_1_50_OR_rg_op_12_EQ_2_15_AND_rg_ETC___d400,
	       IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0__ETC___d403,
	       access_exc_code__h2574,
	       b__h21233,
	       exc_code___1__h5992,
	       x1_avValue_exc_code__h5594;
  wire IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d304,
       IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_NOT_ETC___d239,
       IF_rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_ETC___d314,
       IF_rg_op_12_EQ_1_50_OR_rg_op_12_EQ_2_15_AND_rg_ETC___d313,
       IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0__ETC___d437,
       NOT_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_3_ETC___d295,
       NOT_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_3_ETC___d300,
       NOT_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_3_ETC___d303,
       NOT_IF_rg_pte_pa_56_BIT_2_57_THEN_master_xacto_ETC___d884,
       NOT_cfg_verbosity_read__0_ULE_2_72___d973,
       NOT_cfg_verbosity_read__0_ULT_2_07___d408,
       NOT_dmem_not_imem_27_AND_rg_op_12_EQ_0_13_OR_r_ETC___d343,
       NOT_dmem_not_imem_27_OR_NOT_rg_op_12_EQ_0_13_1_ETC___d134,
       NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d628,
       NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d641,
       NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d770,
       NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d788,
       NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d819,
       NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d824,
       NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d830,
       NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d834,
       NOT_master_xactor_f_rd_data_first__52_BITS_2_T_ETC___d877,
       NOT_ram_state_and_ctag_cset_b_read__93_BIT_22__ETC___d221,
       NOT_ram_state_and_ctag_cset_b_read__93_BIT_22__ETC___d249,
       NOT_ram_state_and_ctag_cset_b_read__93_BIT_22__ETC___d439,
       NOT_req_f3_BITS_1_TO_0_286_EQ_0b0_287_288_AND__ETC___d1307,
       NOT_rg_f3_03_EQ_0b11_40_41_OR_rg_amo_funct7_17_ETC___d305,
       NOT_rg_op_12_EQ_0_13_14_AND_NOT_rg_op_12_EQ_2__ETC___d394,
       NOT_rg_op_12_EQ_1_50_45_AND_NOT_rg_op_12_EQ_2__ETC___d448,
       NOT_rg_op_12_EQ_1_50_45_AND_NOT_rg_op_12_EQ_2__ETC___d638,
       NOT_rg_op_12_EQ_1_50_45_AND_NOT_rg_op_12_EQ_2__ETC___d817,
       NOT_rg_op_12_EQ_1_50_45_AND_NOT_rg_op_12_EQ_2__ETC___d822,
       NOT_rg_op_12_EQ_1_50_45_AND_NOT_rg_op_12_EQ_2__ETC___d828,
       NOT_rg_op_12_EQ_2_15_16_OR_NOT_rg_amo_funct7_1_ETC___d636,
       NOT_rg_op_12_EQ_2_15_16_OR_NOT_rg_amo_funct7_1_ETC___d791,
       NOT_rg_op_12_EQ_2_15_16_OR_NOT_rg_amo_funct7_1_ETC___d797,
       NOT_rg_op_12_EQ_2_15_16_OR_NOT_rg_amo_funct7_1_ETC___d803,
       NOT_rg_priv_6_EQ_0b0_02_36_OR_tlb_lookup_rg_sa_ETC___d350,
       NOT_rg_priv_6_EQ_0b0_02_36_OR_tlb_lookup_rg_sa_ETC___d373,
       NOT_rg_priv_6_EQ_0b0_02_36_OR_tlb_lookup_rg_sa_ETC___d411,
       NOT_rg_priv_6_EQ_0b0_02_36_OR_tlb_lookup_rg_sa_ETC___d587,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d168,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d316,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d355,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d370,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d422,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d423,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d430,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d433,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d454,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d460,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d461,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d590,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d595,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d601,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d608,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d614,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d620,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d624,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d630,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d643,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d765,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d766,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d772,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d778,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d784,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d790,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d795,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d796,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d801,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d807,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d808,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d813,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d814,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d821,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d826,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d832,
       NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d836,
       NOT_tlb_lookup_rg_satp_9_BITS_30_TO_22_5_rg_ad_ETC___d149,
       NOT_tlb_lookup_rg_satp_9_BITS_30_TO_22_5_rg_ad_ETC___d165,
       cfg_verbosity_read__0_ULE_1___d41,
       dmem_not_imem_AND_rg_op_12_EQ_0_13_OR_rg_op_12_ETC___d345,
       dmem_not_imem_OR_NOT_rg_op_12_EQ_0_13_14_AND_N_ETC___d126,
       lrsc_result__h14697,
       master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d893,
       master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901,
       master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d916,
       master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d920,
       master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d926,
       master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d952,
       ram_state_and_ctag_cset_b_read__93_BITS_21_TO__ETC___d198,
       ram_state_and_ctag_cset_b_read__93_BIT_22_94_A_ETC___d440,
       req_f3_BITS_1_TO_0_286_EQ_0b0_287_OR_req_f3_BI_ETC___d1316,
       rg_amo_funct7_17_BITS_6_TO_2_18_EQ_0b10_19_AND_ETC___d617,
       rg_lrsc_pa_54_EQ_IF_rg_priv_6_ULE_0b1_7_AND_rg_ETC___d255,
       rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d389,
       rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d426,
       rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d451,
       rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d455,
       rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d592,
       rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d611,
       rg_op_12_EQ_1_50_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d449,
       rg_op_12_EQ_1_50_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d639,
       rg_op_12_EQ_1_50_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d761,
       rg_priv_6_EQ_0b0_02_AND_NOT_tlb_lookup_rg_satp_ETC___d143,
       rg_priv_6_EQ_0b0_02_AND_NOT_tlb_lookup_rg_satp_ETC___d156,
       rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d152,
       rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d318,
       rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d358,
       rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d380,
       rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d397,
       rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d398,
       rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d416,
       rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d419,
       rg_priv_6_ULE_0b1___d87,
       rg_state_3_EQ_12_001_AND_rg_op_12_EQ_0_13_OR_r_ETC___d1003,
       tlb_lookup_rg_satp_9_BITS_30_TO_22_5_rg_addr_6_ETC___d132,
       tlb_lookup_rg_satp_9_BITS_30_TO_22_5_rg_addr_6_ETC___d352,
       y__h5918;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // value method valid
  assign valid = dw_valid$whas ;

  // value method addr
  assign addr = rg_addr ;

  // value method word64
  always@(MUX_dw_output_ld_val$wset_1__SEL_1 or
	  ld_val__h26475 or
	  MUX_dw_output_ld_val$wset_1__SEL_2 or
	  new_ld_val__h28681 or
	  MUX_dw_output_ld_val$wset_1__SEL_3 or
	  MUX_dw_output_ld_val$wset_1__VAL_3 or
	  MUX_dw_output_ld_val$wset_1__SEL_4 or rg_ld_val)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_output_ld_val$wset_1__SEL_1: word64 = ld_val__h26475;
      MUX_dw_output_ld_val$wset_1__SEL_2: word64 = new_ld_val__h28681;
      MUX_dw_output_ld_val$wset_1__SEL_3:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_3;
      MUX_dw_output_ld_val$wset_1__SEL_4: word64 = rg_ld_val;
      default: word64 = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // value method st_amo_val
  assign st_amo_val =
	     MUX_dw_output_ld_val$wset_1__SEL_3 ? 64'd0 : rg_st_amo_val ;

  // value method exc
  assign exc = rg_state == 4'd4 ;

  // value method exc_code
  assign exc_code = rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_m_awvalid
  assign mem_master_awvalid = master_xactor_f_wr_addr$EMPTY_N ;

  // value method mem_master_m_awid
  assign mem_master_awid = master_xactor_f_wr_addr$D_OUT[96:93] ;

  // value method mem_master_m_awaddr
  assign mem_master_awaddr = master_xactor_f_wr_addr$D_OUT[92:29] ;

  // value method mem_master_m_awlen
  assign mem_master_awlen = master_xactor_f_wr_addr$D_OUT[28:21] ;

  // value method mem_master_m_awsize
  assign mem_master_awsize = master_xactor_f_wr_addr$D_OUT[20:18] ;

  // value method mem_master_m_awburst
  assign mem_master_awburst = master_xactor_f_wr_addr$D_OUT[17:16] ;

  // value method mem_master_m_awlock
  assign mem_master_awlock = master_xactor_f_wr_addr$D_OUT[15] ;

  // value method mem_master_m_awcache
  assign mem_master_awcache = master_xactor_f_wr_addr$D_OUT[14:11] ;

  // value method mem_master_m_awprot
  assign mem_master_awprot = master_xactor_f_wr_addr$D_OUT[10:8] ;

  // value method mem_master_m_awqos
  assign mem_master_awqos = master_xactor_f_wr_addr$D_OUT[7:4] ;

  // value method mem_master_m_awregion
  assign mem_master_awregion = master_xactor_f_wr_addr$D_OUT[3:0] ;

  // action method mem_master_m_awready
  assign CAN_FIRE_mem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_awready = 1'd1 ;

  // value method mem_master_m_wvalid
  assign mem_master_wvalid = master_xactor_f_wr_data$EMPTY_N ;

  // value method mem_master_m_wdata
  assign mem_master_wdata = master_xactor_f_wr_data$D_OUT[72:9] ;

  // value method mem_master_m_wstrb
  assign mem_master_wstrb = master_xactor_f_wr_data$D_OUT[8:1] ;

  // value method mem_master_m_wlast
  assign mem_master_wlast = master_xactor_f_wr_data$D_OUT[0] ;

  // action method mem_master_m_wready
  assign CAN_FIRE_mem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_wready = 1'd1 ;

  // action method mem_master_m_bvalid
  assign CAN_FIRE_mem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_bvalid = 1'd1 ;

  // value method mem_master_m_bready
  assign mem_master_bready = master_xactor_f_wr_resp$FULL_N ;

  // value method mem_master_m_arvalid
  assign mem_master_arvalid = master_xactor_f_rd_addr$EMPTY_N ;

  // value method mem_master_m_arid
  assign mem_master_arid = master_xactor_f_rd_addr$D_OUT[96:93] ;

  // value method mem_master_m_araddr
  assign mem_master_araddr = master_xactor_f_rd_addr$D_OUT[92:29] ;

  // value method mem_master_m_arlen
  assign mem_master_arlen = master_xactor_f_rd_addr$D_OUT[28:21] ;

  // value method mem_master_m_arsize
  assign mem_master_arsize = master_xactor_f_rd_addr$D_OUT[20:18] ;

  // value method mem_master_m_arburst
  assign mem_master_arburst = master_xactor_f_rd_addr$D_OUT[17:16] ;

  // value method mem_master_m_arlock
  assign mem_master_arlock = master_xactor_f_rd_addr$D_OUT[15] ;

  // value method mem_master_m_arcache
  assign mem_master_arcache = master_xactor_f_rd_addr$D_OUT[14:11] ;

  // value method mem_master_m_arprot
  assign mem_master_arprot = master_xactor_f_rd_addr$D_OUT[10:8] ;

  // value method mem_master_m_arqos
  assign mem_master_arqos = master_xactor_f_rd_addr$D_OUT[7:4] ;

  // value method mem_master_m_arregion
  assign mem_master_arregion = master_xactor_f_rd_addr$D_OUT[3:0] ;

  // action method mem_master_m_arready
  assign CAN_FIRE_mem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_arready = 1'd1 ;

  // action method mem_master_m_rvalid
  assign CAN_FIRE_mem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_rvalid = 1'd1 ;

  // value method mem_master_m_rready
  assign mem_master_rready = master_xactor_f_rd_data$FULL_N ;

  // submodule f_fabric_write_reqs
  FIFO2 #(.width(32'd101), .guarded(32'd1)) f_fabric_write_reqs(.RST(RST_N),
								.CLK(CLK),
								.D_IN(f_fabric_write_reqs$D_IN),
								.ENQ(f_fabric_write_reqs$ENQ),
								.DEQ(f_fabric_write_reqs$DEQ),
								.CLR(f_fabric_write_reqs$CLR),
								.D_OUT(f_fabric_write_reqs$D_OUT),
								.FULL_N(f_fabric_write_reqs$FULL_N),
								.EMPTY_N(f_fabric_write_reqs$EMPTY_N));

  // submodule f_pte_writebacks
  FIFO2 #(.width(32'd66), .guarded(32'd1)) f_pte_writebacks(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(f_pte_writebacks$D_IN),
							    .ENQ(f_pte_writebacks$ENQ),
							    .DEQ(f_pte_writebacks$DEQ),
							    .CLR(f_pte_writebacks$CLR),
							    .D_OUT(f_pte_writebacks$D_OUT),
							    .FULL_N(f_pte_writebacks$FULL_N),
							    .EMPTY_N(f_pte_writebacks$EMPTY_N));

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_reqs(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_reqs$D_IN),
						       .ENQ(f_reset_reqs$ENQ),
						       .DEQ(f_reset_reqs$DEQ),
						       .CLR(f_reset_reqs$CLR),
						       .D_OUT(f_reset_reqs$D_OUT),
						       .FULL_N(f_reset_reqs$FULL_N),
						       .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_rsps(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_rsps$D_IN),
						       .ENQ(f_reset_rsps$ENQ),
						       .DEQ(f_reset_rsps$DEQ),
						       .CLR(f_reset_rsps$CLR),
						       .D_OUT(f_reset_rsps$D_OUT),
						       .FULL_N(f_reset_rsps$FULL_N),
						       .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule master_xactor_f_rd_addr
  FIFO2 #(.width(32'd97),
	  .guarded(32'd1)) master_xactor_f_rd_addr(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_rd_addr$D_IN),
						   .ENQ(master_xactor_f_rd_addr$ENQ),
						   .DEQ(master_xactor_f_rd_addr$DEQ),
						   .CLR(master_xactor_f_rd_addr$CLR),
						   .D_OUT(master_xactor_f_rd_addr$D_OUT),
						   .FULL_N(master_xactor_f_rd_addr$FULL_N),
						   .EMPTY_N(master_xactor_f_rd_addr$EMPTY_N));

  // submodule master_xactor_f_rd_data
  FIFO2 #(.width(32'd71),
	  .guarded(32'd1)) master_xactor_f_rd_data(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_rd_data$D_IN),
						   .ENQ(master_xactor_f_rd_data$ENQ),
						   .DEQ(master_xactor_f_rd_data$DEQ),
						   .CLR(master_xactor_f_rd_data$CLR),
						   .D_OUT(master_xactor_f_rd_data$D_OUT),
						   .FULL_N(master_xactor_f_rd_data$FULL_N),
						   .EMPTY_N(master_xactor_f_rd_data$EMPTY_N));

  // submodule master_xactor_f_wr_addr
  FIFO2 #(.width(32'd97),
	  .guarded(32'd1)) master_xactor_f_wr_addr(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_wr_addr$D_IN),
						   .ENQ(master_xactor_f_wr_addr$ENQ),
						   .DEQ(master_xactor_f_wr_addr$DEQ),
						   .CLR(master_xactor_f_wr_addr$CLR),
						   .D_OUT(master_xactor_f_wr_addr$D_OUT),
						   .FULL_N(master_xactor_f_wr_addr$FULL_N),
						   .EMPTY_N(master_xactor_f_wr_addr$EMPTY_N));

  // submodule master_xactor_f_wr_data
  FIFO2 #(.width(32'd73),
	  .guarded(32'd1)) master_xactor_f_wr_data(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_wr_data$D_IN),
						   .ENQ(master_xactor_f_wr_data$ENQ),
						   .DEQ(master_xactor_f_wr_data$DEQ),
						   .CLR(master_xactor_f_wr_data$CLR),
						   .D_OUT(master_xactor_f_wr_data$D_OUT),
						   .FULL_N(master_xactor_f_wr_data$FULL_N),
						   .EMPTY_N(master_xactor_f_wr_data$EMPTY_N));

  // submodule master_xactor_f_wr_resp
  FIFO2 #(.width(32'd6), .guarded(32'd1)) master_xactor_f_wr_resp(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(master_xactor_f_wr_resp$D_IN),
								  .ENQ(master_xactor_f_wr_resp$ENQ),
								  .DEQ(master_xactor_f_wr_resp$DEQ),
								  .CLR(master_xactor_f_wr_resp$CLR),
								  .D_OUT(master_xactor_f_wr_resp$D_OUT),
								  .FULL_N(master_xactor_f_wr_resp$FULL_N),
								  .EMPTY_N(master_xactor_f_wr_resp$EMPTY_N));

  // submodule ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd23),
	  .MEMSIZE(8'd128)) ram_state_and_ctag_cset(.CLKA(CLK),
						    .CLKB(CLK),
						    .ADDRA(ram_state_and_ctag_cset$ADDRA),
						    .ADDRB(ram_state_and_ctag_cset$ADDRB),
						    .DIA(ram_state_and_ctag_cset$DIA),
						    .DIB(ram_state_and_ctag_cset$DIB),
						    .WEA(ram_state_and_ctag_cset$WEA),
						    .WEB(ram_state_and_ctag_cset$WEB),
						    .ENA(ram_state_and_ctag_cset$ENA),
						    .ENB(ram_state_and_ctag_cset$ENB),
						    .DOA(),
						    .DOB(ram_state_and_ctag_cset$DOB));

  // submodule ram_word64_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd9),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(10'd512)) ram_word64_set(.CLKA(CLK),
					    .CLKB(CLK),
					    .ADDRA(ram_word64_set$ADDRA),
					    .ADDRB(ram_word64_set$ADDRB),
					    .DIA(ram_word64_set$DIA),
					    .DIB(ram_word64_set$DIB),
					    .WEA(ram_word64_set$WEA),
					    .WEB(ram_word64_set$WEB),
					    .ENA(ram_word64_set$ENA),
					    .ENB(ram_word64_set$ENB),
					    .DOA(),
					    .DOB(ram_word64_set$DOB));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_near_mem_io_addr_base(),
		    .m_near_mem_io_addr_size(),
		    .m_near_mem_io_addr_lim(),
		    .m_plic_addr_base(),
		    .m_plic_addr_size(),
		    .m_plic_addr_lim(),
		    .m_uart0_addr_base(),
		    .m_uart0_addr_size(),
		    .m_uart0_addr_lim(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_lim(),
		    .m_mem0_controller_addr_base(),
		    .m_mem0_controller_addr_size(),
		    .m_mem0_controller_addr_lim(),
		    .m_tcm_addr_base(),
		    .m_tcm_addr_size(),
		    .m_tcm_addr_lim(),
		    .m_is_mem_addr(soc_map$m_is_mem_addr),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value());

  // submodule tlb
  mkTLB #(.dmem_not_imem(dmem_not_imem)) tlb(.CLK(CLK),
					     .RST_N(RST_N),
					     .insert_asid(tlb$insert_asid),
					     .insert_level(tlb$insert_level),
					     .insert_pte(tlb$insert_pte),
					     .insert_pte_pa(tlb$insert_pte_pa),
					     .insert_vpn(tlb$insert_vpn),
					     .lookup_asid(tlb$lookup_asid),
					     .lookup_vpn(tlb$lookup_vpn),
					     .EN_flush(tlb$EN_flush),
					     .EN_insert(tlb$EN_insert),
					     .RDY_flush(),
					     .lookup(tlb$lookup),
					     .RDY_lookup(tlb$RDY_lookup),
					     .RDY_insert(tlb$RDY_insert));

  // rule RL_rl_fabric_send_write_req
  assign CAN_FIRE_RL_rl_fabric_send_write_req =
	     f_fabric_write_reqs$EMPTY_N && master_xactor_f_wr_addr$FULL_N &&
	     master_xactor_f_wr_data$FULL_N ;
  assign WILL_FIRE_RL_rl_fabric_send_write_req =
	     CAN_FIRE_RL_rl_fabric_send_write_req ;

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset =
	     (rg_cset_in_cache != 7'd127 ||
	      f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N) &&
	     rg_state == 4'd1 ;
  assign WILL_FIRE_RL_rl_reset = CAN_FIRE_RL_rl_reset ;

  // rule RL_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_rl_probe_and_immed_rsp =
	     (cfg_verbosity_read__0_ULE_1___d41 || tlb$RDY_lookup) &&
	     (!rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || tlb$RDY_lookup) &&
	     rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d318 &&
	     rg_state == 4'd3 ;
  assign WILL_FIRE_RL_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_rl_probe_and_immed_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_start_tlb_refill
  assign CAN_FIRE_RL_rl_start_tlb_refill =
	     master_xactor_f_rd_addr$FULL_N && rg_state == 4'd5 &&
	     b__h21233 == 4'd0 ;
  assign WILL_FIRE_RL_rl_start_tlb_refill =
	     CAN_FIRE_RL_rl_start_tlb_refill && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_ptw_level_1
  assign CAN_FIRE_RL_rl_ptw_level_1 =
	     master_xactor_f_rd_data$EMPTY_N &&
	     NOT_master_xactor_f_rd_data_first__52_BITS_2_T_ETC___d877 &&
	     rg_state == 4'd6 ;
  assign WILL_FIRE_RL_rl_ptw_level_1 =
	     CAN_FIRE_RL_rl_ptw_level_1 && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_ptw_level_0
  assign CAN_FIRE_RL_rl_ptw_level_0 =
	     master_xactor_f_rd_data$EMPTY_N &&
	     (master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	      !_theResult____h21598[0] ||
	      !_theResult____h21598[1] && _theResult____h21598[2] ||
	      !_theResult____h21598[3] && !_theResult____h21598[1] ||
	      tlb$RDY_insert) &&
	     rg_state == 4'd7 ;
  assign WILL_FIRE_RL_rl_ptw_level_0 =
	     CAN_FIRE_RL_rl_ptw_level_0 && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_start_cache_refill
  assign CAN_FIRE_RL_rl_start_cache_refill =
	     master_xactor_f_rd_addr$FULL_N && rg_state == 4'd8 &&
	     b__h21233 == 4'd0 ;
  assign WILL_FIRE_RL_rl_start_cache_refill =
	     CAN_FIRE_RL_rl_start_cache_refill &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;

  // rule RL_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_rl_cache_refill_rsps_loop =
	     master_xactor_f_rd_data$EMPTY_N && rg_state == 4'd9 ;
  assign WILL_FIRE_RL_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_rl_cache_refill_rsps_loop &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;

  // rule RL_rl_rereq
  assign CAN_FIRE_RL_rl_rereq = rg_state == 4'd10 ;
  assign WILL_FIRE_RL_rl_rereq =
	     CAN_FIRE_RL_rl_rereq && !WILL_FIRE_RL_rl_start_reset && !EN_req ;

  // rule RL_rl_ST_AMO_response
  assign CAN_FIRE_RL_rl_ST_AMO_response = rg_state == 4'd11 ;
  assign WILL_FIRE_RL_rl_ST_AMO_response = CAN_FIRE_RL_rl_ST_AMO_response ;

  // rule RL_rl_io_read_req
  assign CAN_FIRE_RL_rl_io_read_req =
	     master_xactor_f_rd_addr$FULL_N &&
	     rg_state_3_EQ_12_001_AND_rg_op_12_EQ_0_13_OR_r_ETC___d1003 ;
  assign WILL_FIRE_RL_rl_io_read_req =
	     CAN_FIRE_RL_rl_io_read_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_read_rsp
  assign CAN_FIRE_RL_rl_io_read_rsp =
	     master_xactor_f_rd_data$EMPTY_N && rg_state == 4'd13 ;
  assign WILL_FIRE_RL_rl_io_read_rsp =
	     CAN_FIRE_RL_rl_io_read_rsp && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_rl_maintain_io_read_rsp = rg_state == 4'd14 ;
  assign WILL_FIRE_RL_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_rl_maintain_io_read_rsp ;

  // rule RL_rl_io_write_req
  assign CAN_FIRE_RL_rl_io_write_req =
	     f_fabric_write_reqs$FULL_N && rg_state == 4'd12 &&
	     rg_op == 2'd1 ;
  assign WILL_FIRE_RL_rl_io_write_req =
	     CAN_FIRE_RL_rl_io_write_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_SC_req
  assign CAN_FIRE_RL_rl_io_AMO_SC_req =
	     rg_state == 4'd12 && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 ;
  assign WILL_FIRE_RL_rl_io_AMO_SC_req =
	     CAN_FIRE_RL_rl_io_AMO_SC_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_op_req
  assign CAN_FIRE_RL_rl_io_AMO_op_req =
	     master_xactor_f_rd_addr$FULL_N && rg_state == 4'd12 &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] != 5'b00010 &&
	     rg_amo_funct7[6:2] != 5'b00011 ;
  assign WILL_FIRE_RL_rl_io_AMO_op_req =
	     CAN_FIRE_RL_rl_io_AMO_op_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_writeback_updated_PTE
  assign CAN_FIRE_RL_rl_writeback_updated_PTE =
	     f_pte_writebacks$EMPTY_N && f_fabric_write_reqs$FULL_N ;
  assign WILL_FIRE_RL_rl_writeback_updated_PTE =
	     CAN_FIRE_RL_rl_writeback_updated_PTE &&
	     !WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     !WILL_FIRE_RL_rl_io_write_req &&
	     !WILL_FIRE_RL_rl_probe_and_immed_rsp ;

  // rule RL_rl_io_AMO_read_rsp
  assign CAN_FIRE_RL_rl_io_AMO_read_rsp =
	     master_xactor_f_rd_data$EMPTY_N &&
	     (master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	      f_fabric_write_reqs$FULL_N) &&
	     rg_state == 4'd15 ;
  assign WILL_FIRE_RL_rl_io_AMO_read_rsp =
	     CAN_FIRE_RL_rl_io_AMO_read_rsp && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_discard_write_rsp
  assign CAN_FIRE_RL_rl_discard_write_rsp =
	     b__h21233 != 4'd0 && master_xactor_f_wr_resp$EMPTY_N ;
  assign WILL_FIRE_RL_rl_discard_write_rsp =
	     CAN_FIRE_RL_rl_discard_write_rsp ;

  // rule RL_rl_drive_exception_rsp
  assign CAN_FIRE_RL_rl_drive_exception_rsp = rg_state == 4'd4 ;
  assign WILL_FIRE_RL_rl_drive_exception_rsp = rg_state == 4'd4 ;

  // rule RL_rl_start_reset
  assign CAN_FIRE_RL_rl_start_reset = MUX_rg_state$write_1__SEL_3 ;
  assign WILL_FIRE_RL_rl_start_reset = MUX_rg_state$write_1__SEL_3 ;

  // inputs to muxes for submodule ports
  assign MUX_dw_output_ld_val$wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_2 =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_3 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d461 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_4 =
	     WILL_FIRE_RL_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_rl_ST_AMO_response ;
  assign MUX_f_fabric_write_reqs$enq_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d766 ;
  assign MUX_master_xactor_f_rd_addr$enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     _theResult____h21598[0] &&
	     !_theResult____h21598[2] &&
	     !_theResult____h21598[3] &&
	     !_theResult____h21598[1] ;
  assign MUX_master_xactor_f_rd_addr$enq_1__SEL_2 =
	     WILL_FIRE_RL_rl_io_AMO_op_req || WILL_FIRE_RL_rl_io_read_req ;
  assign MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     EN_req &&
	     req_f3_BITS_1_TO_0_286_EQ_0b0_287_OR_req_f3_BI_ETC___d1316 ;
  assign MUX_ram_word64_set$a_put_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ;
  assign MUX_ram_word64_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] != 2'd3 ;
  assign MUX_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ;
  assign MUX_rg_exc_code$write_1__SEL_1 =
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_286_EQ_0b0_287_288_AND__ETC___d1307 ;
  assign MUX_rg_exc_code$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ;
  assign MUX_rg_exc_code$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ;
  assign MUX_rg_exc_code$write_1__SEL_5 =
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     (!_theResult____h21598[0] ||
	      !_theResult____h21598[1] && _theResult____h21598[2] ||
	      !_theResult____h21598[3] && !_theResult____h21598[1] ||
	      master_xactor_f_rd_data$D_OUT[2:1] != 2'b0) ;
  assign MUX_rg_exc_code$write_1__SEL_6 =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     NOT_IF_rg_pte_pa_56_BIT_2_57_THEN_master_xacto_ETC___d884 ;
  assign MUX_rg_exc_code$write_1__SEL_7 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d152 ;
  assign MUX_rg_ld_val$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d630 ;
  assign MUX_rg_lrsc_valid$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d454 ;
  assign MUX_rg_state$write_1__SEL_3 =
	     f_reset_reqs$EMPTY_N && rg_state != 4'd1 ;
  assign MUX_rg_state$write_1__SEL_11 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] == 2'd3 ;
  assign MUX_rg_state$write_1__SEL_16 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d398 ;
  assign MUX_rg_state$write_1__SEL_17 =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ;
  assign MUX_tlb$insert_1__SEL_1 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d380 ;
  assign MUX_tlb$insert_1__SEL_2 =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d916 ;
  assign MUX_tlb$insert_1__SEL_3 =
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     _theResult____h21598[0] &&
	     (_theResult____h21598[1] || !_theResult____h21598[2]) &&
	     (_theResult____h21598[3] || _theResult____h21598[1]) ;
  assign MUX_dw_output_ld_val$wset_1__VAL_3 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       new_value__h7025 :
	       new_value__h16998 ;
  assign MUX_f_fabric_write_reqs$enq_1__VAL_1 = { rg_f3, rg_pa, x__h28710 } ;
  assign MUX_f_fabric_write_reqs$enq_1__VAL_2 =
	     { rg_f3,
	       x1_avValue_pa__h5593,
	       IF_rg_op_12_EQ_1_50_OR_rg_op_12_EQ_2_15_AND_rg_ETC___d767 } ;
  assign MUX_f_fabric_write_reqs$enq_1__VAL_3 =
	     { 3'b010, f_pte_writebacks$D_OUT[65:32], x__h3652 } ;
  assign MUX_f_fabric_write_reqs$enq_1__VAL_4 =
	     { rg_f3, rg_pa, rg_st_amo_val } ;
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_1 =
	     { 4'd0, lev_0_pte_pa_w64_fa__h22246, 29'd851968 } ;
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_2 =
	     { 4'd0, fabric_addr__h28138, 8'd0, value__h28267, 18'd65536 } ;
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_3 =
	     { 4'd0, lev_1_pte_pa_w64_fa__h21334, 29'd589824 } ;
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_4 =
	     { 4'd0, cline_fabric_addr__h23480, 29'd7143424 } ;
  assign MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 = { 1'd1, rg_pa[33:12] } ;
  assign MUX_ram_word64_set$a_put_3__VAL_2 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       IF_rg_f3_03_EQ_0b0_04_THEN_IF_IF_rg_priv_6_ULE_ETC___d694 :
	       IF_rg_f3_03_EQ_0b0_04_THEN_IF_IF_rg_priv_6_ULE_ETC___d759 ;
  assign MUX_ram_word64_set$b_put_2__VAL_2 = rg_word64_set_in_cache + 9'd1 ;
  assign MUX_ram_word64_set$b_put_2__VAL_4 = { rg_addr[11:5], 2'd0 } ;
  assign MUX_rg_cset_in_cache$write_1__VAL_1 = rg_cset_in_cache + 7'd1 ;
  assign MUX_rg_exc_code$write_1__VAL_1 = (req_op == 2'd0) ? 4'd4 : 4'd6 ;
  assign MUX_rg_exc_code$write_1__VAL_5 =
	     (master_xactor_f_rd_data$D_OUT[2:1] == 2'b0) ?
	       exc_code___1__h5992 :
	       access_exc_code__h2574 ;
  assign MUX_rg_ld_val$write_1__VAL_2 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       x__h14707 :
	       IF_rg_f3_03_EQ_0b10_34_THEN_SEXT_IF_rg_f3_03_E_ETC___d634 ;
  assign MUX_rg_pa$write_1__VAL_1 = { 2'd0, req_addr } ;
  assign MUX_rg_state$write_1__VAL_2 =
	     NOT_req_f3_BITS_1_TO_0_286_EQ_0b0_287_288_AND__ETC___d1307 ?
	       4'd4 :
	       4'd3 ;
  assign MUX_rg_state$write_1__VAL_4 =
	     (master_xactor_f_rd_data$D_OUT[2:1] == 2'b0) ? 4'd14 : 4'd4 ;
  assign MUX_rg_state$write_1__VAL_11 =
	     (master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	      rg_error_during_refill) ?
	       4'd4 :
	       4'd10 ;
  assign MUX_rg_state$write_1__VAL_13 =
	     (master_xactor_f_rd_data$D_OUT[2:1] == 2'b0) ?
	       ((!_theResult____h21598[0] ||
		 !_theResult____h21598[1] && _theResult____h21598[2] ||
		 !_theResult____h21598[3] && !_theResult____h21598[1]) ?
		  4'd4 :
		  4'd10) :
	       4'd4 ;
  assign MUX_rg_state$write_1__VAL_14 =
	     (master_xactor_f_rd_data$D_OUT[2:1] == 2'b0) ?
	       ((!_theResult____h21598[0] ||
		 !_theResult____h21598[1] && _theResult____h21598[2]) ?
		  4'd4 :
		  ((!_theResult____h21598[3] && !_theResult____h21598[1]) ?
		     4'd7 :
		     ((_theResult____h21598[19:10] == 10'd0) ?
			4'd10 :
			4'd4))) :
	       4'd4 ;
  assign MUX_rg_state$write_1__VAL_16 =
	     (rg_priv_6_ULE_0b1___d87 && rg_satp[31] && !tlb$lookup[68]) ?
	       4'd5 :
	       IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0__ETC___d403 ;

  // inlined wires
  assign dw_valid$whas =
	     (WILL_FIRE_RL_rl_io_read_rsp ||
	      WILL_FIRE_RL_rl_io_AMO_read_rsp) &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d461 ||
	     WILL_FIRE_RL_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_rl_ST_AMO_response ;
  assign ctr_wr_rsps_pending_crg$port0__write_1 =
	     ctr_wr_rsps_pending_crg + 4'd1 ;
  assign ctr_wr_rsps_pending_crg$port1__write_1 = b__h21233 - 4'd1 ;
  assign ctr_wr_rsps_pending_crg$port2__read =
	     CAN_FIRE_RL_rl_discard_write_rsp ?
	       ctr_wr_rsps_pending_crg$port1__write_1 :
	       b__h21233 ;
  assign ctr_wr_rsps_pending_crg$EN_port2__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign ctr_wr_rsps_pending_crg$port3__read =
	     ctr_wr_rsps_pending_crg$EN_port2__write ?
	       4'd0 :
	       ctr_wr_rsps_pending_crg$port2__read ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_set_verbosity ;

  // register ctr_wr_rsps_pending_crg
  assign ctr_wr_rsps_pending_crg$D_IN = ctr_wr_rsps_pending_crg$port3__read ;
  assign ctr_wr_rsps_pending_crg$EN = 1'b1 ;

  // register rg_addr
  assign rg_addr$D_IN = req_addr ;
  assign rg_addr$EN = EN_req ;

  // register rg_amo_funct7
  assign rg_amo_funct7$D_IN = req_amo_funct7 ;
  assign rg_amo_funct7$EN = EN_req ;

  // register rg_cset_in_cache
  assign rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_rl_reset ?
	       MUX_rg_cset_in_cache$write_1__VAL_1 :
	       7'd0 ;
  assign rg_cset_in_cache$EN =
	     WILL_FIRE_RL_rl_reset || WILL_FIRE_RL_rl_start_reset ;

  // register rg_error_during_refill
  assign rg_error_during_refill$D_IN =
	     MUX_rg_error_during_refill$write_1__SEL_1 ;
  assign rg_error_during_refill$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_exc_code
  always@(MUX_rg_exc_code$write_1__SEL_1 or
	  MUX_rg_exc_code$write_1__VAL_1 or
	  MUX_rg_exc_code$write_1__SEL_2 or
	  MUX_rg_exc_code$write_1__SEL_3 or
	  MUX_rg_error_during_refill$write_1__SEL_1 or
	  access_exc_code__h2574 or
	  MUX_rg_exc_code$write_1__SEL_5 or
	  MUX_rg_exc_code$write_1__VAL_5 or
	  MUX_rg_exc_code$write_1__SEL_6 or
	  MUX_rg_exc_code$write_1__SEL_7 or x1_avValue_exc_code__h5594)
  case (1'b1)
    MUX_rg_exc_code$write_1__SEL_1:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_1;
    MUX_rg_exc_code$write_1__SEL_2: rg_exc_code$D_IN = 4'd7;
    MUX_rg_exc_code$write_1__SEL_3: rg_exc_code$D_IN = 4'd5;
    MUX_rg_error_during_refill$write_1__SEL_1:
	rg_exc_code$D_IN = access_exc_code__h2574;
    MUX_rg_exc_code$write_1__SEL_5:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_5;
    MUX_rg_exc_code$write_1__SEL_6:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_5;
    MUX_rg_exc_code$write_1__SEL_7:
	rg_exc_code$D_IN = x1_avValue_exc_code__h5594;
    default: rg_exc_code$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign rg_exc_code$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d152 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_286_EQ_0b0_287_288_AND__ETC___d1307 ||
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     NOT_IF_rg_pte_pa_56_BIT_2_57_THEN_master_xacto_ETC___d884 ||
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     (!_theResult____h21598[0] ||
	      !_theResult____h21598[1] && _theResult____h21598[2] ||
	      !_theResult____h21598[3] && !_theResult____h21598[1] ||
	      master_xactor_f_rd_data$D_OUT[2:1] != 2'b0) ;

  // register rg_f3
  assign rg_f3$D_IN = req_f3 ;
  assign rg_f3$EN = EN_req ;

  // register rg_ld_val
  always@(MUX_dw_output_ld_val$wset_1__SEL_2 or
	  new_ld_val__h28681 or
	  MUX_rg_ld_val$write_1__SEL_2 or
	  MUX_rg_ld_val$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  ld_val__h26475 or WILL_FIRE_RL_rl_io_AMO_SC_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_output_ld_val$wset_1__SEL_2: rg_ld_val$D_IN = new_ld_val__h28681;
      MUX_rg_ld_val$write_1__SEL_2:
	  rg_ld_val$D_IN = MUX_rg_ld_val$write_1__VAL_2;
      WILL_FIRE_RL_rl_io_read_rsp: rg_ld_val$D_IN = ld_val__h26475;
      WILL_FIRE_RL_rl_io_AMO_SC_req: rg_ld_val$D_IN = 64'd1;
      default: rg_ld_val$D_IN = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_ld_val$EN =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d630 ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_io_AMO_SC_req ;

  // register rg_lower_word32
  assign rg_lower_word32$D_IN = 32'h0 ;
  assign rg_lower_word32$EN = 1'b0 ;

  // register rg_lower_word32_full
  assign rg_lower_word32_full$D_IN = 1'd0 ;
  assign rg_lower_word32_full$EN =
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_lrsc_pa
  assign rg_lrsc_pa$D_IN = x1_avValue_pa__h5593 ;
  assign rg_lrsc_pa$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (!rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d601 ;

  // register rg_lrsc_valid
  assign rg_lrsc_valid$D_IN =
	     MUX_rg_lrsc_valid$write_1__SEL_2 &&
	     rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d455 ;
  assign rg_lrsc_valid$EN =
	     WILL_FIRE_RL_rl_io_read_req && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d454 ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_mstatus_MXR
  assign rg_mstatus_MXR$D_IN = req_mstatus_MXR ;
  assign rg_mstatus_MXR$EN = EN_req ;

  // register rg_op
  assign rg_op$D_IN = req_op ;
  assign rg_op$EN = EN_req ;

  // register rg_pa
  assign rg_pa$D_IN =
	     EN_req ? MUX_rg_pa$write_1__VAL_1 : x1_avValue_pa__h5593 ;
  assign rg_pa$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d423 ||
	     EN_req ;

  // register rg_priv
  assign rg_priv$D_IN = req_priv ;
  assign rg_priv$EN = EN_req ;

  // register rg_pte_pa
  assign rg_pte_pa$D_IN =
	     MUX_master_xactor_f_rd_addr$enq_1__SEL_1 ?
	       lev_0_pte_pa__h22244 :
	       lev_1_pte_pa__h21332 ;
  assign rg_pte_pa$EN =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     _theResult____h21598[0] &&
	     !_theResult____h21598[2] &&
	     !_theResult____h21598[3] &&
	     !_theResult____h21598[1] ||
	     WILL_FIRE_RL_rl_start_tlb_refill ;

  // register rg_satp
  assign rg_satp$D_IN = req_satp ;
  assign rg_satp$EN = EN_req ;

  // register rg_sstatus_SUM
  assign rg_sstatus_SUM$D_IN = req_sstatus_SUM ;
  assign rg_sstatus_SUM$EN = EN_req ;

  // register rg_st_amo_val
  assign rg_st_amo_val$D_IN = EN_req ? req_st_value : new_st_val__h18128 ;
  assign rg_st_amo_val$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d836 ||
	     EN_req ;

  // register rg_state
  always@(EN_tlb_flush or
	  EN_req or
	  MUX_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_start_reset or
	  WILL_FIRE_RL_rl_io_AMO_read_rsp or
	  MUX_rg_state$write_1__VAL_4 or
	  WILL_FIRE_RL_rl_io_AMO_op_req or
	  WILL_FIRE_RL_rl_io_AMO_SC_req or
	  WILL_FIRE_RL_rl_io_write_req or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  WILL_FIRE_RL_rl_io_read_req or
	  WILL_FIRE_RL_rl_rereq or
	  MUX_rg_state$write_1__SEL_11 or
	  MUX_rg_state$write_1__VAL_11 or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  WILL_FIRE_RL_rl_ptw_level_0 or
	  MUX_rg_state$write_1__VAL_13 or
	  WILL_FIRE_RL_rl_ptw_level_1 or
	  MUX_rg_state$write_1__VAL_14 or
	  WILL_FIRE_RL_rl_start_tlb_refill or
	  MUX_rg_state$write_1__SEL_16 or
	  MUX_rg_state$write_1__VAL_16 or MUX_rg_state$write_1__SEL_17)
  case (1'b1)
    EN_tlb_flush: rg_state$D_IN = 4'd2;
    EN_req: rg_state$D_IN = MUX_rg_state$write_1__VAL_2;
    WILL_FIRE_RL_rl_start_reset: rg_state$D_IN = 4'd1;
    WILL_FIRE_RL_rl_io_AMO_read_rsp:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_4;
    WILL_FIRE_RL_rl_io_AMO_op_req: rg_state$D_IN = 4'd15;
    WILL_FIRE_RL_rl_io_AMO_SC_req || WILL_FIRE_RL_rl_io_write_req:
	rg_state$D_IN = 4'd11;
    WILL_FIRE_RL_rl_io_read_rsp: rg_state$D_IN = MUX_rg_state$write_1__VAL_4;
    WILL_FIRE_RL_rl_io_read_req: rg_state$D_IN = 4'd13;
    WILL_FIRE_RL_rl_rereq: rg_state$D_IN = 4'd3;
    MUX_rg_state$write_1__SEL_11:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_11;
    WILL_FIRE_RL_rl_start_cache_refill: rg_state$D_IN = 4'd9;
    WILL_FIRE_RL_rl_ptw_level_0: rg_state$D_IN = MUX_rg_state$write_1__VAL_13;
    WILL_FIRE_RL_rl_ptw_level_1: rg_state$D_IN = MUX_rg_state$write_1__VAL_14;
    WILL_FIRE_RL_rl_start_tlb_refill: rg_state$D_IN = 4'd6;
    MUX_rg_state$write_1__SEL_16:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_16;
    MUX_rg_state$write_1__SEL_17: rg_state$D_IN = 4'd2;
    default: rg_state$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] == 2'd3 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d398 ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_rl_ptw_level_1 ||
	     WILL_FIRE_RL_rl_ptw_level_0 ||
	     EN_req ||
	     WILL_FIRE_RL_rl_start_reset ||
	     EN_tlb_flush ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_tlb_refill ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_io_AMO_SC_req ||
	     WILL_FIRE_RL_rl_io_write_req ||
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_io_AMO_op_req ;

  // register rg_word64_set_in_cache
  assign rg_word64_set_in_cache$D_IN =
	     MUX_ram_word64_set$b_put_1__SEL_2 ?
	       MUX_ram_word64_set$b_put_2__VAL_2 :
	       MUX_ram_word64_set$b_put_2__VAL_4 ;
  assign rg_word64_set_in_cache$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule f_fabric_write_reqs
  always@(MUX_dw_output_ld_val$wset_1__SEL_2 or
	  MUX_f_fabric_write_reqs$enq_1__VAL_1 or
	  MUX_f_fabric_write_reqs$enq_1__SEL_2 or
	  MUX_f_fabric_write_reqs$enq_1__VAL_2 or
	  WILL_FIRE_RL_rl_writeback_updated_PTE or
	  MUX_f_fabric_write_reqs$enq_1__VAL_3 or
	  WILL_FIRE_RL_rl_io_write_req or
	  MUX_f_fabric_write_reqs$enq_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_output_ld_val$wset_1__SEL_2:
	  f_fabric_write_reqs$D_IN = MUX_f_fabric_write_reqs$enq_1__VAL_1;
      MUX_f_fabric_write_reqs$enq_1__SEL_2:
	  f_fabric_write_reqs$D_IN = MUX_f_fabric_write_reqs$enq_1__VAL_2;
      WILL_FIRE_RL_rl_writeback_updated_PTE:
	  f_fabric_write_reqs$D_IN = MUX_f_fabric_write_reqs$enq_1__VAL_3;
      WILL_FIRE_RL_rl_io_write_req:
	  f_fabric_write_reqs$D_IN = MUX_f_fabric_write_reqs$enq_1__VAL_4;
      default: f_fabric_write_reqs$D_IN =
		   101'h0AAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_fabric_write_reqs$ENQ =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d766 ||
	     WILL_FIRE_RL_rl_writeback_updated_PTE ||
	     WILL_FIRE_RL_rl_io_write_req ;
  assign f_fabric_write_reqs$DEQ = CAN_FIRE_RL_rl_fabric_send_write_req ;
  assign f_fabric_write_reqs$CLR = 1'b0 ;

  // submodule f_pte_writebacks
  assign f_pte_writebacks$D_IN = { tlb$lookup[33:0], x1_avValue_pte__h5596 } ;
  assign f_pte_writebacks$ENQ = MUX_tlb$insert_1__SEL_1 ;
  assign f_pte_writebacks$DEQ = WILL_FIRE_RL_rl_writeback_updated_PTE ;
  assign f_pte_writebacks$CLR = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign f_reset_reqs$ENQ =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign f_reset_reqs$DEQ =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = f_reset_reqs$D_OUT ;
  assign f_reset_rsps$ENQ =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ;
  assign f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule master_xactor_f_rd_addr
  always@(MUX_master_xactor_f_rd_addr$enq_1__SEL_1 or
	  MUX_master_xactor_f_rd_addr$enq_1__VAL_1 or
	  MUX_master_xactor_f_rd_addr$enq_1__SEL_2 or
	  MUX_master_xactor_f_rd_addr$enq_1__VAL_2 or
	  WILL_FIRE_RL_rl_start_tlb_refill or
	  MUX_master_xactor_f_rd_addr$enq_1__VAL_3 or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_master_xactor_f_rd_addr$enq_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_master_xactor_f_rd_addr$enq_1__SEL_1:
	  master_xactor_f_rd_addr$D_IN =
	      MUX_master_xactor_f_rd_addr$enq_1__VAL_1;
      MUX_master_xactor_f_rd_addr$enq_1__SEL_2:
	  master_xactor_f_rd_addr$D_IN =
	      MUX_master_xactor_f_rd_addr$enq_1__VAL_2;
      WILL_FIRE_RL_rl_start_tlb_refill:
	  master_xactor_f_rd_addr$D_IN =
	      MUX_master_xactor_f_rd_addr$enq_1__VAL_3;
      WILL_FIRE_RL_rl_start_cache_refill:
	  master_xactor_f_rd_addr$D_IN =
	      MUX_master_xactor_f_rd_addr$enq_1__VAL_4;
      default: master_xactor_f_rd_addr$D_IN =
		   97'h0AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign master_xactor_f_rd_addr$ENQ =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     _theResult____h21598[0] &&
	     !_theResult____h21598[2] &&
	     !_theResult____h21598[3] &&
	     !_theResult____h21598[1] ||
	     WILL_FIRE_RL_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_start_tlb_refill ||
	     WILL_FIRE_RL_rl_start_cache_refill ;
  assign master_xactor_f_rd_addr$DEQ =
	     master_xactor_f_rd_addr$EMPTY_N && mem_master_arready ;
  assign master_xactor_f_rd_addr$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule master_xactor_f_rd_data
  assign master_xactor_f_rd_data$D_IN =
	     { mem_master_rid,
	       mem_master_rdata,
	       mem_master_rresp,
	       mem_master_rlast } ;
  assign master_xactor_f_rd_data$ENQ =
	     mem_master_rvalid && master_xactor_f_rd_data$FULL_N ;
  assign master_xactor_f_rd_data$DEQ =
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop ||
	     WILL_FIRE_RL_rl_ptw_level_0 ||
	     WILL_FIRE_RL_rl_ptw_level_1 ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp ;
  assign master_xactor_f_rd_data$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule master_xactor_f_wr_addr
  assign master_xactor_f_wr_addr$D_IN =
	     { 4'd0,
	       mem_req_wr_addr_awaddr__h2791,
	       8'd0,
	       x__h2838,
	       18'd65536 } ;
  assign master_xactor_f_wr_addr$ENQ = CAN_FIRE_RL_rl_fabric_send_write_req ;
  assign master_xactor_f_wr_addr$DEQ =
	     master_xactor_f_wr_addr$EMPTY_N && mem_master_awready ;
  assign master_xactor_f_wr_addr$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule master_xactor_f_wr_data
  assign master_xactor_f_wr_data$D_IN =
	     { mem_req_wr_data_wdata__h3017,
	       mem_req_wr_data_wstrb__h3018,
	       1'd1 } ;
  assign master_xactor_f_wr_data$ENQ = CAN_FIRE_RL_rl_fabric_send_write_req ;
  assign master_xactor_f_wr_data$DEQ =
	     master_xactor_f_wr_data$EMPTY_N && mem_master_wready ;
  assign master_xactor_f_wr_data$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule master_xactor_f_wr_resp
  assign master_xactor_f_wr_resp$D_IN = { mem_master_bid, mem_master_bresp } ;
  assign master_xactor_f_wr_resp$ENQ =
	     mem_master_bvalid && master_xactor_f_wr_resp$FULL_N ;
  assign master_xactor_f_wr_resp$DEQ = CAN_FIRE_RL_rl_discard_write_rsp ;
  assign master_xactor_f_wr_resp$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule ram_state_and_ctag_cset
  assign ram_state_and_ctag_cset$ADDRA =
	     WILL_FIRE_RL_rl_start_cache_refill ?
	       rg_addr[11:5] :
	       rg_cset_in_cache ;
  assign ram_state_and_ctag_cset$ADDRB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[11:5] :
	       rg_addr[11:5] ;
  assign ram_state_and_ctag_cset$DIA =
	     WILL_FIRE_RL_rl_start_cache_refill ?
	       MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       23'd2796202 ;
  assign ram_state_and_ctag_cset$DIB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       23'b01010101010101010101010 /* unspecified value */  :
	       23'b01010101010101010101010 /* unspecified value */  ;
  assign ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_rl_start_cache_refill || WILL_FIRE_RL_rl_reset ;
  assign ram_state_and_ctag_cset$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_286_EQ_0b0_287_OR_req_f3_BI_ETC___d1316 ||
	     WILL_FIRE_RL_rl_rereq ;

  // submodule ram_word64_set
  assign ram_word64_set$ADDRA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       rg_word64_set_in_cache :
	       rg_addr[11:3] ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  MUX_ram_word64_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_rl_rereq or
	  rg_addr or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_ram_word64_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$ADDRB = req_addr[11:3];
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_2;
      WILL_FIRE_RL_rl_rereq: ram_word64_set$ADDRB = rg_addr[11:3];
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_4;
      default: ram_word64_set$ADDRB = 9'b010101010 /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$DIA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       master_xactor_f_rd_data$D_OUT[66:3] :
	       MUX_ram_word64_set$a_put_3__VAL_2 ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_rl_rereq or WILL_FIRE_RL_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_rereq:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: ram_word64_set$DIB =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$WEA = 1'd1 ;
  assign ram_word64_set$WEB = 1'd0 ;
  assign ram_word64_set$ENA =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d643 ;
  assign ram_word64_set$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_286_EQ_0b0_287_OR_req_f3_BI_ETC___d1316 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = { 30'd0, x1_avValue_pa__h5593 } ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // submodule tlb
  assign tlb$insert_asid = rg_satp[30:22] ;
  always@(MUX_tlb$insert_1__SEL_1 or
	  tlb$lookup or MUX_tlb$insert_1__SEL_2 or MUX_tlb$insert_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_tlb$insert_1__SEL_1: tlb$insert_level = tlb$lookup[35:34];
      MUX_tlb$insert_1__SEL_2: tlb$insert_level = 2'd1;
      MUX_tlb$insert_1__SEL_3: tlb$insert_level = 2'd0;
      default: tlb$insert_level = 2'b10 /* unspecified value */ ;
    endcase
  end
  always@(MUX_tlb$insert_1__SEL_1 or
	  x1_avValue_pte__h5596 or
	  MUX_tlb$insert_1__SEL_2 or
	  _theResult____h21598 or MUX_tlb$insert_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_tlb$insert_1__SEL_1: tlb$insert_pte = x1_avValue_pte__h5596;
      MUX_tlb$insert_1__SEL_2: tlb$insert_pte = _theResult____h21598;
      MUX_tlb$insert_1__SEL_3: tlb$insert_pte = _theResult____h21598;
      default: tlb$insert_pte = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign tlb$insert_pte_pa =
	     MUX_tlb$insert_1__SEL_1 ? tlb$lookup[33:0] : rg_pte_pa ;
  assign tlb$insert_vpn = rg_addr[31:12] ;
  assign tlb$lookup_asid = rg_satp[30:22] ;
  assign tlb$lookup_vpn = rg_addr[31:12] ;
  assign tlb$EN_flush = WILL_FIRE_RL_rl_start_reset || EN_tlb_flush ;
  assign tlb$EN_insert =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d380 ||
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d916 ||
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     _theResult____h21598[0] &&
	     (_theResult____h21598[1] || !_theResult____h21598[2]) &&
	     (_theResult____h21598[3] || _theResult____h21598[1]) ;

  // remaining internal signals
  assign IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d304 =
	     (x1_avValue_pa__h5593[2:0] == 3'h0) ?
	       CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_03_ETC__q29 :
	       NOT_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_3_ETC___d303 ;
  assign IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_1_E_ETC___d580 =
	     (rg_addr[2:0] == 3'h0) ? 64'd1 : 64'd0 ;
  assign IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_IF__ETC___d1200 =
	     (rg_addr[2:0] == 3'h0) ? ld_val__h26475 : 64'd0 ;
  assign IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_NOT_ETC___d239 =
	     (rg_addr[2:0] == 3'h0) ?
	       NOT_ram_state_and_ctag_cset_b_read__93_BIT_22__ETC___d221 :
	       rg_addr[2:0] != 3'h4 ||
	       NOT_ram_state_and_ctag_cset_b_read__93_BIT_22__ETC___d221 ;
  assign IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_ram_ETC___d565 =
	     (rg_addr[2:0] == 3'h0) ? word64__h6843 : 64'd0 ;
  assign IF_rg_f3_03_EQ_0b0_04_THEN_IF_rg_addr_6_BITS_2_ETC__q31 =
	     IF_rg_f3_03_EQ_0b0_04_THEN_IF_rg_addr_6_BITS_2_ETC___d572[31:0] ;
  assign IF_rg_f3_03_EQ_0b10_34_THEN_SEXT_rg_st_amo_val_ETC___d698 =
	     (rg_f3 == 3'b010) ?
	       { {32{rg_st_amo_val_BITS_31_TO_0__q32[31]}},
		 rg_st_amo_val_BITS_31_TO_0__q32 } :
	       rg_st_amo_val ;
  assign IF_rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_ETC___d314 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       NOT_ram_state_and_ctag_cset_b_read__93_BIT_22__ETC___d249 :
	       IF_rg_op_12_EQ_1_50_OR_rg_op_12_EQ_2_15_AND_rg_ETC___d313 ;
  assign IF_rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_ETC___d401 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       4'd8 :
	       IF_rg_op_12_EQ_1_50_OR_rg_op_12_EQ_2_15_AND_rg_ETC___d400 ;
  assign IF_rg_op_12_EQ_1_50_OR_rg_op_12_EQ_2_15_AND_rg_ETC___d313 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	       lrsc_result__h14697 ||
	       f_fabric_write_reqs$FULL_N :
	       !ram_state_and_ctag_cset$DOB[22] ||
	       !ram_state_and_ctag_cset_b_read__93_BITS_21_TO__ETC___d198 ||
	       f_fabric_write_reqs$FULL_N &&
	       IF_rg_f3_03_EQ_0b0_04_THEN_IF_IF_rg_priv_6_ULE_ETC___d308 &&
	       IF_rg_f3_03_EQ_0b0_04_OR_rg_f3_03_EQ_0b100_05__ETC___d247 ;
  assign IF_rg_op_12_EQ_1_50_OR_rg_op_12_EQ_2_15_AND_rg_ETC___d400 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       4'd11 :
	       ((!ram_state_and_ctag_cset$DOB[22] ||
		 !ram_state_and_ctag_cset_b_read__93_BITS_21_TO__ETC___d198) ?
		  4'd8 :
		  4'd11) ;
  assign IF_rg_op_12_EQ_1_50_OR_rg_op_12_EQ_2_15_AND_rg_ETC___d767 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       rg_st_amo_val :
	       new_st_val__h18128 ;
  assign IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0__ETC___d403 =
	     rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d152 ?
	       4'd4 :
	       ((dmem_not_imem && !soc_map$m_is_mem_addr) ?
		  4'd12 :
		  IF_rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_ETC___d401) ;
  assign IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0__ETC___d437 =
	     x1_avValue_pa__h5593 == rg_lrsc_pa ;
  assign NOT_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_3_ETC___d295 =
	     x1_avValue_pa__h5593[2:0] != 3'h7 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_03_ETC__q29 ;
  assign NOT_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_3_ETC___d300 =
	     x1_avValue_pa__h5593[2:0] != 3'h6 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_03_ETC__q29 ;
  assign NOT_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_3_ETC___d303 =
	     x1_avValue_pa__h5593[2:0] != 3'h4 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_03_ETC__q29 ;
  assign NOT_IF_rg_pte_pa_56_BIT_2_57_THEN_master_xacto_ETC___d884 =
	     !_theResult____h21598[0] ||
	     !_theResult____h21598[1] && _theResult____h21598[2] ||
	     (_theResult____h21598[3] || _theResult____h21598[1]) &&
	     _theResult____h21598[19:10] != 10'd0 ||
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ;
  assign NOT_cfg_verbosity_read__0_ULE_2_72___d973 = cfg_verbosity > 4'd2 ;
  assign NOT_cfg_verbosity_read__0_ULT_2_07___d408 = cfg_verbosity >= 4'd2 ;
  assign NOT_dmem_not_imem_27_AND_rg_op_12_EQ_0_13_OR_r_ETC___d343 =
	     !dmem_not_imem &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     tlb$lookup[39] ;
  assign NOT_dmem_not_imem_27_OR_NOT_rg_op_12_EQ_0_13_1_ETC___d134 =
	     !dmem_not_imem ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ||
	     !tlb_lookup_rg_satp_9_BITS_30_TO_22_5_rg_addr_6_ETC___d132 ;
  assign NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d628 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	      rg_op != 2'd1 && ram_state_and_ctag_cset$DOB[22] &&
	      ram_state_and_ctag_cset_b_read__93_BITS_21_TO__ETC___d198) ;
  assign NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d641 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_12_EQ_1_50_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d639 ;
  assign NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d770 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op == 2'd1 &&
	     IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0__ETC___d437 &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d788 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d819 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_12_EQ_1_50_45_AND_NOT_rg_op_12_EQ_2__ETC___d817 ;
  assign NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d824 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_12_EQ_1_50_45_AND_NOT_rg_op_12_EQ_2__ETC___d822 ;
  assign NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d830 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_12_EQ_1_50_45_AND_NOT_rg_op_12_EQ_2__ETC___d828 ;
  assign NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d834 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_12_EQ_1_50_45_AND_NOT_rg_op_12_EQ_2__ETC___d638 ;
  assign NOT_master_xactor_f_rd_data_first__52_BITS_2_T_ETC___d877 =
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     !_theResult____h21598[0] ||
	     !_theResult____h21598[1] && _theResult____h21598[2] ||
	     ((!_theResult____h21598[3] && !_theResult____h21598[1]) ?
		master_xactor_f_rd_addr$FULL_N :
		_theResult____h21598[19:10] != 10'd0 || tlb$RDY_insert) ;
  assign NOT_ram_state_and_ctag_cset_b_read__93_BIT_22__ETC___d221 =
	     !ram_state_and_ctag_cset$DOB[22] || !rg_priv_6_ULE_0b1___d87 ||
	     !rg_satp[31] ||
	     tlb$RDY_lookup ;
  assign NOT_ram_state_and_ctag_cset_b_read__93_BIT_22__ETC___d249 =
	     !ram_state_and_ctag_cset$DOB[22] ||
	     !ram_state_and_ctag_cset_b_read__93_BITS_21_TO__ETC___d198 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	     IF_rg_f3_03_EQ_0b0_04_OR_rg_f3_03_EQ_0b100_05__ETC___d247 ;
  assign NOT_ram_state_and_ctag_cset_b_read__93_BIT_22__ETC___d439 =
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__93_BITS_21_TO__ETC___d198) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0__ETC___d437 ;
  assign NOT_req_f3_BITS_1_TO_0_286_EQ_0b0_287_288_AND__ETC___d1307 =
	     req_f3[1:0] != 2'b0 && (req_f3[1:0] != 2'b01 || req_addr[0]) &&
	     (req_f3[1:0] != 2'b10 || req_addr[1:0] != 2'b0) &&
	     (req_f3[1:0] != 2'b11 || req_addr[2:0] != 3'b0) ;
  assign NOT_rg_f3_03_EQ_0b11_40_41_OR_rg_amo_funct7_17_ETC___d305 =
	     rg_f3 != 3'b011 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_03_ETC__q29 ;
  assign NOT_rg_op_12_EQ_0_13_14_AND_NOT_rg_op_12_EQ_2__ETC___d394 =
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_54_EQ_IF_rg_priv_6_ULE_0b1_7_AND_rg_ETC___d255) ;
  assign NOT_rg_op_12_EQ_1_50_45_AND_NOT_rg_op_12_EQ_2__ETC___d448 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__93_BITS_21_TO__ETC___d198 &&
	     IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0__ETC___d437 ;
  assign NOT_rg_op_12_EQ_1_50_45_AND_NOT_rg_op_12_EQ_2__ETC___d638 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__93_BITS_21_TO__ETC___d198 ;
  assign NOT_rg_op_12_EQ_1_50_45_AND_NOT_rg_op_12_EQ_2__ETC___d817 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__93_BITS_21_TO__ETC___d198) &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign NOT_rg_op_12_EQ_1_50_45_AND_NOT_rg_op_12_EQ_2__ETC___d822 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__93_BITS_21_TO__ETC___d198 &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign NOT_rg_op_12_EQ_1_50_45_AND_NOT_rg_op_12_EQ_2__ETC___d828 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__93_BITS_21_TO__ETC___d198 &&
	     IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0__ETC___d437 &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign NOT_rg_op_12_EQ_2_15_16_OR_NOT_rg_amo_funct7_1_ETC___d636 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_54_EQ_IF_rg_priv_6_ULE_0b1_7_AND_rg_ETC___d255) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__93_BITS_21_TO__ETC___d198 ;
  assign NOT_rg_op_12_EQ_2_15_16_OR_NOT_rg_amo_funct7_1_ETC___d791 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_54_EQ_IF_rg_priv_6_ULE_0b1_7_AND_rg_ETC___d255) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__93_BITS_21_TO__ETC___d198 &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign NOT_rg_op_12_EQ_2_15_16_OR_NOT_rg_amo_funct7_1_ETC___d797 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_54_EQ_IF_rg_priv_6_ULE_0b1_7_AND_rg_ETC___d255) &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__93_BITS_21_TO__ETC___d198) &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign NOT_rg_op_12_EQ_2_15_16_OR_NOT_rg_amo_funct7_1_ETC___d803 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_54_EQ_IF_rg_priv_6_ULE_0b1_7_AND_rg_ETC___d255) &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign NOT_rg_priv_6_EQ_0b0_02_36_OR_tlb_lookup_rg_sa_ETC___d350 =
	     (rg_priv != 2'b0 || tlb$lookup[40]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[40] || rg_sstatus_SUM) &&
	     (NOT_dmem_not_imem_27_AND_rg_op_12_EQ_0_13_OR_r_ETC___d343 ||
	      dmem_not_imem_AND_rg_op_12_EQ_0_13_OR_rg_op_12_ETC___d345 ||
	      dmem_not_imem && rg_op != 2'd0 &&
	      (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	      tlb$lookup[38]) ;
  assign NOT_rg_priv_6_EQ_0b0_02_36_OR_tlb_lookup_rg_sa_ETC___d373 =
	     (rg_priv != 2'b0 || tlb$lookup[40]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[40] || rg_sstatus_SUM) &&
	     dmem_not_imem &&
	     tlb$lookup[38] ;
  assign NOT_rg_priv_6_EQ_0b0_02_36_OR_tlb_lookup_rg_sa_ETC___d411 =
	     (rg_priv != 2'b0 || tlb$lookup[40]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[40] || rg_sstatus_SUM) &&
	     tlb$lookup[42] &&
	     !pte___2__h6090[7] &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ;
  assign NOT_rg_priv_6_EQ_0b0_02_36_OR_tlb_lookup_rg_sa_ETC___d587 =
	     (rg_priv != 2'b0 || tlb$lookup[40]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[40] || rg_sstatus_SUM) &&
	     (!dmem_not_imem && tlb$lookup[39] ||
	      dmem_not_imem &&
	      tlb_lookup_rg_satp_9_BITS_30_TO_22_5_rg_addr_6_ETC___d132) ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d168 =
	     !rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || !tlb$lookup[68] ||
	     rg_priv_6_EQ_0b0_02_AND_NOT_tlb_lookup_rg_satp_ETC___d156 ||
	     NOT_tlb_lookup_rg_satp_9_BITS_30_TO_22_5_rg_ad_ETC___d165 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d316 =
	     (NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d168 ||
	      tlb$RDY_insert && tlb$RDY_lookup && f_pte_writebacks$FULL_N) &&
	     (dmem_not_imem && !soc_map$m_is_mem_addr ||
	      IF_rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_ETC___d314) ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d355 =
	     !rg_priv_6_ULE_0b1___d87 || !rg_satp[31] ||
	     tlb$lookup[68] &&
	     NOT_rg_priv_6_EQ_0b0_02_36_OR_tlb_lookup_rg_sa_ETC___d350 &&
	     tlb_lookup_rg_satp_9_BITS_30_TO_22_5_rg_addr_6_ETC___d352 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d370 =
	     !rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || !tlb$lookup[68] ||
	     rg_priv_6_EQ_0b0_02_AND_NOT_tlb_lookup_rg_satp_ETC___d156 ||
	     NOT_tlb_lookup_rg_satp_9_BITS_30_TO_22_5_rg_ad_ETC___d165 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d422 =
	     !rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || !tlb$lookup[68] ||
	     NOT_rg_priv_6_EQ_0b0_02_36_OR_tlb_lookup_rg_sa_ETC___d350 &&
	     tlb_lookup_rg_satp_9_BITS_30_TO_22_5_rg_addr_6_ETC___d352 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d423 =
	     (!rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d422 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d430 =
	     !rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || !tlb$lookup[68] ||
	     (rg_priv != 2'b0 || tlb$lookup[40]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[40] || rg_sstatus_SUM) &&
	     rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d426 &&
	     tlb_lookup_rg_satp_9_BITS_30_TO_22_5_rg_addr_6_ETC___d352 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d433 =
	     (!rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d430 &&
	     dmem_not_imem &&
	     !soc_map$m_is_mem_addr &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d454 =
	     (!rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d422 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d451 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d460 =
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d422 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     (rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d455 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	      lrsc_result__h14697) ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d461 =
	     (!rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d460 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d590 =
	     !rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || !tlb$lookup[68] ||
	     NOT_rg_priv_6_EQ_0b0_02_36_OR_tlb_lookup_rg_sa_ETC___d587 &&
	     tlb$lookup[42] ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d595 =
	     (!rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d590 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d592 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d601 =
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d590 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__93_BITS_21_TO__ETC___d198 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d608 =
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d590 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__93_BITS_21_TO__ETC___d198 &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d614 =
	     (!rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d590 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d611 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d620 =
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d590 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7_17_BITS_6_TO_2_18_EQ_0b10_19_AND_ETC___d617 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d624 =
	     !rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || !tlb$lookup[68] ||
	     NOT_rg_priv_6_EQ_0b0_02_36_OR_tlb_lookup_rg_sa_ETC___d373 &&
	     tlb$lookup[42] &&
	     tlb$lookup[43] ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d630 =
	     (!rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d624 &&
	     NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d628 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d643 =
	     (!rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d624 &&
	     NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d641 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d765 =
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d624 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op_12_EQ_1_50_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d761 ||
	      NOT_rg_op_12_EQ_1_50_45_AND_NOT_rg_op_12_EQ_2__ETC___d638) ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d766 =
	     (!rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d765 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d772 =
	     (!rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d624 &&
	     NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d770 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d778 =
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d624 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     rg_lrsc_valid &&
	     !rg_lrsc_pa_54_EQ_IF_rg_priv_6_ULE_0b1_7_AND_rg_ETC___d255 &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d784 =
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d624 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     !rg_lrsc_valid &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d790 =
	     (!rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d624 &&
	     NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d788 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d795 =
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d624 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_12_EQ_2_15_16_OR_NOT_rg_amo_funct7_1_ETC___d791 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d796 =
	     (!rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d795 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d801 =
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d624 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_12_EQ_2_15_16_OR_NOT_rg_amo_funct7_1_ETC___d797 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d807 =
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d624 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_12_EQ_2_15_16_OR_NOT_rg_amo_funct7_1_ETC___d803 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d808 =
	     (!rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d807 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d813 =
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d624 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h14697 &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d814 =
	     (!rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d813 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d821 =
	     (!rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d624 &&
	     NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d819 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d826 =
	     (!rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d624 &&
	     NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d824 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d832 =
	     (!rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d624 &&
	     NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d830 ;
  assign NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d836 =
	     (!rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d624 &&
	     NOT_dmem_not_imem_27_OR_soc_map_m_is_mem_addr__ETC___d834 ;
  assign NOT_tlb_lookup_rg_satp_9_BITS_30_TO_22_5_rg_ad_ETC___d149 =
	     !tlb$lookup[42] ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     !tlb$lookup[43] ;
  assign NOT_tlb_lookup_rg_satp_9_BITS_30_TO_22_5_rg_ad_ETC___d165 =
	     !tlb$lookup[42] || !tlb$lookup[43] || pte___2__h6090[7] ||
	     rg_op == 2'd0 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ;
  assign _theResult____h21598 =
	     rg_pte_pa[2] ?
	       master_xactor_f_rd_data$D_OUT[66:35] :
	       master_xactor_f_rd_data$D_OUT[34:3] ;
  assign _theResult___fst__h5681 =
	     tlb$lookup[68] ? _theResult___fst__h5753 : pa__h5581 ;
  assign _theResult___fst__h5753 =
	     (rg_priv_6_EQ_0b0_02_AND_NOT_tlb_lookup_rg_satp_ETC___d143 ||
	      NOT_tlb_lookup_rg_satp_9_BITS_30_TO_22_5_rg_ad_ETC___d149) ?
	       pa__h5581 :
	       _theResult___fst__h6092 ;
  assign _theResult___snd_fst__h3025 =
	     f_fabric_write_reqs$D_OUT[63:0] << shift_bits__h2805 ;
  assign _theResult___snd_fst__h5683 =
	     tlb$lookup[68] ?
	       _theResult___snd_fst__h5755 :
	       tlb$lookup[67:36] ;
  assign _theResult___snd_fst__h5755 =
	     (rg_priv_6_EQ_0b0_02_AND_NOT_tlb_lookup_rg_satp_ETC___d143 ||
	      NOT_tlb_lookup_rg_satp_9_BITS_30_TO_22_5_rg_ad_ETC___d149) ?
	       tlb$lookup[67:36] :
	       _theResult___snd_fst__h6230 ;
  assign _theResult___snd_fst__h6230 =
	     (!pte___2__h6090[7] && rg_op != 2'd0 &&
	      (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010)) ?
	       pte___1__h6307 :
	       pte___2__h6090 ;
  assign access_exc_code__h2574 =
	     dmem_not_imem ?
	       ((rg_op == 2'd0 ||
		 rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
		  4'd5 :
		  4'd7) :
	       4'd1 ;
  assign b__h21233 =
	     CAN_FIRE_RL_rl_fabric_send_write_req ?
	       ctr_wr_rsps_pending_crg$port0__write_1 :
	       ctr_wr_rsps_pending_crg ;
  assign cfg_verbosity_read__0_ULE_1___d41 = cfg_verbosity <= 4'd1 ;
  assign cline_addr__h23479 = { rg_pa[33:5], 5'd0 } ;
  assign cline_fabric_addr__h23480 = { 30'd0, cline_addr__h23479 } ;
  assign dmem_not_imem_AND_rg_op_12_EQ_0_13_OR_rg_op_12_ETC___d345 =
	     dmem_not_imem &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     tlb_lookup_rg_satp_9_BITS_30_TO_22_5_rg_addr_6_ETC___d132 ;
  assign dmem_not_imem_OR_NOT_rg_op_12_EQ_0_13_14_AND_N_ETC___d126 =
	     dmem_not_imem ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ||
	     !tlb$lookup[39] ;
  assign exc_code___1__h5992 = x1_avValue_exc_code__h5594 ;
  assign fabric_addr__h28138 = { 30'd0, rg_pa } ;
  assign ld_val6475_BITS_15_TO_0__q37 = ld_val__h26475[15:0] ;
  assign ld_val6475_BITS_15_TO_8__q39 = ld_val__h26475[15:8] ;
  assign ld_val6475_BITS_23_TO_16__q40 = ld_val__h26475[23:16] ;
  assign ld_val6475_BITS_31_TO_0__q38 = ld_val__h26475[31:0] ;
  assign ld_val6475_BITS_31_TO_16__q41 = ld_val__h26475[31:16] ;
  assign ld_val6475_BITS_31_TO_24__q42 = ld_val__h26475[31:24] ;
  assign ld_val6475_BITS_39_TO_32__q43 = ld_val__h26475[39:32] ;
  assign ld_val6475_BITS_47_TO_32__q44 = ld_val__h26475[47:32] ;
  assign ld_val6475_BITS_47_TO_40__q46 = ld_val__h26475[47:40] ;
  assign ld_val6475_BITS_55_TO_48__q47 = ld_val__h26475[55:48] ;
  assign ld_val6475_BITS_63_TO_32__q45 = ld_val__h26475[63:32] ;
  assign ld_val6475_BITS_63_TO_48__q48 = ld_val__h26475[63:48] ;
  assign ld_val6475_BITS_63_TO_56__q49 = ld_val__h26475[63:56] ;
  assign ld_val6475_BITS_7_TO_0__q36 = ld_val__h26475[7:0] ;
  assign lev_0_PTN_pa__h22242 = { _theResult____h21598[31:10], 12'b0 } ;
  assign lev_0_pte_pa__h22244 = lev_0_PTN_pa__h22242 + vpn_0_pa__h22243 ;
  assign lev_0_pte_pa_w64__h22245 = { lev_0_pte_pa__h22244[33:3], 3'b0 } ;
  assign lev_0_pte_pa_w64_fa__h22246 = { 30'd0, lev_0_pte_pa_w64__h22245 } ;
  assign lev_1_pte_pa__h21332 = satp_pa__h1894 + vpn_1_pa__h21331 ;
  assign lev_1_pte_pa_w64__h21333 = { lev_1_pte_pa__h21332[33:3], 3'b0 } ;
  assign lev_1_pte_pa_w64_fa__h21334 = { 30'd0, lev_1_pte_pa_w64__h21333 } ;
  assign lrsc_result__h14697 =
	     !rg_lrsc_valid ||
	     !rg_lrsc_pa_54_EQ_IF_rg_priv_6_ULE_0b1_7_AND_rg_ETC___d255 ;
  assign master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q1 =
	     master_xactor_f_rd_data$D_OUT[10:3] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q4 =
	     master_xactor_f_rd_data$D_OUT[18:11] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q2 =
	     master_xactor_f_rd_data$D_OUT[18:3] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q5 =
	     master_xactor_f_rd_data$D_OUT[26:19] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6 =
	     master_xactor_f_rd_data$D_OUT[34:19] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7 =
	     master_xactor_f_rd_data$D_OUT[34:27] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q3 =
	     master_xactor_f_rd_data$D_OUT[34:3] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q8 =
	     master_xactor_f_rd_data$D_OUT[42:35] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q9 =
	     master_xactor_f_rd_data$D_OUT[50:35] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q11 =
	     master_xactor_f_rd_data$D_OUT[50:43] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q12 =
	     master_xactor_f_rd_data$D_OUT[58:51] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q10 =
	     master_xactor_f_rd_data$D_OUT[66:35] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q13 =
	     master_xactor_f_rd_data$D_OUT[66:51] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q14 =
	     master_xactor_f_rd_data$D_OUT[66:59] ;
  assign master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d893 =
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     (!_theResult____h21598[0] ||
	      !_theResult____h21598[1] && _theResult____h21598[2]) &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901 =
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     _theResult____h21598[0] &&
	     !_theResult____h21598[2] &&
	     !_theResult____h21598[3] &&
	     !_theResult____h21598[1] &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d916 =
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     _theResult____h21598[0] &&
	     (_theResult____h21598[1] || !_theResult____h21598[2]) &&
	     (_theResult____h21598[3] || _theResult____h21598[1]) &&
	     _theResult____h21598[19:10] == 10'd0 ;
  assign master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d920 =
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     _theResult____h21598[0] &&
	     (_theResult____h21598[1] || !_theResult____h21598[2]) &&
	     (_theResult____h21598[3] || _theResult____h21598[1]) &&
	     _theResult____h21598[19:10] == 10'd0 &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d926 =
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     _theResult____h21598[0] &&
	     (_theResult____h21598[1] || !_theResult____h21598[2]) &&
	     (_theResult____h21598[3] || _theResult____h21598[1]) &&
	     _theResult____h21598[19:10] != 10'd0 &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d952 =
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     _theResult____h21598[0] &&
	     (_theResult____h21598[1] || !_theResult____h21598[2]) &&
	     (_theResult____h21598[3] || _theResult____h21598[1]) &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign mem_req_wr_addr_awaddr__h2791 =
	     { 30'd0, f_fabric_write_reqs$D_OUT[97:64] } ;
  assign new_st_val__h18128 =
	     (rg_f3 == 3'b010) ?
	       new_st_val__h18410 :
	       _theResult_____2__h18406 ;
  assign new_st_val__h18410 = { 32'd0, _theResult_____2__h18406[31:0] } ;
  assign new_st_val__h18501 =
	     IF_rg_f3_03_EQ_0b10_34_THEN_SEXT_IF_rg_f3_03_E_ETC___d634 +
	     IF_rg_f3_03_EQ_0b10_34_THEN_SEXT_rg_st_amo_val_ETC___d698 ;
  assign new_st_val__h19481 = w1__h18398 ^ w2__h28721 ;
  assign new_st_val__h19485 = w1__h18398 & w2__h28721 ;
  assign new_st_val__h19489 = w1__h18398 | w2__h28721 ;
  assign new_st_val__h19493 =
	     (w1__h18398 < w2__h28721) ? w1__h18398 : w2__h28721 ;
  assign new_st_val__h19498 =
	     (w1__h18398 <= w2__h28721) ? w2__h28721 : w1__h18398 ;
  assign new_st_val__h19504 =
	     ((IF_rg_f3_03_EQ_0b10_34_THEN_SEXT_IF_rg_f3_03_E_ETC___d634 ^
	       64'h8000000000000000) <
	      (IF_rg_f3_03_EQ_0b10_34_THEN_SEXT_rg_st_amo_val_ETC___d698 ^
	       64'h8000000000000000)) ?
	       w1__h18398 :
	       w2__h28721 ;
  assign new_st_val__h19509 =
	     ((IF_rg_f3_03_EQ_0b10_34_THEN_SEXT_IF_rg_f3_03_E_ETC___d634 ^
	       64'h8000000000000000) <=
	      (IF_rg_f3_03_EQ_0b10_34_THEN_SEXT_rg_st_amo_val_ETC___d698 ^
	       64'h8000000000000000)) ?
	       w2__h28721 :
	       w1__h18398 ;
  assign new_st_val__h28731 = { 32'd0, _theResult_____2__h28727[31:0] } ;
  assign new_st_val__h28822 =
	     new_ld_val__h28681 +
	     IF_rg_f3_03_EQ_0b10_34_THEN_SEXT_rg_st_amo_val_ETC___d698 ;
  assign new_st_val__h30682 = w1__h28719 ^ w2__h28721 ;
  assign new_st_val__h30686 = w1__h28719 & w2__h28721 ;
  assign new_st_val__h30690 = w1__h28719 | w2__h28721 ;
  assign new_st_val__h30694 =
	     (w1__h28719 < w2__h28721) ? w1__h28719 : w2__h28721 ;
  assign new_st_val__h30699 =
	     (w1__h28719 <= w2__h28721) ? w2__h28721 : w1__h28719 ;
  assign new_st_val__h30705 =
	     ((new_ld_val__h28681 ^ 64'h8000000000000000) <
	      (IF_rg_f3_03_EQ_0b10_34_THEN_SEXT_rg_st_amo_val_ETC___d698 ^
	       64'h8000000000000000)) ?
	       w1__h28719 :
	       w2__h28721 ;
  assign new_st_val__h30710 =
	     ((new_ld_val__h28681 ^ 64'h8000000000000000) <=
	      (IF_rg_f3_03_EQ_0b10_34_THEN_SEXT_rg_st_amo_val_ETC___d698 ^
	       64'h8000000000000000)) ?
	       w2__h28721 :
	       w1__h28719 ;
  assign new_value__h16998 =
	     (rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       64'd1 :
	       CASE_rg_f3_0b0_IF_rg_addr_6_BITS_2_TO_0_07_EQ__ETC__q52 ;
  assign new_value__h7025 =
	     (rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       word64__h6843 :
	       IF_rg_f3_03_EQ_0b0_04_THEN_IF_rg_addr_6_BITS_2_ETC___d572 ;
  assign pa___1__h6098 = { tlb$lookup[67:46], rg_addr[11:0] } ;
  assign pa___1__h6147 = { tlb$lookup[67:56], rg_addr[21:0] } ;
  assign pa__h5581 = { 2'd0, rg_addr } ;
  assign pte___1__h6279 = { tlb$lookup[67:43], 1'd1, tlb$lookup[41:36] } ;
  assign pte___1__h6307 =
	     { pte___2__h6090[31:8], 1'd1, pte___2__h6090[6:0] } ;
  assign pte___2__h6090 =
	     tlb$lookup[42] ? tlb$lookup[67:36] : pte___1__h6279 ;
  assign ram_state_and_ctag_cset_b_read__93_BITS_21_TO__ETC___d198 =
	     ram_state_and_ctag_cset$DOB[21:0] ==
	     x1_avValue_pa__h5593[33:12] ;
  assign ram_state_and_ctag_cset_b_read__93_BIT_22_94_A_ETC___d440 =
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__93_BITS_21_TO__ETC___d198 &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 ||
	     NOT_ram_state_and_ctag_cset_b_read__93_BIT_22__ETC___d439 ;
  assign req_f3_BITS_1_TO_0_286_EQ_0b0_287_OR_req_f3_BI_ETC___d1316 =
	     req_f3[1:0] == 2'b0 || req_f3[1:0] == 2'b01 && !req_addr[0] ||
	     req_f3[1:0] == 2'b10 && req_addr[1:0] == 2'b0 ||
	     req_f3[1:0] == 2'b11 && req_addr[2:0] == 3'b0 ;
  assign result__h13408 =
	     { {56{word64843_BITS_7_TO_0__q15[7]}},
	       word64843_BITS_7_TO_0__q15 } ;
  assign result__h13436 =
	     { {56{word64843_BITS_15_TO_8__q18[7]}},
	       word64843_BITS_15_TO_8__q18 } ;
  assign result__h13464 =
	     { {56{word64843_BITS_23_TO_16__q19[7]}},
	       word64843_BITS_23_TO_16__q19 } ;
  assign result__h13492 =
	     { {56{word64843_BITS_31_TO_24__q21[7]}},
	       word64843_BITS_31_TO_24__q21 } ;
  assign result__h13520 =
	     { {56{word64843_BITS_39_TO_32__q22[7]}},
	       word64843_BITS_39_TO_32__q22 } ;
  assign result__h13548 =
	     { {56{word64843_BITS_47_TO_40__q25[7]}},
	       word64843_BITS_47_TO_40__q25 } ;
  assign result__h13576 =
	     { {56{word64843_BITS_55_TO_48__q26[7]}},
	       word64843_BITS_55_TO_48__q26 } ;
  assign result__h13604 =
	     { {56{word64843_BITS_63_TO_56__q28[7]}},
	       word64843_BITS_63_TO_56__q28 } ;
  assign result__h13649 = { 56'd0, word64__h6843[7:0] } ;
  assign result__h13677 = { 56'd0, word64__h6843[15:8] } ;
  assign result__h13705 = { 56'd0, word64__h6843[23:16] } ;
  assign result__h13733 = { 56'd0, word64__h6843[31:24] } ;
  assign result__h13761 = { 56'd0, word64__h6843[39:32] } ;
  assign result__h13789 = { 56'd0, word64__h6843[47:40] } ;
  assign result__h13817 = { 56'd0, word64__h6843[55:48] } ;
  assign result__h13845 = { 56'd0, word64__h6843[63:56] } ;
  assign result__h13890 =
	     { {48{word64843_BITS_15_TO_0__q16[15]}},
	       word64843_BITS_15_TO_0__q16 } ;
  assign result__h13918 =
	     { {48{word64843_BITS_31_TO_16__q20[15]}},
	       word64843_BITS_31_TO_16__q20 } ;
  assign result__h13946 =
	     { {48{word64843_BITS_47_TO_32__q23[15]}},
	       word64843_BITS_47_TO_32__q23 } ;
  assign result__h13974 =
	     { {48{word64843_BITS_63_TO_48__q27[15]}},
	       word64843_BITS_63_TO_48__q27 } ;
  assign result__h14015 = { 48'd0, word64__h6843[15:0] } ;
  assign result__h14043 = { 48'd0, word64__h6843[31:16] } ;
  assign result__h14071 = { 48'd0, word64__h6843[47:32] } ;
  assign result__h14099 = { 48'd0, word64__h6843[63:48] } ;
  assign result__h14140 =
	     { {32{word64843_BITS_31_TO_0__q17[31]}},
	       word64843_BITS_31_TO_0__q17 } ;
  assign result__h14168 =
	     { {32{word64843_BITS_63_TO_32__q24[31]}},
	       word64843_BITS_63_TO_32__q24 } ;
  assign result__h14207 = { 32'd0, word64__h6843[31:0] } ;
  assign result__h14235 = { 32'd0, word64__h6843[63:32] } ;
  assign result__h26535 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q1[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q1 } ;
  assign result__h26565 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q4[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q4 } ;
  assign result__h26592 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q5[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q5 } ;
  assign result__h26619 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7 } ;
  assign result__h26646 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q8[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q8 } ;
  assign result__h26673 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q11[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q11 } ;
  assign result__h26700 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q12[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q12 } ;
  assign result__h26727 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q14[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q14 } ;
  assign result__h26771 = { 56'd0, master_xactor_f_rd_data$D_OUT[10:3] } ;
  assign result__h26798 = { 56'd0, master_xactor_f_rd_data$D_OUT[18:11] } ;
  assign result__h26825 = { 56'd0, master_xactor_f_rd_data$D_OUT[26:19] } ;
  assign result__h26852 = { 56'd0, master_xactor_f_rd_data$D_OUT[34:27] } ;
  assign result__h26879 = { 56'd0, master_xactor_f_rd_data$D_OUT[42:35] } ;
  assign result__h26906 = { 56'd0, master_xactor_f_rd_data$D_OUT[50:43] } ;
  assign result__h26933 = { 56'd0, master_xactor_f_rd_data$D_OUT[58:51] } ;
  assign result__h26960 = { 56'd0, master_xactor_f_rd_data$D_OUT[66:59] } ;
  assign result__h27004 =
	     { {48{master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q2[15]}},
	       master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q2 } ;
  assign result__h27031 =
	     { {48{master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6[15]}},
	       master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6 } ;
  assign result__h27058 =
	     { {48{master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q9[15]}},
	       master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q9 } ;
  assign result__h27085 =
	     { {48{master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q13[15]}},
	       master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q13 } ;
  assign result__h27125 = { 48'd0, master_xactor_f_rd_data$D_OUT[18:3] } ;
  assign result__h27152 = { 48'd0, master_xactor_f_rd_data$D_OUT[34:19] } ;
  assign result__h27179 = { 48'd0, master_xactor_f_rd_data$D_OUT[50:35] } ;
  assign result__h27206 = { 48'd0, master_xactor_f_rd_data$D_OUT[66:51] } ;
  assign result__h27246 =
	     { {32{master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q3[31]}},
	       master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q3 } ;
  assign result__h27273 =
	     { {32{master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q10[31]}},
	       master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q10 } ;
  assign result__h27311 = { 32'd0, master_xactor_f_rd_data$D_OUT[34:3] } ;
  assign result__h27338 = { 32'd0, master_xactor_f_rd_data$D_OUT[66:35] } ;
  assign result__h28910 =
	     { {56{ld_val6475_BITS_7_TO_0__q36[7]}},
	       ld_val6475_BITS_7_TO_0__q36 } ;
  assign result__h29818 =
	     { {56{ld_val6475_BITS_15_TO_8__q39[7]}},
	       ld_val6475_BITS_15_TO_8__q39 } ;
  assign result__h29846 =
	     { {56{ld_val6475_BITS_23_TO_16__q40[7]}},
	       ld_val6475_BITS_23_TO_16__q40 } ;
  assign result__h29874 =
	     { {56{ld_val6475_BITS_31_TO_24__q42[7]}},
	       ld_val6475_BITS_31_TO_24__q42 } ;
  assign result__h29902 =
	     { {56{ld_val6475_BITS_39_TO_32__q43[7]}},
	       ld_val6475_BITS_39_TO_32__q43 } ;
  assign result__h29930 =
	     { {56{ld_val6475_BITS_47_TO_40__q46[7]}},
	       ld_val6475_BITS_47_TO_40__q46 } ;
  assign result__h29958 =
	     { {56{ld_val6475_BITS_55_TO_48__q47[7]}},
	       ld_val6475_BITS_55_TO_48__q47 } ;
  assign result__h29986 =
	     { {56{ld_val6475_BITS_63_TO_56__q49[7]}},
	       ld_val6475_BITS_63_TO_56__q49 } ;
  assign result__h30031 = { 56'd0, ld_val__h26475[7:0] } ;
  assign result__h30059 = { 56'd0, ld_val__h26475[15:8] } ;
  assign result__h30087 = { 56'd0, ld_val__h26475[23:16] } ;
  assign result__h30115 = { 56'd0, ld_val__h26475[31:24] } ;
  assign result__h30143 = { 56'd0, ld_val__h26475[39:32] } ;
  assign result__h30171 = { 56'd0, ld_val__h26475[47:40] } ;
  assign result__h30199 = { 56'd0, ld_val__h26475[55:48] } ;
  assign result__h30227 = { 56'd0, ld_val__h26475[63:56] } ;
  assign result__h30272 =
	     { {48{ld_val6475_BITS_15_TO_0__q37[15]}},
	       ld_val6475_BITS_15_TO_0__q37 } ;
  assign result__h30300 =
	     { {48{ld_val6475_BITS_31_TO_16__q41[15]}},
	       ld_val6475_BITS_31_TO_16__q41 } ;
  assign result__h30328 =
	     { {48{ld_val6475_BITS_47_TO_32__q44[15]}},
	       ld_val6475_BITS_47_TO_32__q44 } ;
  assign result__h30356 =
	     { {48{ld_val6475_BITS_63_TO_48__q48[15]}},
	       ld_val6475_BITS_63_TO_48__q48 } ;
  assign result__h30397 = { 48'd0, ld_val__h26475[15:0] } ;
  assign result__h30425 = { 48'd0, ld_val__h26475[31:16] } ;
  assign result__h30453 = { 48'd0, ld_val__h26475[47:32] } ;
  assign result__h30481 = { 48'd0, ld_val__h26475[63:48] } ;
  assign result__h30522 =
	     { {32{ld_val6475_BITS_31_TO_0__q38[31]}},
	       ld_val6475_BITS_31_TO_0__q38 } ;
  assign result__h30550 =
	     { {32{ld_val6475_BITS_63_TO_32__q45[31]}},
	       ld_val6475_BITS_63_TO_32__q45 } ;
  assign result__h30589 = { 32'd0, ld_val__h26475[31:0] } ;
  assign result__h30617 = { 32'd0, ld_val__h26475[63:32] } ;
  assign rg_amo_funct7_17_BITS_6_TO_2_18_EQ_0b10_19_AND_ETC___d617 =
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__93_BITS_21_TO__ETC___d198) &&
	     IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0__ETC___d437 &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign rg_lrsc_pa_54_EQ_IF_rg_priv_6_ULE_0b1_7_AND_rg_ETC___d255 =
	     rg_lrsc_pa == x1_avValue_pa__h5593 ;
  assign rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d389 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__93_BITS_21_TO__ETC___d198) ;
  assign rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d426 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     tlb_lookup_rg_satp_9_BITS_30_TO_22_5_rg_addr_6_ETC___d132 ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     tlb$lookup[38] ;
  assign rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d451 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset_b_read__93_BIT_22_94_A_ETC___d440 ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_12_EQ_1_50_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d449 ;
  assign rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d455 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__93_BITS_21_TO__ETC___d198 ;
  assign rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d592 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__93_BITS_21_TO__ETC___d198 &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d611 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__93_BITS_21_TO__ETC___d198) &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign rg_op_12_EQ_1_50_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d449 =
	     rg_op == 2'd1 &&
	     IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0__ETC___d437 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	     NOT_rg_op_12_EQ_1_50_45_AND_NOT_rg_op_12_EQ_2__ETC___d448 ;
  assign rg_op_12_EQ_1_50_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d639 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_12_EQ_2_15_16_OR_NOT_rg_amo_funct7_1_ETC___d636 ||
	     NOT_rg_op_12_EQ_1_50_45_AND_NOT_rg_op_12_EQ_2__ETC___d638 ;
  assign rg_op_12_EQ_1_50_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d761 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_54_EQ_IF_rg_priv_6_ULE_0b1_7_AND_rg_ETC___d255) ;
  assign rg_priv_6_EQ_0b0_02_AND_NOT_tlb_lookup_rg_satp_ETC___d143 =
	     rg_priv == 2'b0 && !tlb$lookup[40] ||
	     rg_priv == 2'b01 && tlb$lookup[40] && !rg_sstatus_SUM ||
	     dmem_not_imem_OR_NOT_rg_op_12_EQ_0_13_14_AND_N_ETC___d126 &&
	     NOT_dmem_not_imem_27_OR_NOT_rg_op_12_EQ_0_13_1_ETC___d134 &&
	     (!dmem_not_imem || rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ||
	      !tlb$lookup[38]) ;
  assign rg_priv_6_EQ_0b0_02_AND_NOT_tlb_lookup_rg_satp_ETC___d156 =
	     rg_priv == 2'b0 && !tlb$lookup[40] ||
	     rg_priv == 2'b01 && tlb$lookup[40] && !rg_sstatus_SUM ||
	     !dmem_not_imem ||
	     !tlb$lookup[38] ;
  assign rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d152 =
	     rg_priv_6_ULE_0b1___d87 && rg_satp[31] && tlb$lookup[68] &&
	     (rg_priv_6_EQ_0b0_02_AND_NOT_tlb_lookup_rg_satp_ETC___d143 ||
	      NOT_tlb_lookup_rg_satp_9_BITS_30_TO_22_5_rg_ad_ETC___d149) ;
  assign rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d318 =
	     rg_priv_6_ULE_0b1___d87 && rg_satp[31] && !tlb$lookup[68] ||
	     (rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d152 ?
		tlb$RDY_lookup :
		NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d316) ;
  assign rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d358 =
	     rg_priv_6_ULE_0b1___d87 && rg_satp[31] &&
	     (rg_priv_6_EQ_0b0_02_AND_NOT_tlb_lookup_rg_satp_ETC___d143 ||
	      NOT_tlb_lookup_rg_satp_9_BITS_30_TO_22_5_rg_ad_ETC___d149) &&
	     tlb$lookup[68] ;
  assign rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d380 =
	     rg_priv_6_ULE_0b1___d87 && rg_satp[31] && tlb$lookup[68] &&
	     NOT_rg_priv_6_EQ_0b0_02_36_OR_tlb_lookup_rg_sa_ETC___d373 &&
	     tlb$lookup[42] &&
	     tlb$lookup[43] &&
	     !pte___2__h6090[7] &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ;
  assign rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d397 =
	     rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d152 ||
	     dmem_not_imem && !soc_map$m_is_mem_addr ||
	     rg_op_12_EQ_0_13_OR_rg_op_12_EQ_2_15_AND_rg_am_ETC___d389 ||
	     NOT_rg_op_12_EQ_0_13_14_AND_NOT_rg_op_12_EQ_2__ETC___d394 ;
  assign rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d398 =
	     rg_priv_6_ULE_0b1___d87 && rg_satp[31] && !tlb$lookup[68] ||
	     rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d397 ;
  assign rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d416 =
	     rg_priv_6_ULE_0b1___d87 && rg_satp[31] && tlb$lookup[68] &&
	     NOT_rg_priv_6_EQ_0b0_02_36_OR_tlb_lookup_rg_sa_ETC___d411 &&
	     NOT_cfg_verbosity_read__0_ULT_2_07___d408 &&
	     dmem_not_imem &&
	     tlb$lookup[38] &&
	     tlb$lookup[43] ;
  assign rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d419 =
	     rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d380 &&
	     NOT_cfg_verbosity_read__0_ULT_2_07___d408 &&
	     (!dmem_not_imem || !tlb$lookup[38] || !tlb$lookup[43]) ;
  assign rg_priv_6_ULE_0b1___d87 = rg_priv <= 2'b01 ;
  assign rg_st_amo_val_BITS_31_TO_0__q32 = rg_st_amo_val[31:0] ;
  assign rg_state_3_EQ_12_001_AND_rg_op_12_EQ_0_13_OR_r_ETC___d1003 =
	     rg_state == 4'd12 &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     b__h21233 == 4'd0 ;
  assign satp_pa__h1894 = { rg_satp[21:0], 12'b0 } ;
  assign shift_bits__h2805 = { f_fabric_write_reqs$D_OUT[66:64], 3'b0 } ;
  assign strobe64__h2955 = 8'b00000001 << f_fabric_write_reqs$D_OUT[66:64] ;
  assign strobe64__h2957 = 8'b00000011 << f_fabric_write_reqs$D_OUT[66:64] ;
  assign strobe64__h2959 = 8'b00001111 << f_fabric_write_reqs$D_OUT[66:64] ;
  assign tlb_lookup_rg_satp_9_BITS_30_TO_22_5_rg_addr_6_ETC___d132 =
	     tlb$lookup[37] | y__h5918 ;
  assign tlb_lookup_rg_satp_9_BITS_30_TO_22_5_rg_addr_6_ETC___d352 =
	     tlb$lookup[42] &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ||
	      tlb$lookup[43]) ;
  assign vpn_0_pa__h22243 = { 22'd0, rg_addr[21:12], 2'd0 } ;
  assign vpn_1_pa__h21331 = { 22'd0, rg_addr[31:22], 2'd0 } ;
  assign w18715_BITS_31_TO_0__q51 = w1__h28715[31:0] ;
  assign w1___1__h18469 =
	     { 32'd0,
	       IF_rg_f3_03_EQ_0b0_04_THEN_IF_rg_addr_6_BITS_2_ETC___d572[31:0] } ;
  assign w1___1__h28790 = { 32'd0, w1__h28715[31:0] } ;
  assign w2___1__h28791 = { 32'd0, rg_st_amo_val[31:0] } ;
  assign w2__h28721 = (rg_f3 == 3'b010) ? w2___1__h28791 : rg_st_amo_val ;
  assign word64843_BITS_15_TO_0__q16 = word64__h6843[15:0] ;
  assign word64843_BITS_15_TO_8__q18 = word64__h6843[15:8] ;
  assign word64843_BITS_23_TO_16__q19 = word64__h6843[23:16] ;
  assign word64843_BITS_31_TO_0__q17 = word64__h6843[31:0] ;
  assign word64843_BITS_31_TO_16__q20 = word64__h6843[31:16] ;
  assign word64843_BITS_31_TO_24__q21 = word64__h6843[31:24] ;
  assign word64843_BITS_39_TO_32__q22 = word64__h6843[39:32] ;
  assign word64843_BITS_47_TO_32__q23 = word64__h6843[47:32] ;
  assign word64843_BITS_47_TO_40__q25 = word64__h6843[47:40] ;
  assign word64843_BITS_55_TO_48__q26 = word64__h6843[55:48] ;
  assign word64843_BITS_63_TO_32__q24 = word64__h6843[63:32] ;
  assign word64843_BITS_63_TO_48__q27 = word64__h6843[63:48] ;
  assign word64843_BITS_63_TO_56__q28 = word64__h6843[63:56] ;
  assign word64843_BITS_7_TO_0__q15 = word64__h6843[7:0] ;
  assign word64__h6843 = ram_word64_set$DOB & y__h7052 ;
  assign x1_avValue_exc_code__h5594 =
	     dmem_not_imem ?
	       ((rg_op == 2'd0 ||
		 rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
		  4'd13 :
		  4'd15) :
	       4'd12 ;
  assign x1_avValue_pa__h5593 =
	     (rg_priv_6_ULE_0b1___d87 && rg_satp[31]) ?
	       _theResult___fst__h5681 :
	       pa__h5581 ;
  assign x1_avValue_pte__h5596 =
	     (rg_priv_6_ULE_0b1___d87 && rg_satp[31]) ?
	       _theResult___snd_fst__h5683 :
	       tlb$lookup[67:36] ;
  assign x__h14707 = { 63'd0, lrsc_result__h14697 } ;
  assign x__h28710 =
	     (rg_f3 == 3'b010) ?
	       new_st_val__h28731 :
	       _theResult_____2__h28727 ;
  assign x__h3652 = { 32'd0, f_pte_writebacks$D_OUT[31:0] } ;
  assign y__h5918 = rg_mstatus_MXR & tlb$lookup[39] ;
  assign y__h7052 =
	     {64{ram_state_and_ctag_cset$DOB[22] &&
		 ram_state_and_ctag_cset_b_read__93_BITS_21_TO__ETC___d198}} ;
  always@(f_fabric_write_reqs$D_OUT)
  begin
    case (f_fabric_write_reqs$D_OUT[99:98])
      2'b0: x__h2838 = 3'b0;
      2'b01: x__h2838 = 3'b001;
      2'b10: x__h2838 = 3'b010;
      2'b11: x__h2838 = 3'b011;
    endcase
  end
  always@(rg_f3)
  begin
    case (rg_f3[1:0])
      2'b0: value__h28267 = 3'b0;
      2'b01: value__h28267 = 3'b001;
      2'b10: value__h28267 = 3'b010;
      2'd3: value__h28267 = 3'b011;
    endcase
  end
  always@(tlb$lookup or pa__h5581 or pa___1__h6098 or pa___1__h6147)
  begin
    case (tlb$lookup[35:34])
      2'd0: _theResult___fst__h6092 = pa___1__h6098;
      2'd1: _theResult___fst__h6092 = pa___1__h6147;
      default: _theResult___fst__h6092 = pa__h5581;
    endcase
  end
  always@(f_fabric_write_reqs$D_OUT or
	  strobe64__h2955 or strobe64__h2957 or strobe64__h2959)
  begin
    case (f_fabric_write_reqs$D_OUT[99:98])
      2'b0: mem_req_wr_data_wstrb__h3018 = strobe64__h2955;
      2'b01: mem_req_wr_data_wstrb__h3018 = strobe64__h2957;
      2'b10: mem_req_wr_data_wstrb__h3018 = strobe64__h2959;
      2'b11: mem_req_wr_data_wstrb__h3018 = 8'b11111111;
    endcase
  end
  always@(f_fabric_write_reqs$D_OUT or _theResult___snd_fst__h3025)
  begin
    case (f_fabric_write_reqs$D_OUT[99:98])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h3017 = _theResult___snd_fst__h3025;
      2'd3: mem_req_wr_data_wdata__h3017 = f_fabric_write_reqs$D_OUT[63:0];
    endcase
  end
  always@(rg_addr or
	  NOT_ram_state_and_ctag_cset_b_read__93_BIT_22__ETC___d221)
  begin
    case (rg_addr[2:0])
      3'h0, 3'h1, 3'h2, 3'h3, 3'h4, 3'h5, 3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_OR_rg_ad_ETC___d225 =
	      NOT_ram_state_and_ctag_cset_b_read__93_BIT_22__ETC___d221;
      3'd7:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_OR_rg_ad_ETC___d225 =
	      rg_addr[2:0] != 3'h7 ||
	      NOT_ram_state_and_ctag_cset_b_read__93_BIT_22__ETC___d221;
    endcase
  end
  always@(rg_addr or
	  NOT_ram_state_and_ctag_cset_b_read__93_BIT_22__ETC___d221)
  begin
    case (rg_addr[2:0])
      3'h0, 3'h2, 3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_OR_rg_ad_ETC___d233 =
	      NOT_ram_state_and_ctag_cset_b_read__93_BIT_22__ETC___d221;
      default: IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_OR_rg_ad_ETC___d233 =
		   rg_addr[2:0] != 3'h6 ||
		   NOT_ram_state_and_ctag_cset_b_read__93_BIT_22__ETC___d221;
    endcase
  end
  always@(rg_f3 or
	  rg_addr or
	  NOT_ram_state_and_ctag_cset_b_read__93_BIT_22__ETC___d221 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_OR_rg_ad_ETC___d225 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_OR_rg_ad_ETC___d233 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_NOT_ETC___d239)
  begin
    case (rg_f3)
      3'b0, 3'b100:
	  IF_rg_f3_03_EQ_0b0_04_OR_rg_f3_03_EQ_0b100_05__ETC___d247 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_OR_rg_ad_ETC___d225;
      3'b001, 3'b101:
	  IF_rg_f3_03_EQ_0b0_04_OR_rg_f3_03_EQ_0b100_05__ETC___d247 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_OR_rg_ad_ETC___d233;
      3'b010, 3'b110:
	  IF_rg_f3_03_EQ_0b0_04_OR_rg_f3_03_EQ_0b100_05__ETC___d247 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_NOT_ETC___d239;
      default: IF_rg_f3_03_EQ_0b0_04_OR_rg_f3_03_EQ_0b100_05__ETC___d247 =
		   rg_f3 != 3'b011 || rg_addr[2:0] != 3'h0 ||
		   NOT_ram_state_and_ctag_cset_b_read__93_BIT_22__ETC___d221;
    endcase
  end
  always@(rg_amo_funct7 or
	  IF_rg_f3_03_EQ_0b0_04_OR_rg_f3_03_EQ_0b100_05__ETC___d247)
  begin
    case (rg_amo_funct7[6:2])
      5'b0, 5'b00100, 5'b01000, 5'b01100, 5'b10000, 5'b11000, 5'b11100:
	  CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_03_ETC__q29 =
	      IF_rg_f3_03_EQ_0b0_04_OR_rg_f3_03_EQ_0b100_05__ETC___d247;
      default: CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_03_ETC__q29 =
		   rg_amo_funct7[6:2] != 5'b10100 ||
		   IF_rg_f3_03_EQ_0b0_04_OR_rg_f3_03_EQ_0b100_05__ETC___d247;
    endcase
  end
  always@(x1_avValue_pa__h5593 or
	  NOT_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_3_ETC___d295 or
	  CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_03_ETC__q29)
  begin
    case (x1_avValue_pa__h5593[2:0])
      3'h0, 3'h1, 3'h2, 3'h3, 3'h4, 3'h5, 3'h6:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d296 =
	      CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_03_ETC__q29;
      3'd7:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d296 =
	      NOT_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_3_ETC___d295;
    endcase
  end
  always@(x1_avValue_pa__h5593 or
	  NOT_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_3_ETC___d300 or
	  CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_03_ETC__q29)
  begin
    case (x1_avValue_pa__h5593[2:0])
      3'h0, 3'h2, 3'h4:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d301 =
	      CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_03_ETC__q29;
      default: IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d301 =
		   NOT_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_3_ETC___d300;
    endcase
  end
  always@(rg_f3 or
	  NOT_rg_f3_03_EQ_0b11_40_41_OR_rg_amo_funct7_17_ETC___d305 or
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d296 or
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d301 or
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d304)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_03_EQ_0b0_04_THEN_IF_IF_rg_priv_6_ULE_ETC___d308 =
	      IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d296;
      3'b001:
	  IF_rg_f3_03_EQ_0b0_04_THEN_IF_IF_rg_priv_6_ULE_ETC___d308 =
	      IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d301;
      3'b010:
	  IF_rg_f3_03_EQ_0b0_04_THEN_IF_IF_rg_priv_6_ULE_ETC___d308 =
	      IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d304;
      default: IF_rg_f3_03_EQ_0b0_04_THEN_IF_IF_rg_priv_6_ULE_ETC___d308 =
		   NOT_rg_f3_03_EQ_0b11_40_41_OR_rg_amo_funct7_17_ETC___d305;
    endcase
  end
  always@(rg_addr or
	  result__h13649 or
	  result__h13677 or
	  result__h13705 or
	  result__h13733 or
	  result__h13761 or
	  result__h13789 or result__h13817 or result__h13845)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d534 =
	      result__h13649;
      3'h1:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d534 =
	      result__h13677;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d534 =
	      result__h13705;
      3'h3:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d534 =
	      result__h13733;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d534 =
	      result__h13761;
      3'h5:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d534 =
	      result__h13789;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d534 =
	      result__h13817;
      3'h7:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d534 =
	      result__h13845;
    endcase
  end
  always@(rg_addr or
	  result__h13408 or
	  result__h13436 or
	  result__h13464 or
	  result__h13492 or
	  result__h13520 or
	  result__h13548 or result__h13576 or result__h13604)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d518 =
	      result__h13408;
      3'h1:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d518 =
	      result__h13436;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d518 =
	      result__h13464;
      3'h3:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d518 =
	      result__h13492;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d518 =
	      result__h13520;
      3'h5:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d518 =
	      result__h13548;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d518 =
	      result__h13576;
      3'h7:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d518 =
	      result__h13604;
    endcase
  end
  always@(rg_addr or
	  result__h13890 or
	  result__h13918 or result__h13946 or result__h13974)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d546 =
	      result__h13890;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d546 =
	      result__h13918;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d546 =
	      result__h13946;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d546 =
	      result__h13974;
      default: IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d546 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h14015 or
	  result__h14043 or result__h14071 or result__h14099)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d554 =
	      result__h14015;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d554 =
	      result__h14043;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d554 =
	      result__h14071;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d554 =
	      result__h14099;
      default: IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d554 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h14207 or result__h14235)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d564 =
	      result__h14207;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d564 =
	      result__h14235;
      default: IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d564 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h14140 or result__h14168)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result4140_0x4_re_ETC__q30 =
	      result__h14140;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result4140_0x4_re_ETC__q30 =
	      result__h14168;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result4140_0x4_re_ETC__q30 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d518 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d546 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result4140_0x4_re_ETC__q30 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_ram_ETC___d565 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d534 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d554 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d564)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_03_EQ_0b0_04_THEN_IF_rg_addr_6_BITS_2_ETC___d572 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d518;
      3'b001:
	  IF_rg_f3_03_EQ_0b0_04_THEN_IF_rg_addr_6_BITS_2_ETC___d572 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d546;
      3'b010:
	  IF_rg_f3_03_EQ_0b0_04_THEN_IF_rg_addr_6_BITS_2_ETC___d572 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result4140_0x4_re_ETC__q30;
      3'b011:
	  IF_rg_f3_03_EQ_0b0_04_THEN_IF_rg_addr_6_BITS_2_ETC___d572 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_ram_ETC___d565;
      3'b100:
	  IF_rg_f3_03_EQ_0b0_04_THEN_IF_rg_addr_6_BITS_2_ETC___d572 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d534;
      3'b101:
	  IF_rg_f3_03_EQ_0b0_04_THEN_IF_rg_addr_6_BITS_2_ETC___d572 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d554;
      3'b110:
	  IF_rg_f3_03_EQ_0b0_04_THEN_IF_rg_addr_6_BITS_2_ETC___d572 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d564;
      3'd7: IF_rg_f3_03_EQ_0b0_04_THEN_IF_rg_addr_6_BITS_2_ETC___d572 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d518 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d546 or
	  w1___1__h18469 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_ram_ETC___d565 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d534 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d554 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d564)
  begin
    case (rg_f3)
      3'b0:
	  w1__h18398 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d518;
      3'b001:
	  w1__h18398 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d546;
      3'b010: w1__h18398 = w1___1__h18469;
      3'b011:
	  w1__h18398 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_ram_ETC___d565;
      3'b100:
	  w1__h18398 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d534;
      3'b101:
	  w1__h18398 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d554;
      3'b110:
	  w1__h18398 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d564;
      3'd7: w1__h18398 = 64'd0;
    endcase
  end
  always@(x1_avValue_pa__h5593 or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (x1_avValue_pa__h5593[2:0])
      3'h0:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d685 =
	      { ram_word64_set$DOB[63:16], rg_st_amo_val[15:0] };
      3'h2:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d685 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d685 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d685 =
	      { rg_st_amo_val[15:0], ram_word64_set$DOB[47:0] };
      default: IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d685 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(x1_avValue_pa__h5593 or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (x1_avValue_pa__h5593[2:0])
      3'h0:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d676 =
	      { ram_word64_set$DOB[63:8], rg_st_amo_val[7:0] };
      3'h1:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d676 =
	      { ram_word64_set$DOB[63:16],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d676 =
	      { ram_word64_set$DOB[63:24],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d676 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d676 =
	      { ram_word64_set$DOB[63:40],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d676 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d676 =
	      { ram_word64_set$DOB[63:56],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d676 =
	      { rg_st_amo_val[7:0], ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d518 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d546 or
	  IF_rg_f3_03_EQ_0b0_04_THEN_IF_rg_addr_6_BITS_2_ETC__q31 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_ram_ETC___d565 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d534 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d554 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d564)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_03_EQ_0b10_34_THEN_SEXT_IF_rg_f3_03_E_ETC___d634 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d518;
      3'b001:
	  IF_rg_f3_03_EQ_0b10_34_THEN_SEXT_IF_rg_f3_03_E_ETC___d634 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d546;
      3'b010:
	  IF_rg_f3_03_EQ_0b10_34_THEN_SEXT_IF_rg_f3_03_E_ETC___d634 =
	      { {32{IF_rg_f3_03_EQ_0b0_04_THEN_IF_rg_addr_6_BITS_2_ETC__q31[31]}},
		IF_rg_f3_03_EQ_0b0_04_THEN_IF_rg_addr_6_BITS_2_ETC__q31 };
      3'b011:
	  IF_rg_f3_03_EQ_0b10_34_THEN_SEXT_IF_rg_f3_03_E_ETC___d634 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_ram_ETC___d565;
      3'b100:
	  IF_rg_f3_03_EQ_0b10_34_THEN_SEXT_IF_rg_f3_03_E_ETC___d634 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d534;
      3'b101:
	  IF_rg_f3_03_EQ_0b10_34_THEN_SEXT_IF_rg_f3_03_E_ETC___d634 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d554;
      3'b110:
	  IF_rg_f3_03_EQ_0b10_34_THEN_SEXT_IF_rg_f3_03_E_ETC___d634 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d564;
      3'd7: IF_rg_f3_03_EQ_0b10_34_THEN_SEXT_IF_rg_f3_03_E_ETC___d634 = 64'd0;
    endcase
  end
  always@(rg_amo_funct7 or
	  new_st_val__h19509 or
	  new_st_val__h18501 or
	  w2__h28721 or
	  new_st_val__h19481 or
	  new_st_val__h19489 or
	  new_st_val__h19485 or
	  new_st_val__h19504 or new_st_val__h19493 or new_st_val__h19498)
  begin
    case (rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h18406 = new_st_val__h18501;
      5'b00001: _theResult_____2__h18406 = w2__h28721;
      5'b00100: _theResult_____2__h18406 = new_st_val__h19481;
      5'b01000: _theResult_____2__h18406 = new_st_val__h19489;
      5'b01100: _theResult_____2__h18406 = new_st_val__h19485;
      5'b10000: _theResult_____2__h18406 = new_st_val__h19504;
      5'b11000: _theResult_____2__h18406 = new_st_val__h19493;
      5'b11100: _theResult_____2__h18406 = new_st_val__h19498;
      default: _theResult_____2__h18406 = new_st_val__h19509;
    endcase
  end
  always@(x1_avValue_pa__h5593 or ram_word64_set$DOB or new_st_val__h18128)
  begin
    case (x1_avValue_pa__h5593[2:0])
      3'h0:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d750 =
	      { ram_word64_set$DOB[63:16], new_st_val__h18128[15:0] };
      3'h2:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d750 =
	      { ram_word64_set$DOB[63:32],
		new_st_val__h18128[15:0],
		ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d750 =
	      { ram_word64_set$DOB[63:48],
		new_st_val__h18128[15:0],
		ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d750 =
	      { new_st_val__h18128[15:0], ram_word64_set$DOB[47:0] };
      default: IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d750 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(x1_avValue_pa__h5593 or ram_word64_set$DOB or new_st_val__h18128)
  begin
    case (x1_avValue_pa__h5593[2:0])
      3'h0:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d741 =
	      { ram_word64_set$DOB[63:8], new_st_val__h18128[7:0] };
      3'h1:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d741 =
	      { ram_word64_set$DOB[63:16],
		new_st_val__h18128[7:0],
		ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d741 =
	      { ram_word64_set$DOB[63:24],
		new_st_val__h18128[7:0],
		ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d741 =
	      { ram_word64_set$DOB[63:32],
		new_st_val__h18128[7:0],
		ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d741 =
	      { ram_word64_set$DOB[63:40],
		new_st_val__h18128[7:0],
		ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d741 =
	      { ram_word64_set$DOB[63:48],
		new_st_val__h18128[7:0],
		ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d741 =
	      { ram_word64_set$DOB[63:56],
		new_st_val__h18128[7:0],
		ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d741 =
	      { new_st_val__h18128[7:0], ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(x1_avValue_pa__h5593 or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (x1_avValue_pa__h5593[2:0])
      3'h0:
	  CASE_x1_avValue_pa593_BITS_2_TO_0_0x0_ram_word_ETC__q33 =
	      { ram_word64_set$DOB[63:32], rg_st_amo_val[31:0] };
      3'h4:
	  CASE_x1_avValue_pa593_BITS_2_TO_0_0x0_ram_word_ETC__q33 =
	      { rg_st_amo_val[31:0], ram_word64_set$DOB[31:0] };
      default: CASE_x1_avValue_pa593_BITS_2_TO_0_0x0_ram_word_ETC__q33 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  ram_word64_set$DOB or
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d676 or
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d685 or
	  CASE_x1_avValue_pa593_BITS_2_TO_0_0x0_ram_word_ETC__q33 or
	  rg_st_amo_val)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_03_EQ_0b0_04_THEN_IF_IF_rg_priv_6_ULE_ETC___d694 =
	      IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d676;
      3'b001:
	  IF_rg_f3_03_EQ_0b0_04_THEN_IF_IF_rg_priv_6_ULE_ETC___d694 =
	      IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d685;
      3'b010:
	  IF_rg_f3_03_EQ_0b0_04_THEN_IF_IF_rg_priv_6_ULE_ETC___d694 =
	      CASE_x1_avValue_pa593_BITS_2_TO_0_0x0_ram_word_ETC__q33;
      3'b011:
	  IF_rg_f3_03_EQ_0b0_04_THEN_IF_IF_rg_priv_6_ULE_ETC___d694 =
	      rg_st_amo_val;
      default: IF_rg_f3_03_EQ_0b0_04_THEN_IF_IF_rg_priv_6_ULE_ETC___d694 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_addr or
	  result__h27125 or
	  result__h27152 or result__h27179 or result__h27206)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1082 =
	      result__h27125;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1082 =
	      result__h27152;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1082 =
	      result__h27179;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1082 =
	      result__h27206;
      default: IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1082 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h27004 or
	  result__h27031 or result__h27058 or result__h27085)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1074 =
	      result__h27004;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1074 =
	      result__h27031;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1074 =
	      result__h27058;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1074 =
	      result__h27085;
      default: IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1074 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h26771 or
	  result__h26798 or
	  result__h26825 or
	  result__h26852 or
	  result__h26879 or
	  result__h26906 or result__h26933 or result__h26960)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1062 =
	      result__h26771;
      3'h1:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1062 =
	      result__h26798;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1062 =
	      result__h26825;
      3'h3:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1062 =
	      result__h26852;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1062 =
	      result__h26879;
      3'h5:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1062 =
	      result__h26906;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1062 =
	      result__h26933;
      3'h7:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1062 =
	      result__h26960;
    endcase
  end
  always@(rg_addr or
	  result__h26535 or
	  result__h26565 or
	  result__h26592 or
	  result__h26619 or
	  result__h26646 or
	  result__h26673 or result__h26700 or result__h26727)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1046 =
	      result__h26535;
      3'h1:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1046 =
	      result__h26565;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1046 =
	      result__h26592;
      3'h3:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1046 =
	      result__h26619;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1046 =
	      result__h26646;
      3'h5:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1046 =
	      result__h26673;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1046 =
	      result__h26700;
      3'h7:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1046 =
	      result__h26727;
    endcase
  end
  always@(rg_addr or result__h27246 or result__h27273)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result7246_0x4_re_ETC__q34 =
	      result__h27246;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result7246_0x4_re_ETC__q34 =
	      result__h27273;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result7246_0x4_re_ETC__q34 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h27311 or result__h27338)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result7311_0x4_re_ETC__q35 =
	      result__h27311;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result7311_0x4_re_ETC__q35 =
	      result__h27338;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result7311_0x4_re_ETC__q35 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1046 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1074 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result7246_0x4_re_ETC__q34 or
	  rg_addr or
	  master_xactor_f_rd_data$D_OUT or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1062 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1082 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result7311_0x4_re_ETC__q35)
  begin
    case (rg_f3)
      3'b0:
	  ld_val__h26475 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1046;
      3'b001:
	  ld_val__h26475 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1074;
      3'b010:
	  ld_val__h26475 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result7246_0x4_re_ETC__q34;
      3'b011:
	  ld_val__h26475 =
	      (rg_addr[2:0] == 3'h0) ?
		master_xactor_f_rd_data$D_OUT[66:3] :
		64'd0;
      3'b100:
	  ld_val__h26475 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1062;
      3'b101:
	  ld_val__h26475 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1082;
      3'b110:
	  ld_val__h26475 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result7311_0x4_re_ETC__q35;
      3'd7: ld_val__h26475 = 64'd0;
    endcase
  end
  always@(rg_addr or result__h30589 or result__h30617)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1199 =
	      result__h30589;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1199 =
	      result__h30617;
      default: IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1199 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h30397 or
	  result__h30425 or result__h30453 or result__h30481)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1189 =
	      result__h30397;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1189 =
	      result__h30425;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1189 =
	      result__h30453;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1189 =
	      result__h30481;
      default: IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1189 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h30272 or
	  result__h30300 or result__h30328 or result__h30356)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1181 =
	      result__h30272;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1181 =
	      result__h30300;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1181 =
	      result__h30328;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1181 =
	      result__h30356;
      default: IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1181 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h30031 or
	  result__h30059 or
	  result__h30087 or
	  result__h30115 or
	  result__h30143 or
	  result__h30171 or result__h30199 or result__h30227)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1169 =
	      result__h30031;
      3'h1:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1169 =
	      result__h30059;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1169 =
	      result__h30087;
      3'h3:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1169 =
	      result__h30115;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1169 =
	      result__h30143;
      3'h5:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1169 =
	      result__h30171;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1169 =
	      result__h30199;
      3'h7:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1169 =
	      result__h30227;
    endcase
  end
  always@(rg_addr or
	  result__h28910 or
	  result__h29818 or
	  result__h29846 or
	  result__h29874 or
	  result__h29902 or
	  result__h29930 or result__h29958 or result__h29986)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1153 =
	      result__h28910;
      3'h1:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1153 =
	      result__h29818;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1153 =
	      result__h29846;
      3'h3:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1153 =
	      result__h29874;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1153 =
	      result__h29902;
      3'h5:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1153 =
	      result__h29930;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1153 =
	      result__h29958;
      3'h7:
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1153 =
	      result__h29986;
    endcase
  end
  always@(rg_addr or result__h30522 or result__h30550)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result0522_0x4_re_ETC__q50 =
	      result__h30522;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result0522_0x4_re_ETC__q50 =
	      result__h30550;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result0522_0x4_re_ETC__q50 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1153 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1181 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result0522_0x4_re_ETC__q50 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_IF__ETC___d1200 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1169 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1189 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1199)
  begin
    case (rg_f3)
      3'b0:
	  w1__h28715 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1153;
      3'b001:
	  w1__h28715 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1181;
      3'b010:
	  w1__h28715 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result0522_0x4_re_ETC__q50;
      3'b011:
	  w1__h28715 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_IF__ETC___d1200;
      3'b100:
	  w1__h28715 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1169;
      3'b101:
	  w1__h28715 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1189;
      3'b110:
	  w1__h28715 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1199;
      3'd7: w1__h28715 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1153 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1181 or
	  w1___1__h28790 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_IF__ETC___d1200 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1169 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1189 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1199)
  begin
    case (rg_f3)
      3'b0:
	  w1__h28719 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1153;
      3'b001:
	  w1__h28719 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1181;
      3'b010: w1__h28719 = w1___1__h28790;
      3'b011:
	  w1__h28719 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_IF__ETC___d1200;
      3'b100:
	  w1__h28719 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1169;
      3'b101:
	  w1__h28719 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1189;
      3'b110:
	  w1__h28719 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1199;
      3'd7: w1__h28719 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1153 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1181 or
	  w18715_BITS_31_TO_0__q51 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_IF__ETC___d1200 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1169 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1189 or
	  IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1199)
  begin
    case (rg_f3)
      3'b0:
	  new_ld_val__h28681 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1153;
      3'b001:
	  new_ld_val__h28681 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_SEX_ETC___d1181;
      3'b010:
	  new_ld_val__h28681 =
	      { {32{w18715_BITS_31_TO_0__q51[31]}},
		w18715_BITS_31_TO_0__q51 };
      3'b011:
	  new_ld_val__h28681 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_IF__ETC___d1200;
      3'b100:
	  new_ld_val__h28681 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1169;
      3'b101:
	  new_ld_val__h28681 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1189;
      3'b110:
	  new_ld_val__h28681 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_0_C_ETC___d1199;
      3'd7: new_ld_val__h28681 = 64'd0;
    endcase
  end
  always@(rg_amo_funct7 or
	  new_st_val__h30710 or
	  new_st_val__h28822 or
	  w2__h28721 or
	  new_st_val__h30682 or
	  new_st_val__h30690 or
	  new_st_val__h30686 or
	  new_st_val__h30705 or new_st_val__h30694 or new_st_val__h30699)
  begin
    case (rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h28727 = new_st_val__h28822;
      5'b00001: _theResult_____2__h28727 = w2__h28721;
      5'b00100: _theResult_____2__h28727 = new_st_val__h30682;
      5'b01000: _theResult_____2__h28727 = new_st_val__h30690;
      5'b01100: _theResult_____2__h28727 = new_st_val__h30686;
      5'b10000: _theResult_____2__h28727 = new_st_val__h30705;
      5'b11000: _theResult_____2__h28727 = new_st_val__h30694;
      5'b11100: _theResult_____2__h28727 = new_st_val__h30699;
      default: _theResult_____2__h28727 = new_st_val__h30710;
    endcase
  end
  always@(rg_f3 or IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_1_E_ETC___d580)
  begin
    case (rg_f3)
      3'b0, 3'b001, 3'b010, 3'b011, 3'b100, 3'b101, 3'b110:
	  CASE_rg_f3_0b0_IF_rg_addr_6_BITS_2_TO_0_07_EQ__ETC__q52 =
	      IF_rg_addr_6_BITS_2_TO_0_07_EQ_0x0_08_THEN_1_E_ETC___d580;
      3'd7: CASE_rg_f3_0b0_IF_rg_addr_6_BITS_2_TO_0_07_EQ__ETC__q52 = 64'd0;
    endcase
  end
  always@(x1_avValue_pa__h5593 or ram_word64_set$DOB or new_st_val__h18128)
  begin
    case (x1_avValue_pa__h5593[2:0])
      3'h0:
	  CASE_x1_avValue_pa593_BITS_2_TO_0_0x0_ram_word_ETC__q53 =
	      { ram_word64_set$DOB[63:32], new_st_val__h18128[31:0] };
      3'h4:
	  CASE_x1_avValue_pa593_BITS_2_TO_0_0x0_ram_word_ETC__q53 =
	      { new_st_val__h18128[31:0], ram_word64_set$DOB[31:0] };
      default: CASE_x1_avValue_pa593_BITS_2_TO_0_0x0_ram_word_ETC__q53 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  ram_word64_set$DOB or
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d741 or
	  IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d750 or
	  CASE_x1_avValue_pa593_BITS_2_TO_0_0x0_ram_word_ETC__q53 or
	  new_st_val__h18128)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_03_EQ_0b0_04_THEN_IF_IF_rg_priv_6_ULE_ETC___d759 =
	      IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d741;
      3'b001:
	  IF_rg_f3_03_EQ_0b0_04_THEN_IF_IF_rg_priv_6_ULE_ETC___d759 =
	      IF_IF_rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_ETC___d750;
      3'b010:
	  IF_rg_f3_03_EQ_0b0_04_THEN_IF_IF_rg_priv_6_ULE_ETC___d759 =
	      CASE_x1_avValue_pa593_BITS_2_TO_0_0x0_ram_word_ETC__q53;
      3'b011:
	  IF_rg_f3_03_EQ_0b0_04_THEN_IF_IF_rg_priv_6_ULE_ETC___d759 =
	      new_st_val__h18128;
      default: IF_rg_f3_03_EQ_0b0_04_THEN_IF_IF_rg_priv_6_ULE_ETC___d759 =
		   ram_word64_set$DOB;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 7'd0;
	rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (ctr_wr_rsps_pending_crg$EN)
	  ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY
	      ctr_wr_rsps_pending_crg$D_IN;
	if (rg_cset_in_cache$EN)
	  rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY rg_cset_in_cache$D_IN;
	if (rg_lower_word32_full$EN)
	  rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY
	      rg_lower_word32_full$D_IN;
	if (rg_lrsc_valid$EN)
	  rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY rg_lrsc_valid$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (rg_addr$EN) rg_addr <= `BSV_ASSIGNMENT_DELAY rg_addr$D_IN;
    if (rg_amo_funct7$EN)
      rg_amo_funct7 <= `BSV_ASSIGNMENT_DELAY rg_amo_funct7$D_IN;
    if (rg_error_during_refill$EN)
      rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  rg_error_during_refill$D_IN;
    if (rg_exc_code$EN) rg_exc_code <= `BSV_ASSIGNMENT_DELAY rg_exc_code$D_IN;
    if (rg_f3$EN) rg_f3 <= `BSV_ASSIGNMENT_DELAY rg_f3$D_IN;
    if (rg_ld_val$EN) rg_ld_val <= `BSV_ASSIGNMENT_DELAY rg_ld_val$D_IN;
    if (rg_lower_word32$EN)
      rg_lower_word32 <= `BSV_ASSIGNMENT_DELAY rg_lower_word32$D_IN;
    if (rg_lrsc_pa$EN) rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY rg_lrsc_pa$D_IN;
    if (rg_mstatus_MXR$EN)
      rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY rg_mstatus_MXR$D_IN;
    if (rg_op$EN) rg_op <= `BSV_ASSIGNMENT_DELAY rg_op$D_IN;
    if (rg_pa$EN) rg_pa <= `BSV_ASSIGNMENT_DELAY rg_pa$D_IN;
    if (rg_priv$EN) rg_priv <= `BSV_ASSIGNMENT_DELAY rg_priv$D_IN;
    if (rg_pte_pa$EN) rg_pte_pa <= `BSV_ASSIGNMENT_DELAY rg_pte_pa$D_IN;
    if (rg_satp$EN) rg_satp <= `BSV_ASSIGNMENT_DELAY rg_satp$D_IN;
    if (rg_sstatus_SUM$EN)
      rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY rg_sstatus_SUM$D_IN;
    if (rg_st_amo_val$EN)
      rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY rg_st_amo_val$D_IN;
    if (rg_word64_set_in_cache$EN)
      rg_word64_set_in_cache <= `BSV_ASSIGNMENT_DELAY
	  rg_word64_set_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    ctr_wr_rsps_pending_crg = 4'hA;
    rg_addr = 32'hAAAAAAAA;
    rg_amo_funct7 = 7'h2A;
    rg_cset_in_cache = 7'h2A;
    rg_error_during_refill = 1'h0;
    rg_exc_code = 4'hA;
    rg_f3 = 3'h2;
    rg_ld_val = 64'hAAAAAAAAAAAAAAAA;
    rg_lower_word32 = 32'hAAAAAAAA;
    rg_lower_word32_full = 1'h0;
    rg_lrsc_pa = 34'h2AAAAAAAA;
    rg_lrsc_valid = 1'h0;
    rg_mstatus_MXR = 1'h0;
    rg_op = 2'h2;
    rg_pa = 34'h2AAAAAAAA;
    rg_priv = 2'h2;
    rg_pte_pa = 34'h2AAAAAAAA;
    rg_satp = 32'hAAAAAAAA;
    rg_sstatus_SUM = 1'h0;
    rg_st_amo_val = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 4'hA;
    rg_word64_set_in_cache = 9'h0AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h3266 = $stime;
	  #0;
	end
    v__h3260 = v__h3266 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h3260);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", mem_req_wr_addr_awaddr__h2791);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", x__h2838);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("AXI4_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", mem_req_wr_data_wdata__h3017);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", mem_req_wr_data_wstrb__h3018);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	begin
	  v__h4416 = $stime;
	  #0;
	end
    v__h4410 = v__h4416 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h4410,
		   "D_MMU_Cache",
		   $signed(32'd128),
		   $signed(32'd1));
	else
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h4410,
		   "I_MMU_Cache",
		   $signed(32'd128),
		   $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  f_reset_reqs$D_OUT)
	begin
	  v__h4517 = $stime;
	  #0;
	end
    v__h4511 = v__h4517 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: Flushed", v__h4511, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_reset: Flushed", v__h4511, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h4666 = $stime;
	  #0;
	end
    v__h4660 = v__h4666 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h4660,
		   "D_MMU_Cache",
		   rg_addr);
	else
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h4660,
		   "I_MMU_Cache",
		   rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  rg_satp[31])
	$display("        Priv:%0d  SATP:{mode %0d asid %0h pa %0h}  VA:%0h.%0h.%0h",
		 rg_priv,
		 rg_satp[31],
		 rg_satp[30:22],
		 satp_pa__h1894,
		 rg_addr[31:22],
		 rg_addr[21:12],
		 rg_addr[11:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word64 0x%0h  Byte 0x%0h}",
		 { 2'd0, rg_addr[31:12] },
		 rg_addr[11:5],
		 rg_addr[4:3],
		 rg_addr[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("        CSet 0x%0x: (state, tag):", rg_addr[11:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  !ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  ram_state_and_ctag_cset$DOB[22])
	$write(", 0x%0x", ram_state_and_ctag_cset$DOB[21:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  !ram_state_and_ctag_cset$DOB[22])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d355)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d358)
	$write("VM_XLATE_EXCEPTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  rg_priv_6_ULE_0b1___d87 &&
	  rg_satp[31] &&
	  !tlb$lookup[68])
	$write("VM_XLATE_TLB_MISS");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", x1_avValue_pa__h5593);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", x1_avValue_exc_code__h5594);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "pte_modified: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d370)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d380)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "pte: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", x1_avValue_pte__h5596, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d380 &&
	  NOT_cfg_verbosity_read__0_ULT_2_07___d408)
	$display("    fa_record_pte_A_D_updates:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d380 &&
	  NOT_cfg_verbosity_read__0_ULT_2_07___d408)
	$write("      ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d380 &&
	  NOT_cfg_verbosity_read__0_ULT_2_07___d408)
	$write("TLB_Lookup_Result { ", "hit: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d380 &&
	  NOT_cfg_verbosity_read__0_ULT_2_07___d408)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d380 &&
	  NOT_cfg_verbosity_read__0_ULT_2_07___d408)
	$write(", ", "pte: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d380 &&
	  NOT_cfg_verbosity_read__0_ULT_2_07___d408)
	$write("'h%h", tlb$lookup[67:36]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d380 &&
	  NOT_cfg_verbosity_read__0_ULT_2_07___d408)
	$write(", ", "pte_level: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d380 &&
	  NOT_cfg_verbosity_read__0_ULT_2_07___d408)
	$write("'h%h", tlb$lookup[35:34]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d380 &&
	  NOT_cfg_verbosity_read__0_ULT_2_07___d408)
	$write(", ", "pte_pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d380 &&
	  NOT_cfg_verbosity_read__0_ULT_2_07___d408)
	$write("'h%h", tlb$lookup[33:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d380 &&
	  NOT_cfg_verbosity_read__0_ULT_2_07___d408)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d380 &&
	  NOT_cfg_verbosity_read__0_ULT_2_07___d408)
	$write("      ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d380 &&
	  NOT_cfg_verbosity_read__0_ULT_2_07___d408)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d416)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d419)
	$write("VM_XLATE_EXCEPTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d380 &&
	  NOT_cfg_verbosity_read__0_ULT_2_07___d408)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d380 &&
	  NOT_cfg_verbosity_read__0_ULT_2_07___d408)
	$write("'h%h", x1_avValue_pa__h5593);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d380 &&
	  NOT_cfg_verbosity_read__0_ULT_2_07___d408)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d380 &&
	  NOT_cfg_verbosity_read__0_ULT_2_07___d408)
	$write("'h%h", x1_avValue_exc_code__h5594);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d380 &&
	  NOT_cfg_verbosity_read__0_ULT_2_07___d408)
	$write(", ", "pte_modified: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d419)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d416)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d380 &&
	  NOT_cfg_verbosity_read__0_ULT_2_07___d408)
	$write(", ", "pte: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d380 &&
	  NOT_cfg_verbosity_read__0_ULT_2_07___d408)
	$write("'h%h", x1_avValue_pte__h5596, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_6_ULE_0b1_7_AND_rg_satp_9_BIT_31_0_4_A_ETC___d380 &&
	  NOT_cfg_verbosity_read__0_ULT_2_07___d408)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d433)
	$display("    => IO_REQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d595)
	begin
	  v__h14320 = $stime;
	  #0;
	end
    v__h14314 = v__h14320 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d595)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h14314,
		   "D_MMU_Cache",
		   rg_addr,
		   word64__h6843,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h14314,
		   "I_MMU_Cache",
		   rg_addr,
		   word64__h6843,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || tlb$lookup[68]) &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d608)
	$display("        AMO LR: reserving PA 0x%0h", x1_avValue_pa__h5593);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d595)
	$display("        Read-hit: addr 0x%0h word64 0x%0h",
		 rg_addr,
		 word64__h6843);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d614)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || tlb$lookup[68]) &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d620)
	$display("        AMO LR: cache refill: cancelling LR/SC reservation for PA 0x%0h",
		 rg_lrsc_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d772)
	$display("        ST: cancelling LR/SC reservation for PA",
		 x1_avValue_pa__h5593);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || tlb$lookup[68]) &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d778)
	$display("        AMO SC: fail: reserved addr 0x%0h, this address 0x%0h",
		 rg_lrsc_pa,
		 x1_avValue_pa__h5593);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || tlb$lookup[68]) &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d784)
	$display("        AMO SC: fail due to invalid LR/SC reservation");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d790)
	$display("        AMO SC result = %0d", lrsc_result__h14697);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d796)
	$display("        Write-Cache-Hit: pa 0x%0h word64 0x%0h",
		 x1_avValue_pa__h5593,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d796)
	$write("        New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d796)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d796)
	$write(" 0x%0x",
	       IF_rg_f3_03_EQ_0b0_04_THEN_IF_IF_rg_priv_6_ULE_ETC___d694);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d796)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_6_ULE_0b1___d87 || !rg_satp[31] || tlb$lookup[68]) &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d801)
	$display("        Write-Cache-Miss: pa 0x%0h word64 0x%0h",
		 x1_avValue_pa__h5593,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d808)
	$display("        Write-Cache-Hit/Miss: eaddr 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d808)
	$display("        => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d814)
	begin
	  v__h17908 = $stime;
	  #0;
	end
    v__h17902 = v__h17908 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d814)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h17902,
		   "D_MMU_Cache",
		   rg_addr,
		   64'd1,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h17902,
		   "I_MMU_Cache",
		   rg_addr,
		   64'd1,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d814)
	$display("        AMO SC: Fail response for addr 0x%0h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d821)
	$display("        AMO Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d826)
	$display("        AMO: addr 0x%0h amo_f7 0x%0h f3 %0d rs2_val 0x%0h",
		 rg_addr,
		 rg_amo_funct7,
		 rg_f3,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d826)
	$display("          PA 0x%0h ", x1_avValue_pa__h5593);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d826)
	$display("          Cache word64 0x%0h, load-result 0x%0h",
		 word64__h6843,
		 word64__h6843);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d826)
	$display("          0x%0h  op  0x%0h -> 0x%0h",
		 word64__h6843,
		 word64__h6843,
		 new_st_val__h18128);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d826)
	$write("          New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d826)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d826)
	$write(" 0x%0x",
	       IF_rg_f3_03_EQ_0b0_04_THEN_IF_IF_rg_priv_6_ULE_ETC___d759);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d826)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_6_ULE_0b1_7_8_OR_NOT_rg_satp_9_BIT_ETC___d832)
	$display("        AMO_op: cancelling LR/SC reservation for PA",
		 x1_avValue_pa__h5593);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h21279 = $stime;
	  #0;
	end
    v__h21273 = v__h21279 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_tlb_refill for eaddr 0x%0h; req for level 1 PTE",
		   v__h21273,
		   "D_MMU_Cache",
		   rg_addr);
	else
	  $display("%0d: %s.rl_start_tlb_refill for eaddr 0x%0h; req for level 1 PTE",
		   v__h21273,
		   "I_MMU_Cache",
		   rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", lev_1_pte_pa_w64_fa__h21334);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 3'b010);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d893)
	begin
	  v__h22212 = $stime;
	  #0;
	end
    v__h22206 = v__h22212 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d893)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h22206,
		   "D_MMU_Cache",
		   rg_addr,
		   _theResult____h21598,
		   rg_pte_pa,
		   exc_code___1__h5992);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h22206,
		   "I_MMU_Cache",
		   rg_addr,
		   _theResult____h21598,
		   rg_pte_pa,
		   exc_code___1__h5992);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901)
	begin
	  v__h21970 = $stime;
	  #0;
	end
    v__h21964 = v__h21970 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 0",
		   v__h21964,
		   "D_MMU_Cache",
		   rg_addr,
		   _theResult____h21598,
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 0",
		   v__h21964,
		   "I_MMU_Cache",
		   rg_addr,
		   _theResult____h21598,
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901)
	$display("    Req for level 0 PTE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901)
	$write("'h%h", lev_0_pte_pa_w64_fa__h22246);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901)
	$write("'h%h", 3'b011);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d920)
	begin
	  v__h22610 = $stime;
	  #0;
	end
    v__h22604 = v__h22610 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d920)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for megapage",
		   v__h22604,
		   "D_MMU_Cache",
		   rg_addr,
		   _theResult____h21598,
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for megapage",
		   v__h22604,
		   "I_MMU_Cache",
		   rg_addr,
		   _theResult____h21598,
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d920)
	$display("    Addr Space megapage pa: 0x%0h", lev_0_PTN_pa__h22242);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d926)
	begin
	  v__h22498 = $stime;
	  #0;
	end
    v__h22492 = v__h22498 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d926)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: megapage pte 0x%0h @ 0x%0h",
		   v__h22492,
		   "D_MMU_Cache",
		   rg_addr,
		   _theResult____h21598,
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: megapage pte 0x%0h @ 0x%0h",
		   v__h22492,
		   "I_MMU_Cache",
		   rg_addr,
		   _theResult____h21598,
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  _theResult____h21598[0] &&
	  (_theResult____h21598[1] || !_theResult____h21598[2]) &&
	  (_theResult____h21598[3] || _theResult____h21598[1]) &&
	  _theResult____h21598[19:10] != 10'd0)
	$display("    Invalid PTE: PPN [0] is not zero; page fault %0d",
		 exc_code___1__h5992);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h22141 = $stime;
	  #0;
	end
    v__h22135 = v__h22141 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h22135,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h2574);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h22135,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h2574);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d893)
	begin
	  v__h23149 = $stime;
	  #0;
	end
    v__h23143 = v__h23149 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d893)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h23143,
		   "D_MMU_Cache",
		   rg_addr,
		   _theResult____h21598,
		   rg_pte_pa,
		   exc_code___1__h5992);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h23143,
		   "I_MMU_Cache",
		   rg_addr,
		   _theResult____h21598,
		   rg_pte_pa,
		   exc_code___1__h5992);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901)
	begin
	  v__h23220 = $stime;
	  #0;
	end
    v__h23214 = v__h23220 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d901)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x50h: Not a leaf PTE; page fault %0d",
		   v__h23214,
		   "D_MMU_Cache",
		   rg_addr,
		   _theResult____h21598,
		   rg_pte_pa,
		   exc_code___1__h5992);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x50h: Not a leaf PTE; page fault %0d",
		   v__h23214,
		   "I_MMU_Cache",
		   rg_addr,
		   _theResult____h21598,
		   rg_pte_pa,
		   exc_code___1__h5992);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d952)
	begin
	  v__h23302 = $stime;
	  #0;
	end
    v__h23296 = v__h23302 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d952)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE",
		   v__h23296,
		   "D_MMU_Cache",
		   rg_addr,
		   _theResult____h21598,
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE",
		   v__h23296,
		   "I_MMU_Cache",
		   rg_addr,
		   _theResult____h21598,
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data_first__52_BITS_2_TO_1__ETC___d952)
	$display("    Addr Space page pa: 0x%0h", lev_0_PTN_pa__h22242);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h23078 = $stime;
	  #0;
	end
    v__h23072 = v__h23078 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h23072,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h2574);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h23072,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h2574);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h23427 = $stime;
	  #0;
	end
    v__h23421 = v__h23427 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_cache_refill: ",
		   v__h23421,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_start_cache_refill: ",
		   v__h23421,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("    To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", cline_fabric_addr__h23480);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 8'd3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 3'b011);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$display("    Victim way %0d; => CACHE_REFILL", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_72___d973)
	begin
	  v__h24186 = $stime;
	  #0;
	end
    v__h24180 = v__h24186 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_72___d973)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h24180,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h24180,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_72___d973)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_72___d973)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_72___d973)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_72___d973)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_72___d973)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_72___d973)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_72___d973)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_72___d973)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_72___d973 &&
	  master_xactor_f_rd_data$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_72___d973 &&
	  !master_xactor_f_rd_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_72___d973)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_72___d973)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_72___d973)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h24408 = $stime;
	  #0;
	end
    v__h24402 = v__h24408 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h24402,
		   "D_MMU_Cache",
		   access_exc_code__h2574);
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h24402,
		   "I_MMU_Cache",
		   access_exc_code__h2574);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[1:0] == 2'd3 &&
	  (master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	   rg_error_during_refill) &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[1:0] == 2'd3 &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !rg_error_during_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_72___d973)
	$display("        Updating Cache word64_set 0x%0h, word64_in_cline %0d) old => new",
		 rg_word64_set_in_cache,
		 rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_72___d973)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_72___d973)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_72___d973)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_72___d973)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_72___d973)
	$write(" 0x%0x", master_xactor_f_rd_data$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_72___d973)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_rereq && !cfg_verbosity_read__0_ULE_1___d41)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 rg_addr[11:5],
		 rg_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h26016 = $stime;
	  #0;
	end
    v__h26010 = v__h26016 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h26010,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h26010,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", fabric_addr__h28138);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", value__h28267);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h26366 = $stime;
	  #0;
	end
    v__h26360 = v__h26366 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h26360,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h26360,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d41)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d41)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d41 &&
	  master_xactor_f_rd_data$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d41 &&
	  !master_xactor_f_rd_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h27466 = $stime;
	  #0;
	end
    v__h27460 = v__h27466 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h27460,
		   "D_MMU_Cache",
		   rg_addr,
		   ld_val__h26475);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h27460,
		   "I_MMU_Cache",
		   rg_addr,
		   ld_val__h26475);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h27573 = $stime;
	  #0;
	end
    v__h27567 = v__h27573 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h27567,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h27567,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h27678 = $stime;
	  #0;
	end
    v__h27672 = v__h27678 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h27672,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h27672,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h27758 = $stime;
	  #0;
	end
    v__h27752 = v__h27758 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h27752,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h27752,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d41)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h27968 = $stime;
	  #0;
	end
    v__h27962 = v__h27968 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h27962,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h27962,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__0_ULE_1___d41)
	$display("    FAIL due to I/O address.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__0_ULE_1___d41)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h28086 = $stime;
	  #0;
	end
    v__h28080 = v__h28086 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h28080,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h28080,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", fabric_addr__h28138);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", value__h28267);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h28380 = $stime;
	  #0;
	end
    v__h28374 = v__h28380 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h28374,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h28374,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  master_xactor_f_rd_data$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  !master_xactor_f_rd_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h28555 = $stime;
	  #0;
	end
    v__h28549 = v__h28555 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h28549,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h28549,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h30814 = $stime;
	  #0;
	end
    v__h30808 = v__h30814 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h30808,
		   "D_MMU_Cache",
		   rg_addr,
		   new_ld_val__h28681);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h30808,
		   "I_MMU_Cache",
		   rg_addr,
		   new_ld_val__h28681);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h28651 = $stime;
	  #0;
	end
    v__h28645 = v__h28651 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		   v__h28645,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		   v__h28645,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h31421 = $stime;
	  #0;
	end
    v__h31415 = v__h31421 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h31415,
		 "D_MMU_Cache",
		 $unsigned(b__h21233));
	else
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h31415,
		 "I_MMU_Cache",
		 $unsigned(b__h21233));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	begin
	  v__h31382 = $stime;
	  #0;
	end
    v__h31376 = v__h31382 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h31376,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h31376,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset && !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h4051 = $stime;
	  #0;
	end
    v__h4045 = v__h4051 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset && !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_reset", v__h4045, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_start_reset", v__h4045, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h31769 = $stime;
	  #0;
	end
    v__h31763 = v__h31769 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("%0d: %m.req: op:", v__h31763);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d41 && req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d41 && req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d41 && req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(" f3:%0d addr:0x%0h st_value:0x%0h",
	       req_f3,
	       req_addr,
	       req_st_value,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d41) $write("    priv:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d41 && req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d41 && req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d41 && req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d41 && req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d41)
	$display("    amo_funct7 = 0x%0h", req_amo_funct7);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req &&
	  req_f3_BITS_1_TO_0_286_EQ_0b0_287_OR_req_f3_BI_ETC___d1316 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 req_addr[11:5],
		 req_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_tlb_flush && !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h32945 = $stime;
	  #0;
	end
    v__h32939 = v__h32945 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_tlb_flush && !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.tlb_flush", v__h32939, "D_MMU_Cache");
	else
	  $display("%0d: %s.tlb_flush", v__h32939, "I_MMU_Cache");
  end
  // synopsys translate_on
endmodule  // mkMMU_Cache

