//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    32 reg
// word64                         O    64
// st_amo_val                     O    64
// exc                            O     1
// exc_code                       O     4 reg
// RDY_server_flush_request_put   O     1 reg
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1 const
// mem_master_awvalid             O     1 reg
// mem_master_awid                O     4 reg
// mem_master_awaddr              O    64 reg
// mem_master_awlen               O     8 reg
// mem_master_awsize              O     3 reg
// mem_master_awburst             O     2 reg
// mem_master_awlock              O     1 reg
// mem_master_awcache             O     4 reg
// mem_master_awprot              O     3 reg
// mem_master_awqos               O     4 reg
// mem_master_awregion            O     4 reg
// mem_master_wvalid              O     1 reg
// mem_master_wdata               O    64 reg
// mem_master_wstrb               O     8 reg
// mem_master_wlast               O     1 reg
// mem_master_bready              O     1 reg
// mem_master_arvalid             O     1 reg
// mem_master_arid                O     4 reg
// mem_master_araddr              O    64 reg
// mem_master_arlen               O     8 reg
// mem_master_arsize              O     3 reg
// mem_master_arburst             O     2 reg
// mem_master_arlock              O     1 reg
// mem_master_arcache             O     4 reg
// mem_master_arprot              O     3 reg
// mem_master_arqos               O     4 reg
// mem_master_arregion            O     4 reg
// mem_master_rready              O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_f3                         I     3
// req_amo_funct7                 I     7 reg
// req_addr                       I    32
// req_st_value                   I    64
// req_priv                       I     2 reg
// req_sstatus_SUM                I     1 reg
// req_mstatus_MXR                I     1 reg
// req_satp                       I    32 reg
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bvalid              I     1
// mem_master_bid                 I     4 reg
// mem_master_bresp               I     2 reg
// mem_master_arready             I     1
// mem_master_rvalid              I     1
// mem_master_rid                 I     4 reg
// mem_master_rdata               I    64 reg
// mem_master_rresp               I     2 reg
// mem_master_rlast               I     1 reg
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_Cache(CLK,
		   RST_N,

		   set_verbosity_verbosity,
		   EN_set_verbosity,
		   RDY_set_verbosity,

		   EN_server_reset_request_put,
		   RDY_server_reset_request_put,

		   EN_server_reset_response_get,
		   RDY_server_reset_response_get,

		   req_op,
		   req_f3,
		   req_amo_funct7,
		   req_addr,
		   req_st_value,
		   req_priv,
		   req_sstatus_SUM,
		   req_mstatus_MXR,
		   req_satp,
		   EN_req,

		   valid,

		   addr,

		   word64,

		   st_amo_val,

		   exc,

		   exc_code,

		   EN_server_flush_request_put,
		   RDY_server_flush_request_put,

		   EN_server_flush_response_get,
		   RDY_server_flush_response_get,

		   EN_tlb_flush,
		   RDY_tlb_flush,

		   mem_master_awvalid,

		   mem_master_awid,

		   mem_master_awaddr,

		   mem_master_awlen,

		   mem_master_awsize,

		   mem_master_awburst,

		   mem_master_awlock,

		   mem_master_awcache,

		   mem_master_awprot,

		   mem_master_awqos,

		   mem_master_awregion,

		   mem_master_awready,

		   mem_master_wvalid,

		   mem_master_wdata,

		   mem_master_wstrb,

		   mem_master_wlast,

		   mem_master_wready,

		   mem_master_bvalid,
		   mem_master_bid,
		   mem_master_bresp,

		   mem_master_bready,

		   mem_master_arvalid,

		   mem_master_arid,

		   mem_master_araddr,

		   mem_master_arlen,

		   mem_master_arsize,

		   mem_master_arburst,

		   mem_master_arlock,

		   mem_master_arcache,

		   mem_master_arprot,

		   mem_master_arqos,

		   mem_master_arregion,

		   mem_master_arready,

		   mem_master_rvalid,
		   mem_master_rid,
		   mem_master_rdata,
		   mem_master_rresp,
		   mem_master_rlast,

		   mem_master_rready);
  parameter [0 : 0] dmem_not_imem = 1'b0;
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_f3;
  input  [6 : 0] req_amo_funct7;
  input  [31 : 0] req_addr;
  input  [63 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [31 : 0] req_satp;
  input  EN_req;

  // value method valid
  output valid;

  // value method addr
  output [31 : 0] addr;

  // value method word64
  output [63 : 0] word64;

  // value method st_amo_val
  output [63 : 0] st_amo_val;

  // value method exc
  output exc;

  // value method exc_code
  output [3 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_m_awvalid
  output mem_master_awvalid;

  // value method mem_master_m_awid
  output [3 : 0] mem_master_awid;

  // value method mem_master_m_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_m_awlen
  output [7 : 0] mem_master_awlen;

  // value method mem_master_m_awsize
  output [2 : 0] mem_master_awsize;

  // value method mem_master_m_awburst
  output [1 : 0] mem_master_awburst;

  // value method mem_master_m_awlock
  output mem_master_awlock;

  // value method mem_master_m_awcache
  output [3 : 0] mem_master_awcache;

  // value method mem_master_m_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_m_awqos
  output [3 : 0] mem_master_awqos;

  // value method mem_master_m_awregion
  output [3 : 0] mem_master_awregion;

  // value method mem_master_m_awuser

  // action method mem_master_m_awready
  input  mem_master_awready;

  // value method mem_master_m_wvalid
  output mem_master_wvalid;

  // value method mem_master_m_wdata
  output [63 : 0] mem_master_wdata;

  // value method mem_master_m_wstrb
  output [7 : 0] mem_master_wstrb;

  // value method mem_master_m_wlast
  output mem_master_wlast;

  // value method mem_master_m_wuser

  // action method mem_master_m_wready
  input  mem_master_wready;

  // action method mem_master_m_bvalid
  input  mem_master_bvalid;
  input  [3 : 0] mem_master_bid;
  input  [1 : 0] mem_master_bresp;

  // value method mem_master_m_bready
  output mem_master_bready;

  // value method mem_master_m_arvalid
  output mem_master_arvalid;

  // value method mem_master_m_arid
  output [3 : 0] mem_master_arid;

  // value method mem_master_m_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_m_arlen
  output [7 : 0] mem_master_arlen;

  // value method mem_master_m_arsize
  output [2 : 0] mem_master_arsize;

  // value method mem_master_m_arburst
  output [1 : 0] mem_master_arburst;

  // value method mem_master_m_arlock
  output mem_master_arlock;

  // value method mem_master_m_arcache
  output [3 : 0] mem_master_arcache;

  // value method mem_master_m_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_m_arqos
  output [3 : 0] mem_master_arqos;

  // value method mem_master_m_arregion
  output [3 : 0] mem_master_arregion;

  // value method mem_master_m_aruser

  // action method mem_master_m_arready
  input  mem_master_arready;

  // action method mem_master_m_rvalid
  input  mem_master_rvalid;
  input  [3 : 0] mem_master_rid;
  input  [63 : 0] mem_master_rdata;
  input  [1 : 0] mem_master_rresp;
  input  mem_master_rlast;

  // value method mem_master_m_rready
  output mem_master_rready;

  // signals for module outputs
  reg [63 : 0] word64;
  wire [63 : 0] mem_master_araddr,
		mem_master_awaddr,
		mem_master_wdata,
		st_amo_val;
  wire [31 : 0] addr;
  wire [7 : 0] mem_master_arlen, mem_master_awlen, mem_master_wstrb;
  wire [3 : 0] exc_code,
	       mem_master_arcache,
	       mem_master_arid,
	       mem_master_arqos,
	       mem_master_arregion,
	       mem_master_awcache,
	       mem_master_awid,
	       mem_master_awqos,
	       mem_master_awregion;
  wire [2 : 0] mem_master_arprot,
	       mem_master_arsize,
	       mem_master_awprot,
	       mem_master_awsize;
  wire [1 : 0] mem_master_arburst, mem_master_awburst;
  wire RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       exc,
       mem_master_arlock,
       mem_master_arvalid,
       mem_master_awlock,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wlast,
       mem_master_wvalid,
       valid;

  // inlined wires
  wire [3 : 0] ctr_wr_rsps_pending_crg$port0__write_1,
	       ctr_wr_rsps_pending_crg$port1__write_1,
	       ctr_wr_rsps_pending_crg$port2__read,
	       ctr_wr_rsps_pending_crg$port3__read;
  wire ctr_wr_rsps_pending_crg$EN_port2__write, dw_valid$whas;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register ctr_wr_rsps_pending_crg
  reg [3 : 0] ctr_wr_rsps_pending_crg;
  wire [3 : 0] ctr_wr_rsps_pending_crg$D_IN;
  wire ctr_wr_rsps_pending_crg$EN;

  // register rg_addr
  reg [31 : 0] rg_addr;
  wire [31 : 0] rg_addr$D_IN;
  wire rg_addr$EN;

  // register rg_amo_funct7
  reg [6 : 0] rg_amo_funct7;
  wire [6 : 0] rg_amo_funct7$D_IN;
  wire rg_amo_funct7$EN;

  // register rg_cset_in_cache
  reg [6 : 0] rg_cset_in_cache;
  wire [6 : 0] rg_cset_in_cache$D_IN;
  wire rg_cset_in_cache$EN;

  // register rg_error_during_refill
  reg rg_error_during_refill;
  wire rg_error_during_refill$D_IN, rg_error_during_refill$EN;

  // register rg_exc_code
  reg [3 : 0] rg_exc_code;
  reg [3 : 0] rg_exc_code$D_IN;
  wire rg_exc_code$EN;

  // register rg_f3
  reg [2 : 0] rg_f3;
  wire [2 : 0] rg_f3$D_IN;
  wire rg_f3$EN;

  // register rg_ld_val
  reg [63 : 0] rg_ld_val;
  reg [63 : 0] rg_ld_val$D_IN;
  wire rg_ld_val$EN;

  // register rg_lower_word32
  reg [31 : 0] rg_lower_word32;
  wire [31 : 0] rg_lower_word32$D_IN;
  wire rg_lower_word32$EN;

  // register rg_lower_word32_full
  reg rg_lower_word32_full;
  wire rg_lower_word32_full$D_IN, rg_lower_word32_full$EN;

  // register rg_lrsc_pa
  reg [33 : 0] rg_lrsc_pa;
  wire [33 : 0] rg_lrsc_pa$D_IN;
  wire rg_lrsc_pa$EN;

  // register rg_lrsc_valid
  reg rg_lrsc_valid;
  wire rg_lrsc_valid$D_IN, rg_lrsc_valid$EN;

  // register rg_mstatus_MXR
  reg rg_mstatus_MXR;
  wire rg_mstatus_MXR$D_IN, rg_mstatus_MXR$EN;

  // register rg_op
  reg [1 : 0] rg_op;
  wire [1 : 0] rg_op$D_IN;
  wire rg_op$EN;

  // register rg_pa
  reg [33 : 0] rg_pa;
  wire [33 : 0] rg_pa$D_IN;
  wire rg_pa$EN;

  // register rg_priv
  reg [1 : 0] rg_priv;
  wire [1 : 0] rg_priv$D_IN;
  wire rg_priv$EN;

  // register rg_pte_pa
  reg [33 : 0] rg_pte_pa;
  wire [33 : 0] rg_pte_pa$D_IN;
  wire rg_pte_pa$EN;

  // register rg_satp
  reg [31 : 0] rg_satp;
  wire [31 : 0] rg_satp$D_IN;
  wire rg_satp$EN;

  // register rg_sstatus_SUM
  reg rg_sstatus_SUM;
  wire rg_sstatus_SUM$D_IN, rg_sstatus_SUM$EN;

  // register rg_st_amo_val
  reg [63 : 0] rg_st_amo_val;
  wire [63 : 0] rg_st_amo_val$D_IN;
  wire rg_st_amo_val$EN;

  // register rg_state
  reg [3 : 0] rg_state;
  reg [3 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_victim_way
  reg rg_victim_way;
  wire rg_victim_way$D_IN, rg_victim_way$EN;

  // register rg_word64_set_in_cache
  reg [8 : 0] rg_word64_set_in_cache;
  wire [8 : 0] rg_word64_set_in_cache$D_IN;
  wire rg_word64_set_in_cache$EN;

  // ports of submodule f_fabric_write_reqs
  reg [100 : 0] f_fabric_write_reqs$D_IN;
  wire [100 : 0] f_fabric_write_reqs$D_OUT;
  wire f_fabric_write_reqs$CLR,
       f_fabric_write_reqs$DEQ,
       f_fabric_write_reqs$EMPTY_N,
       f_fabric_write_reqs$ENQ,
       f_fabric_write_reqs$FULL_N;

  // ports of submodule f_pte_writebacks
  wire [65 : 0] f_pte_writebacks$D_IN, f_pte_writebacks$D_OUT;
  wire f_pte_writebacks$CLR,
       f_pte_writebacks$DEQ,
       f_pte_writebacks$EMPTY_N,
       f_pte_writebacks$ENQ,
       f_pte_writebacks$FULL_N;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule master_xactor_f_rd_addr
  reg [96 : 0] master_xactor_f_rd_addr$D_IN;
  wire [96 : 0] master_xactor_f_rd_addr$D_OUT;
  wire master_xactor_f_rd_addr$CLR,
       master_xactor_f_rd_addr$DEQ,
       master_xactor_f_rd_addr$EMPTY_N,
       master_xactor_f_rd_addr$ENQ,
       master_xactor_f_rd_addr$FULL_N;

  // ports of submodule master_xactor_f_rd_data
  wire [70 : 0] master_xactor_f_rd_data$D_IN, master_xactor_f_rd_data$D_OUT;
  wire master_xactor_f_rd_data$CLR,
       master_xactor_f_rd_data$DEQ,
       master_xactor_f_rd_data$EMPTY_N,
       master_xactor_f_rd_data$ENQ,
       master_xactor_f_rd_data$FULL_N;

  // ports of submodule master_xactor_f_wr_addr
  wire [96 : 0] master_xactor_f_wr_addr$D_IN, master_xactor_f_wr_addr$D_OUT;
  wire master_xactor_f_wr_addr$CLR,
       master_xactor_f_wr_addr$DEQ,
       master_xactor_f_wr_addr$EMPTY_N,
       master_xactor_f_wr_addr$ENQ,
       master_xactor_f_wr_addr$FULL_N;

  // ports of submodule master_xactor_f_wr_data
  wire [72 : 0] master_xactor_f_wr_data$D_IN, master_xactor_f_wr_data$D_OUT;
  wire master_xactor_f_wr_data$CLR,
       master_xactor_f_wr_data$DEQ,
       master_xactor_f_wr_data$EMPTY_N,
       master_xactor_f_wr_data$ENQ,
       master_xactor_f_wr_data$FULL_N;

  // ports of submodule master_xactor_f_wr_resp
  wire [5 : 0] master_xactor_f_wr_resp$D_IN, master_xactor_f_wr_resp$D_OUT;
  wire master_xactor_f_wr_resp$CLR,
       master_xactor_f_wr_resp$DEQ,
       master_xactor_f_wr_resp$EMPTY_N,
       master_xactor_f_wr_resp$ENQ,
       master_xactor_f_wr_resp$FULL_N;

  // ports of submodule ram_state_and_ctag_cset
  wire [45 : 0] ram_state_and_ctag_cset$DIA,
		ram_state_and_ctag_cset$DIB,
		ram_state_and_ctag_cset$DOB;
  wire [6 : 0] ram_state_and_ctag_cset$ADDRA, ram_state_and_ctag_cset$ADDRB;
  wire ram_state_and_ctag_cset$ENA,
       ram_state_and_ctag_cset$ENB,
       ram_state_and_ctag_cset$WEA,
       ram_state_and_ctag_cset$WEB;

  // ports of submodule ram_word64_set
  reg [127 : 0] ram_word64_set$DIB;
  reg [8 : 0] ram_word64_set$ADDRB;
  wire [127 : 0] ram_word64_set$DIA, ram_word64_set$DOB;
  wire [8 : 0] ram_word64_set$ADDRA;
  wire ram_word64_set$ENA,
       ram_word64_set$ENB,
       ram_word64_set$WEA,
       ram_word64_set$WEB;

  // ports of submodule soc_map
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr;
  wire soc_map$m_is_mem_addr;

  // ports of submodule tlb
  reg [31 : 0] tlb$insert_pte;
  reg [1 : 0] tlb$insert_level;
  wire [68 : 0] tlb$lookup;
  wire [33 : 0] tlb$insert_pte_pa;
  wire [19 : 0] tlb$insert_vpn, tlb$lookup_vpn;
  wire [8 : 0] tlb$insert_asid, tlb$lookup_asid;
  wire tlb$EN_flush, tlb$EN_insert, tlb$RDY_insert, tlb$RDY_lookup;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_ST_AMO_response,
       CAN_FIRE_RL_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_rl_discard_write_rsp,
       CAN_FIRE_RL_rl_drive_exception_rsp,
       CAN_FIRE_RL_rl_fabric_send_write_req,
       CAN_FIRE_RL_rl_io_AMO_SC_req,
       CAN_FIRE_RL_rl_io_AMO_op_req,
       CAN_FIRE_RL_rl_io_AMO_read_rsp,
       CAN_FIRE_RL_rl_io_read_req,
       CAN_FIRE_RL_rl_io_read_rsp,
       CAN_FIRE_RL_rl_io_write_req,
       CAN_FIRE_RL_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_rl_ptw_level_0,
       CAN_FIRE_RL_rl_ptw_level_1,
       CAN_FIRE_RL_rl_rereq,
       CAN_FIRE_RL_rl_reset,
       CAN_FIRE_RL_rl_start_cache_refill,
       CAN_FIRE_RL_rl_start_reset,
       CAN_FIRE_RL_rl_start_tlb_refill,
       CAN_FIRE_RL_rl_writeback_updated_PTE,
       CAN_FIRE_mem_master_m_arready,
       CAN_FIRE_mem_master_m_awready,
       CAN_FIRE_mem_master_m_bvalid,
       CAN_FIRE_mem_master_m_rvalid,
       CAN_FIRE_mem_master_m_wready,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_rl_ST_AMO_response,
       WILL_FIRE_RL_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_rl_discard_write_rsp,
       WILL_FIRE_RL_rl_drive_exception_rsp,
       WILL_FIRE_RL_rl_fabric_send_write_req,
       WILL_FIRE_RL_rl_io_AMO_SC_req,
       WILL_FIRE_RL_rl_io_AMO_op_req,
       WILL_FIRE_RL_rl_io_AMO_read_rsp,
       WILL_FIRE_RL_rl_io_read_req,
       WILL_FIRE_RL_rl_io_read_rsp,
       WILL_FIRE_RL_rl_io_write_req,
       WILL_FIRE_RL_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_rl_ptw_level_0,
       WILL_FIRE_RL_rl_ptw_level_1,
       WILL_FIRE_RL_rl_rereq,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_RL_rl_start_cache_refill,
       WILL_FIRE_RL_rl_start_reset,
       WILL_FIRE_RL_rl_start_tlb_refill,
       WILL_FIRE_RL_rl_writeback_updated_PTE,
       WILL_FIRE_mem_master_m_arready,
       WILL_FIRE_mem_master_m_awready,
       WILL_FIRE_mem_master_m_bvalid,
       WILL_FIRE_mem_master_m_rvalid,
       WILL_FIRE_mem_master_m_wready,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  wire [127 : 0] MUX_ram_word64_set$a_put_3__VAL_1,
		 MUX_ram_word64_set$a_put_3__VAL_2;
  wire [100 : 0] MUX_f_fabric_write_reqs$enq_1__VAL_1,
		 MUX_f_fabric_write_reqs$enq_1__VAL_2,
		 MUX_f_fabric_write_reqs$enq_1__VAL_3,
		 MUX_f_fabric_write_reqs$enq_1__VAL_4;
  wire [96 : 0] MUX_master_xactor_f_rd_addr$enq_1__VAL_1,
		MUX_master_xactor_f_rd_addr$enq_1__VAL_2,
		MUX_master_xactor_f_rd_addr$enq_1__VAL_3,
		MUX_master_xactor_f_rd_addr$enq_1__VAL_4;
  wire [63 : 0] MUX_dw_output_ld_val$wset_1__VAL_3,
		MUX_rg_ld_val$write_1__VAL_2;
  wire [45 : 0] MUX_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [33 : 0] MUX_rg_pa$write_1__VAL_1;
  wire [8 : 0] MUX_ram_word64_set$b_put_2__VAL_2,
	       MUX_ram_word64_set$b_put_2__VAL_4;
  wire [6 : 0] MUX_rg_cset_in_cache$write_1__VAL_1;
  wire [3 : 0] MUX_rg_exc_code$write_1__VAL_1,
	       MUX_rg_exc_code$write_1__VAL_5,
	       MUX_rg_state$write_1__VAL_11,
	       MUX_rg_state$write_1__VAL_13,
	       MUX_rg_state$write_1__VAL_14,
	       MUX_rg_state$write_1__VAL_16,
	       MUX_rg_state$write_1__VAL_2,
	       MUX_rg_state$write_1__VAL_4;
  wire MUX_dw_output_ld_val$wset_1__SEL_1,
       MUX_dw_output_ld_val$wset_1__SEL_2,
       MUX_dw_output_ld_val$wset_1__SEL_3,
       MUX_dw_output_ld_val$wset_1__SEL_4,
       MUX_f_fabric_write_reqs$enq_1__SEL_2,
       MUX_master_xactor_f_rd_addr$enq_1__SEL_1,
       MUX_master_xactor_f_rd_addr$enq_1__SEL_2,
       MUX_ram_state_and_ctag_cset$a_put_1__SEL_1,
       MUX_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_ram_word64_set$a_put_1__SEL_1,
       MUX_ram_word64_set$b_put_1__SEL_2,
       MUX_rg_error_during_refill$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_2,
       MUX_rg_exc_code$write_1__SEL_3,
       MUX_rg_exc_code$write_1__SEL_5,
       MUX_rg_exc_code$write_1__SEL_6,
       MUX_rg_exc_code$write_1__SEL_7,
       MUX_rg_ld_val$write_1__SEL_2,
       MUX_rg_lrsc_valid$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_11,
       MUX_rg_state$write_1__SEL_16,
       MUX_rg_state$write_1__SEL_17,
       MUX_rg_state$write_1__SEL_3,
       MUX_tlb$insert_1__SEL_1,
       MUX_tlb$insert_1__SEL_2,
       MUX_tlb$insert_1__SEL_3;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h3289;
  reg [31 : 0] v__h4532;
  reg [31 : 0] v__h4631;
  reg [31 : 0] v__h4780;
  reg [31 : 0] v__h21218;
  reg [31 : 0] v__h24934;
  reg [31 : 0] v__h28445;
  reg [31 : 0] v__h29378;
  reg [31 : 0] v__h29136;
  reg [31 : 0] v__h29776;
  reg [31 : 0] v__h29664;
  reg [31 : 0] v__h29307;
  reg [31 : 0] v__h30315;
  reg [31 : 0] v__h30386;
  reg [31 : 0] v__h30468;
  reg [31 : 0] v__h30244;
  reg [31 : 0] v__h30593;
  reg [31 : 0] v__h31284;
  reg [31 : 0] v__h31506;
  reg [31 : 0] v__h33898;
  reg [31 : 0] v__h34248;
  reg [31 : 0] v__h35348;
  reg [31 : 0] v__h35455;
  reg [31 : 0] v__h35560;
  reg [31 : 0] v__h35640;
  reg [31 : 0] v__h35850;
  reg [31 : 0] v__h35968;
  reg [31 : 0] v__h36262;
  reg [31 : 0] v__h36437;
  reg [31 : 0] v__h38696;
  reg [31 : 0] v__h36533;
  reg [31 : 0] v__h39303;
  reg [31 : 0] v__h39264;
  reg [31 : 0] v__h4064;
  reg [31 : 0] v__h39651;
  reg [31 : 0] v__h41026;
  reg [31 : 0] v__h3283;
  reg [31 : 0] v__h4058;
  reg [31 : 0] v__h4526;
  reg [31 : 0] v__h4625;
  reg [31 : 0] v__h4774;
  reg [31 : 0] v__h21212;
  reg [31 : 0] v__h24928;
  reg [31 : 0] v__h28439;
  reg [31 : 0] v__h29130;
  reg [31 : 0] v__h29301;
  reg [31 : 0] v__h29372;
  reg [31 : 0] v__h29658;
  reg [31 : 0] v__h29770;
  reg [31 : 0] v__h30238;
  reg [31 : 0] v__h30309;
  reg [31 : 0] v__h30380;
  reg [31 : 0] v__h30462;
  reg [31 : 0] v__h30587;
  reg [31 : 0] v__h31278;
  reg [31 : 0] v__h31500;
  reg [31 : 0] v__h33892;
  reg [31 : 0] v__h34242;
  reg [31 : 0] v__h35342;
  reg [31 : 0] v__h35449;
  reg [31 : 0] v__h35554;
  reg [31 : 0] v__h35634;
  reg [31 : 0] v__h35844;
  reg [31 : 0] v__h35962;
  reg [31 : 0] v__h36256;
  reg [31 : 0] v__h36431;
  reg [31 : 0] v__h36527;
  reg [31 : 0] v__h38690;
  reg [31 : 0] v__h39258;
  reg [31 : 0] v__h39297;
  reg [31 : 0] v__h39645;
  reg [31 : 0] v__h41020;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] CASE_rg_addr_BITS_2_TO_0_0x0_result1038_0x4_re_ETC__q30,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result5128_0x4_re_ETC__q35,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result5193_0x4_re_ETC__q36,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result8404_0x4_re_ETC__q51,
	       CASE_rg_f3_0b0_IF_rg_addr_9_BITS_2_TO_0_17_EQ__ETC__q53,
	       CASE_x1_avValue_pa045_BITS_2_TO_0_0x0_old_word_ETC__q31,
	       CASE_x1_avValue_pa045_BITS_2_TO_0_0x0_old_word_ETC__q34,
	       IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d751,
	       IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d760,
	       IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d819,
	       IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d828,
	       IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1159,
	       IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1179,
	       IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1266,
	       IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1286,
	       IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1296,
	       IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d608,
	       IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d628,
	       IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d638,
	       IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1143,
	       IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1171,
	       IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1250,
	       IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1278,
	       IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d592,
	       IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d620,
	       IF_rg_f3_13_EQ_0b0_14_THEN_IF_rg_addr_9_BITS_2_ETC___d646,
	       IF_rg_f3_13_EQ_0b10_46_THEN_SEXT_IF_rg_f3_13_E_ETC___d707,
	       _theResult_____2__h25456,
	       _theResult_____2__h36609,
	       ld_val__h34357,
	       mem_req_wr_data_wdata__h3040,
	       n__h22384,
	       n__h25318,
	       new_ld_val__h36563,
	       old_word64__h22373,
	       w1__h25448,
	       w1__h36597,
	       w1__h36601;
  reg [33 : 0] _theResult___fst__h6544;
  reg [7 : 0] mem_req_wr_data_wstrb__h3041;
  reg [2 : 0] value__h36149, x__h2861;
  reg CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_13_ETC__q29,
      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d320,
      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d326,
      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_OR_rg_ad_ETC___d237,
      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_OR_rg_ad_ETC___d245,
      IF_rg_f3_13_EQ_0b0_14_OR_rg_f3_13_EQ_0b100_15__ETC___d259,
      IF_rg_f3_13_EQ_0b0_14_OR_rg_f3_13_EQ_0b1_38_OR_ETC___d275,
      IF_rg_f3_13_EQ_0b0_14_THEN_NOT_rg_priv_9_ULE_0_ETC___d335;
  wire [63 : 0] IF_NOT_ram_state_and_ctag_cset_b_read__96_BIT__ETC___d771,
		IF_NOT_ram_state_and_ctag_cset_b_read__96_BIT__ETC___d839,
		IF_ram_state_and_ctag_cset_b_read__96_BIT_45_0_ETC___d770,
		IF_ram_state_and_ctag_cset_b_read__96_BIT_45_0_ETC___d838,
		IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_1_E_ETC___d654,
		IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_IF__ETC___d1297,
		IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_ram_ETC___d639,
		IF_rg_f3_13_EQ_0b10_46_THEN_SEXT_rg_st_amo_val_ETC___d776,
		IF_rg_op_15_EQ_1_62_OR_rg_op_15_EQ_2_18_AND_rg_ETC___d848,
		_theResult___snd_fst__h3048,
		cline_fabric_addr__h30646,
		fabric_addr__h36020,
		lev_0_pte_pa_w64_fa__h29412,
		lev_1_pte_pa_w64_fa__h28500,
		mem_req_wr_addr_awaddr__h2814,
		new_st_val__h25154,
		new_st_val__h25460,
		new_st_val__h25551,
		new_st_val__h26531,
		new_st_val__h26535,
		new_st_val__h26539,
		new_st_val__h26543,
		new_st_val__h26548,
		new_st_val__h26554,
		new_st_val__h26559,
		new_st_val__h36613,
		new_st_val__h36704,
		new_st_val__h38564,
		new_st_val__h38568,
		new_st_val__h38572,
		new_st_val__h38576,
		new_st_val__h38581,
		new_st_val__h38587,
		new_st_val__h38592,
		new_value__h24024,
		new_value__h7595,
		result__h20306,
		result__h20334,
		result__h20362,
		result__h20390,
		result__h20418,
		result__h20446,
		result__h20474,
		result__h20502,
		result__h20547,
		result__h20575,
		result__h20603,
		result__h20631,
		result__h20659,
		result__h20687,
		result__h20715,
		result__h20743,
		result__h20788,
		result__h20816,
		result__h20844,
		result__h20872,
		result__h20913,
		result__h20941,
		result__h20969,
		result__h20997,
		result__h21038,
		result__h21066,
		result__h21105,
		result__h21133,
		result__h34417,
		result__h34447,
		result__h34474,
		result__h34501,
		result__h34528,
		result__h34555,
		result__h34582,
		result__h34609,
		result__h34653,
		result__h34680,
		result__h34707,
		result__h34734,
		result__h34761,
		result__h34788,
		result__h34815,
		result__h34842,
		result__h34886,
		result__h34913,
		result__h34940,
		result__h34967,
		result__h35007,
		result__h35034,
		result__h35061,
		result__h35088,
		result__h35128,
		result__h35155,
		result__h35193,
		result__h35220,
		result__h36792,
		result__h37700,
		result__h37728,
		result__h37756,
		result__h37784,
		result__h37812,
		result__h37840,
		result__h37868,
		result__h37913,
		result__h37941,
		result__h37969,
		result__h37997,
		result__h38025,
		result__h38053,
		result__h38081,
		result__h38109,
		result__h38154,
		result__h38182,
		result__h38210,
		result__h38238,
		result__h38279,
		result__h38307,
		result__h38335,
		result__h38363,
		result__h38404,
		result__h38432,
		result__h38471,
		result__h38499,
		w1___1__h25519,
		w1___1__h36672,
		w2___1__h36673,
		w2__h36603,
		word64__h7467,
		x__h21605,
		x__h36592,
		x__h3675,
		x__h7620,
		y__h13950,
		y__h7621,
		y__h7635;
  wire [33 : 0] _theResult___fst__h6133,
		_theResult___fst__h6205,
		cline_addr__h30645,
		lev_0_PTN_pa__h29408,
		lev_0_pte_pa__h29410,
		lev_0_pte_pa_w64__h29411,
		lev_1_pte_pa__h28498,
		lev_1_pte_pa_w64__h28499,
		pa___1__h6550,
		pa___1__h6599,
		pa__h6033,
		satp_pa__h1894,
		vpn_0_pa__h29409,
		vpn_1_pa__h28497,
		x1_avValue_pa__h6045;
  wire [31 : 0] IF_rg_f3_13_EQ_0b0_14_THEN_IF_rg_addr_9_BITS_2_ETC__q32,
		_theResult____h28764,
		_theResult___snd_fst__h6135,
		_theResult___snd_fst__h6207,
		_theResult___snd_fst__h6682,
		ld_val4357_BITS_31_TO_0__q39,
		ld_val4357_BITS_63_TO_32__q46,
		master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q3,
		master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q10,
		pte___1__h6731,
		pte___1__h6759,
		pte___2__h6542,
		rg_st_amo_val_BITS_31_TO_0__q33,
		w16597_BITS_31_TO_0__q52,
		word64467_BITS_31_TO_0__q17,
		word64467_BITS_63_TO_32__q24,
		x1_avValue_pte__h6048;
  wire [15 : 0] ld_val4357_BITS_15_TO_0__q38,
		ld_val4357_BITS_31_TO_16__q42,
		ld_val4357_BITS_47_TO_32__q45,
		ld_val4357_BITS_63_TO_48__q49,
		master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q2,
		master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6,
		master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q9,
		master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q13,
		word64467_BITS_15_TO_0__q16,
		word64467_BITS_31_TO_16__q20,
		word64467_BITS_47_TO_32__q23,
		word64467_BITS_63_TO_48__q27;
  wire [7 : 0] ld_val4357_BITS_15_TO_8__q40,
	       ld_val4357_BITS_23_TO_16__q41,
	       ld_val4357_BITS_31_TO_24__q43,
	       ld_val4357_BITS_39_TO_32__q44,
	       ld_val4357_BITS_47_TO_40__q47,
	       ld_val4357_BITS_55_TO_48__q48,
	       ld_val4357_BITS_63_TO_56__q50,
	       ld_val4357_BITS_7_TO_0__q37,
	       master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q1,
	       master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q4,
	       master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q5,
	       master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7,
	       master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q8,
	       master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q11,
	       master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q12,
	       master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q14,
	       strobe64__h2978,
	       strobe64__h2980,
	       strobe64__h2982,
	       word64467_BITS_15_TO_8__q18,
	       word64467_BITS_23_TO_16__q19,
	       word64467_BITS_31_TO_24__q21,
	       word64467_BITS_39_TO_32__q22,
	       word64467_BITS_47_TO_40__q25,
	       word64467_BITS_55_TO_48__q26,
	       word64467_BITS_63_TO_56__q28,
	       word64467_BITS_7_TO_0__q15;
  wire [5 : 0] shift_bits__h2828;
  wire [3 : 0] IF_NOT_ram_state_and_ctag_cset_b_read__96_BIT__ETC___d433,
	       IF_rg_op_15_EQ_0_16_OR_rg_op_15_EQ_2_18_AND_rg_ETC___d435,
	       IF_rg_op_15_EQ_1_62_OR_rg_op_15_EQ_2_18_AND_rg_ETC___d434,
	       IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d437,
	       access_exc_code__h2597,
	       b__h28399,
	       exc_code___1__h6444,
	       x1_avValue_exc_code__h6046;
  wire [1 : 0] tmp__h30785, tmp__h30786;
  wire IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d330,
       IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_NOT_ETC___d251,
       IF_rg_op_15_EQ_0_16_OR_rg_op_15_EQ_2_18_AND_rg_ETC___d344,
       IF_rg_op_15_EQ_1_62_OR_rg_op_15_EQ_2_18_AND_rg_ETC___d343,
       IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d477,
       NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d319,
       NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d325,
       NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d329,
       NOT_IF_rg_pte_pa_37_BIT_2_38_THEN_master_xacto_ETC___d965,
       NOT_cfg_verbosity_read__0_ULE_2_055___d1056,
       NOT_cfg_verbosity_read__0_ULT_2_41___d442,
       NOT_dmem_not_imem_30_AND_rg_op_15_EQ_0_16_OR_r_ETC___d377,
       NOT_dmem_not_imem_30_OR_NOT_rg_op_15_EQ_0_16_1_ETC___d137,
       NOT_dmem_not_imem_30_OR_soc_map_m_is_mem_addr__ETC___d471,
       NOT_dmem_not_imem_30_OR_soc_map_m_is_mem_addr__ETC___d667,
       NOT_dmem_not_imem_30_OR_soc_map_m_is_mem_addr__ETC___d679,
       NOT_dmem_not_imem_30_OR_soc_map_m_is_mem_addr__ETC___d684,
       NOT_dmem_not_imem_30_OR_soc_map_m_is_mem_addr__ETC___d692,
       NOT_dmem_not_imem_30_OR_soc_map_m_is_mem_addr__ETC___d701,
       NOT_dmem_not_imem_30_OR_soc_map_m_is_mem_addr__ETC___d714,
       NOT_dmem_not_imem_30_OR_soc_map_m_is_mem_addr__ETC___d851,
       NOT_dmem_not_imem_30_OR_soc_map_m_is_mem_addr__ETC___d869,
       NOT_dmem_not_imem_30_OR_soc_map_m_is_mem_addr__ETC___d915,
       NOT_master_xactor_f_rd_data_first__33_BITS_2_T_ETC___d958,
       NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d231,
       NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d261,
       NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d281,
       NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d342,
       NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d479,
       NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d682,
       NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d689,
       NOT_ram_state_and_ctag_cset_b_read__96_BIT_45__ETC___d232,
       NOT_req_f3_BITS_1_TO_0_383_EQ_0b0_384_385_AND__ETC___d1404,
       NOT_rg_op_15_EQ_0_16_17_AND_NOT_rg_op_15_EQ_2__ETC___d428,
       NOT_rg_op_15_EQ_1_62_85_AND_NOT_rg_op_15_EQ_2__ETC___d711,
       NOT_rg_op_15_EQ_1_62_85_AND_ram_state_and_ctag_ETC___d698,
       NOT_rg_op_15_EQ_2_18_19_OR_NOT_rg_amo_funct7_2_ETC___d709,
       NOT_rg_op_15_EQ_2_18_19_OR_NOT_rg_amo_funct7_2_ETC___d872,
       NOT_rg_op_15_EQ_2_18_19_OR_NOT_rg_amo_funct7_2_ETC___d878,
       NOT_rg_op_15_EQ_2_18_19_OR_NOT_rg_amo_funct7_2_ETC___d884,
       NOT_rg_priv_9_EQ_0b0_05_70_OR_tlb_lookup_rg_sa_ETC___d384,
       NOT_rg_priv_9_EQ_0b0_05_70_OR_tlb_lookup_rg_sa_ETC___d407,
       NOT_rg_priv_9_EQ_0b0_05_70_OR_tlb_lookup_rg_sa_ETC___d445,
       NOT_rg_priv_9_EQ_0b0_05_70_OR_tlb_lookup_rg_sa_ETC___d661,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d171,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d346,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d389,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d404,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d456,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d457,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d464,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d467,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d473,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d494,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d500,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d501,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d664,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d669,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d675,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d681,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d686,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d694,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d697,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d703,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d716,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d846,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d847,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d853,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d859,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d865,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d871,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d876,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d877,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d882,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d888,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d889,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d894,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d895,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d901,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d906,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d907,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d912,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d917,
       NOT_tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_ad_ETC___d152,
       NOT_tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_ad_ETC___d168,
       cfg_verbosity_read__0_ULE_1___d41,
       dmem_not_imem_AND_rg_op_15_EQ_0_16_OR_rg_op_15_ETC___d379,
       dmem_not_imem_OR_NOT_rg_op_15_EQ_0_16_17_AND_N_ETC___d129,
       lrsc_result__h21595,
       master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d1001,
       master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d1007,
       master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d1033,
       master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d974,
       master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982,
       master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d997,
       ram_state_and_ctag_cset_b_read__96_BITS_21_TO__ETC___d201,
       ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207,
       ram_state_and_ctag_cset_b_read__96_BIT_22_97_A_ETC___d476,
       ram_state_and_ctag_cset_b_read__96_BIT_22_97_A_ETC___d487,
       ram_state_and_ctag_cset_b_read__96_BIT_22_97_A_ETC___d665,
       ram_state_and_ctag_cset_b_read__96_BIT_22_97_A_ETC___d908,
       req_f3_BITS_1_TO_0_383_EQ_0b0_384_OR_req_f3_BI_ETC___d1413,
       rg_amo_funct7_20_BITS_6_TO_2_21_EQ_0b10_22_AND_ETC___d672,
       rg_amo_funct7_20_BITS_6_TO_2_21_EQ_0b1_84_OR_I_ETC___d340,
       rg_lrsc_pa_66_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d267,
       rg_op_15_EQ_0_16_OR_rg_op_15_EQ_2_18_AND_rg_am_ETC___d423,
       rg_op_15_EQ_0_16_OR_rg_op_15_EQ_2_18_AND_rg_am_ETC___d460,
       rg_op_15_EQ_0_16_OR_rg_op_15_EQ_2_18_AND_rg_am_ETC___d481,
       rg_op_15_EQ_0_16_OR_rg_op_15_EQ_2_18_AND_rg_am_ETC___d491,
       rg_op_15_EQ_0_16_OR_rg_op_15_EQ_2_18_AND_rg_am_ETC___d495,
       rg_op_15_EQ_1_62_OR_rg_op_15_EQ_2_18_AND_rg_am_ETC___d489,
       rg_op_15_EQ_1_62_OR_rg_op_15_EQ_2_18_AND_rg_am_ETC___d712,
       rg_op_15_EQ_1_62_OR_rg_op_15_EQ_2_18_AND_rg_am_ETC___d842,
       rg_op_15_EQ_2_18_AND_rg_amo_funct7_20_BITS_6_T_ETC___d283,
       rg_priv_9_EQ_0b0_05_AND_NOT_tlb_lookup_rg_satp_ETC___d146,
       rg_priv_9_EQ_0b0_05_AND_NOT_tlb_lookup_rg_satp_ETC___d159,
       rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d155,
       rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d348,
       rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d392,
       rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d414,
       rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d431,
       rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d432,
       rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d450,
       rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d453,
       rg_priv_9_ULE_0b1___d90,
       rg_state_3_EQ_12_098_AND_rg_op_15_EQ_0_16_OR_r_ETC___d1100,
       tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d135,
       tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d386,
       y__h6370;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // value method valid
  assign valid = dw_valid$whas ;

  // value method addr
  assign addr = rg_addr ;

  // value method word64
  always@(MUX_dw_output_ld_val$wset_1__SEL_1 or
	  ld_val__h34357 or
	  MUX_dw_output_ld_val$wset_1__SEL_2 or
	  new_ld_val__h36563 or
	  MUX_dw_output_ld_val$wset_1__SEL_3 or
	  MUX_dw_output_ld_val$wset_1__VAL_3 or
	  MUX_dw_output_ld_val$wset_1__SEL_4 or rg_ld_val)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_output_ld_val$wset_1__SEL_1: word64 = ld_val__h34357;
      MUX_dw_output_ld_val$wset_1__SEL_2: word64 = new_ld_val__h36563;
      MUX_dw_output_ld_val$wset_1__SEL_3:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_3;
      MUX_dw_output_ld_val$wset_1__SEL_4: word64 = rg_ld_val;
      default: word64 = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // value method st_amo_val
  assign st_amo_val =
	     MUX_dw_output_ld_val$wset_1__SEL_3 ? 64'd0 : rg_st_amo_val ;

  // value method exc
  assign exc = rg_state == 4'd4 ;

  // value method exc_code
  assign exc_code = rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_m_awvalid
  assign mem_master_awvalid = master_xactor_f_wr_addr$EMPTY_N ;

  // value method mem_master_m_awid
  assign mem_master_awid = master_xactor_f_wr_addr$D_OUT[96:93] ;

  // value method mem_master_m_awaddr
  assign mem_master_awaddr = master_xactor_f_wr_addr$D_OUT[92:29] ;

  // value method mem_master_m_awlen
  assign mem_master_awlen = master_xactor_f_wr_addr$D_OUT[28:21] ;

  // value method mem_master_m_awsize
  assign mem_master_awsize = master_xactor_f_wr_addr$D_OUT[20:18] ;

  // value method mem_master_m_awburst
  assign mem_master_awburst = master_xactor_f_wr_addr$D_OUT[17:16] ;

  // value method mem_master_m_awlock
  assign mem_master_awlock = master_xactor_f_wr_addr$D_OUT[15] ;

  // value method mem_master_m_awcache
  assign mem_master_awcache = master_xactor_f_wr_addr$D_OUT[14:11] ;

  // value method mem_master_m_awprot
  assign mem_master_awprot = master_xactor_f_wr_addr$D_OUT[10:8] ;

  // value method mem_master_m_awqos
  assign mem_master_awqos = master_xactor_f_wr_addr$D_OUT[7:4] ;

  // value method mem_master_m_awregion
  assign mem_master_awregion = master_xactor_f_wr_addr$D_OUT[3:0] ;

  // action method mem_master_m_awready
  assign CAN_FIRE_mem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_awready = 1'd1 ;

  // value method mem_master_m_wvalid
  assign mem_master_wvalid = master_xactor_f_wr_data$EMPTY_N ;

  // value method mem_master_m_wdata
  assign mem_master_wdata = master_xactor_f_wr_data$D_OUT[72:9] ;

  // value method mem_master_m_wstrb
  assign mem_master_wstrb = master_xactor_f_wr_data$D_OUT[8:1] ;

  // value method mem_master_m_wlast
  assign mem_master_wlast = master_xactor_f_wr_data$D_OUT[0] ;

  // action method mem_master_m_wready
  assign CAN_FIRE_mem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_wready = 1'd1 ;

  // action method mem_master_m_bvalid
  assign CAN_FIRE_mem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_bvalid = 1'd1 ;

  // value method mem_master_m_bready
  assign mem_master_bready = master_xactor_f_wr_resp$FULL_N ;

  // value method mem_master_m_arvalid
  assign mem_master_arvalid = master_xactor_f_rd_addr$EMPTY_N ;

  // value method mem_master_m_arid
  assign mem_master_arid = master_xactor_f_rd_addr$D_OUT[96:93] ;

  // value method mem_master_m_araddr
  assign mem_master_araddr = master_xactor_f_rd_addr$D_OUT[92:29] ;

  // value method mem_master_m_arlen
  assign mem_master_arlen = master_xactor_f_rd_addr$D_OUT[28:21] ;

  // value method mem_master_m_arsize
  assign mem_master_arsize = master_xactor_f_rd_addr$D_OUT[20:18] ;

  // value method mem_master_m_arburst
  assign mem_master_arburst = master_xactor_f_rd_addr$D_OUT[17:16] ;

  // value method mem_master_m_arlock
  assign mem_master_arlock = master_xactor_f_rd_addr$D_OUT[15] ;

  // value method mem_master_m_arcache
  assign mem_master_arcache = master_xactor_f_rd_addr$D_OUT[14:11] ;

  // value method mem_master_m_arprot
  assign mem_master_arprot = master_xactor_f_rd_addr$D_OUT[10:8] ;

  // value method mem_master_m_arqos
  assign mem_master_arqos = master_xactor_f_rd_addr$D_OUT[7:4] ;

  // value method mem_master_m_arregion
  assign mem_master_arregion = master_xactor_f_rd_addr$D_OUT[3:0] ;

  // action method mem_master_m_arready
  assign CAN_FIRE_mem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_arready = 1'd1 ;

  // action method mem_master_m_rvalid
  assign CAN_FIRE_mem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_rvalid = 1'd1 ;

  // value method mem_master_m_rready
  assign mem_master_rready = master_xactor_f_rd_data$FULL_N ;

  // submodule f_fabric_write_reqs
  FIFO2 #(.width(32'd101), .guarded(32'd1)) f_fabric_write_reqs(.RST(RST_N),
								.CLK(CLK),
								.D_IN(f_fabric_write_reqs$D_IN),
								.ENQ(f_fabric_write_reqs$ENQ),
								.DEQ(f_fabric_write_reqs$DEQ),
								.CLR(f_fabric_write_reqs$CLR),
								.D_OUT(f_fabric_write_reqs$D_OUT),
								.FULL_N(f_fabric_write_reqs$FULL_N),
								.EMPTY_N(f_fabric_write_reqs$EMPTY_N));

  // submodule f_pte_writebacks
  FIFO2 #(.width(32'd66), .guarded(32'd1)) f_pte_writebacks(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(f_pte_writebacks$D_IN),
							    .ENQ(f_pte_writebacks$ENQ),
							    .DEQ(f_pte_writebacks$DEQ),
							    .CLR(f_pte_writebacks$CLR),
							    .D_OUT(f_pte_writebacks$D_OUT),
							    .FULL_N(f_pte_writebacks$FULL_N),
							    .EMPTY_N(f_pte_writebacks$EMPTY_N));

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_reqs(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_reqs$D_IN),
						       .ENQ(f_reset_reqs$ENQ),
						       .DEQ(f_reset_reqs$DEQ),
						       .CLR(f_reset_reqs$CLR),
						       .D_OUT(f_reset_reqs$D_OUT),
						       .FULL_N(f_reset_reqs$FULL_N),
						       .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_rsps(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_rsps$D_IN),
						       .ENQ(f_reset_rsps$ENQ),
						       .DEQ(f_reset_rsps$DEQ),
						       .CLR(f_reset_rsps$CLR),
						       .D_OUT(f_reset_rsps$D_OUT),
						       .FULL_N(f_reset_rsps$FULL_N),
						       .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule master_xactor_f_rd_addr
  FIFO2 #(.width(32'd97),
	  .guarded(32'd1)) master_xactor_f_rd_addr(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_rd_addr$D_IN),
						   .ENQ(master_xactor_f_rd_addr$ENQ),
						   .DEQ(master_xactor_f_rd_addr$DEQ),
						   .CLR(master_xactor_f_rd_addr$CLR),
						   .D_OUT(master_xactor_f_rd_addr$D_OUT),
						   .FULL_N(master_xactor_f_rd_addr$FULL_N),
						   .EMPTY_N(master_xactor_f_rd_addr$EMPTY_N));

  // submodule master_xactor_f_rd_data
  FIFO2 #(.width(32'd71),
	  .guarded(32'd1)) master_xactor_f_rd_data(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_rd_data$D_IN),
						   .ENQ(master_xactor_f_rd_data$ENQ),
						   .DEQ(master_xactor_f_rd_data$DEQ),
						   .CLR(master_xactor_f_rd_data$CLR),
						   .D_OUT(master_xactor_f_rd_data$D_OUT),
						   .FULL_N(master_xactor_f_rd_data$FULL_N),
						   .EMPTY_N(master_xactor_f_rd_data$EMPTY_N));

  // submodule master_xactor_f_wr_addr
  FIFO2 #(.width(32'd97),
	  .guarded(32'd1)) master_xactor_f_wr_addr(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_wr_addr$D_IN),
						   .ENQ(master_xactor_f_wr_addr$ENQ),
						   .DEQ(master_xactor_f_wr_addr$DEQ),
						   .CLR(master_xactor_f_wr_addr$CLR),
						   .D_OUT(master_xactor_f_wr_addr$D_OUT),
						   .FULL_N(master_xactor_f_wr_addr$FULL_N),
						   .EMPTY_N(master_xactor_f_wr_addr$EMPTY_N));

  // submodule master_xactor_f_wr_data
  FIFO2 #(.width(32'd73),
	  .guarded(32'd1)) master_xactor_f_wr_data(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_wr_data$D_IN),
						   .ENQ(master_xactor_f_wr_data$ENQ),
						   .DEQ(master_xactor_f_wr_data$DEQ),
						   .CLR(master_xactor_f_wr_data$CLR),
						   .D_OUT(master_xactor_f_wr_data$D_OUT),
						   .FULL_N(master_xactor_f_wr_data$FULL_N),
						   .EMPTY_N(master_xactor_f_wr_data$EMPTY_N));

  // submodule master_xactor_f_wr_resp
  FIFO2 #(.width(32'd6), .guarded(32'd1)) master_xactor_f_wr_resp(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(master_xactor_f_wr_resp$D_IN),
								  .ENQ(master_xactor_f_wr_resp$ENQ),
								  .DEQ(master_xactor_f_wr_resp$DEQ),
								  .CLR(master_xactor_f_wr_resp$CLR),
								  .D_OUT(master_xactor_f_wr_resp$D_OUT),
								  .FULL_N(master_xactor_f_wr_resp$FULL_N),
								  .EMPTY_N(master_xactor_f_wr_resp$EMPTY_N));

  // submodule ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd46),
	  .MEMSIZE(8'd128)) ram_state_and_ctag_cset(.CLKA(CLK),
						    .CLKB(CLK),
						    .ADDRA(ram_state_and_ctag_cset$ADDRA),
						    .ADDRB(ram_state_and_ctag_cset$ADDRB),
						    .DIA(ram_state_and_ctag_cset$DIA),
						    .DIB(ram_state_and_ctag_cset$DIB),
						    .WEA(ram_state_and_ctag_cset$WEA),
						    .WEB(ram_state_and_ctag_cset$WEB),
						    .ENA(ram_state_and_ctag_cset$ENA),
						    .ENB(ram_state_and_ctag_cset$ENB),
						    .DOA(),
						    .DOB(ram_state_and_ctag_cset$DOB));

  // submodule ram_word64_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd9),
	  .DATA_WIDTH(32'd128),
	  .MEMSIZE(10'd512)) ram_word64_set(.CLKA(CLK),
					    .CLKB(CLK),
					    .ADDRA(ram_word64_set$ADDRA),
					    .ADDRB(ram_word64_set$ADDRB),
					    .DIA(ram_word64_set$DIA),
					    .DIB(ram_word64_set$DIB),
					    .WEA(ram_word64_set$WEA),
					    .WEB(ram_word64_set$WEB),
					    .ENA(ram_word64_set$ENA),
					    .ENB(ram_word64_set$ENB),
					    .DOA(),
					    .DOB(ram_word64_set$DOB));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_near_mem_io_addr_base(),
		    .m_near_mem_io_addr_size(),
		    .m_near_mem_io_addr_lim(),
		    .m_plic_addr_base(),
		    .m_plic_addr_size(),
		    .m_plic_addr_lim(),
		    .m_uart0_addr_base(),
		    .m_uart0_addr_size(),
		    .m_uart0_addr_lim(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_lim(),
		    .m_mem0_controller_addr_base(),
		    .m_mem0_controller_addr_size(),
		    .m_mem0_controller_addr_lim(),
		    .m_tcm_addr_base(),
		    .m_tcm_addr_size(),
		    .m_tcm_addr_lim(),
		    .m_is_mem_addr(soc_map$m_is_mem_addr),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value());

  // submodule tlb
  mkTLB #(.dmem_not_imem(dmem_not_imem)) tlb(.CLK(CLK),
					     .RST_N(RST_N),
					     .insert_asid(tlb$insert_asid),
					     .insert_level(tlb$insert_level),
					     .insert_pte(tlb$insert_pte),
					     .insert_pte_pa(tlb$insert_pte_pa),
					     .insert_vpn(tlb$insert_vpn),
					     .lookup_asid(tlb$lookup_asid),
					     .lookup_vpn(tlb$lookup_vpn),
					     .EN_flush(tlb$EN_flush),
					     .EN_insert(tlb$EN_insert),
					     .RDY_flush(),
					     .lookup(tlb$lookup),
					     .RDY_lookup(tlb$RDY_lookup),
					     .RDY_insert(tlb$RDY_insert));

  // rule RL_rl_fabric_send_write_req
  assign CAN_FIRE_RL_rl_fabric_send_write_req =
	     f_fabric_write_reqs$EMPTY_N && master_xactor_f_wr_addr$FULL_N &&
	     master_xactor_f_wr_data$FULL_N ;
  assign WILL_FIRE_RL_rl_fabric_send_write_req =
	     CAN_FIRE_RL_rl_fabric_send_write_req ;

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset =
	     (rg_cset_in_cache != 7'd127 ||
	      f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N) &&
	     rg_state == 4'd1 ;
  assign WILL_FIRE_RL_rl_reset = CAN_FIRE_RL_rl_reset ;

  // rule RL_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_rl_probe_and_immed_rsp =
	     (cfg_verbosity_read__0_ULE_1___d41 || tlb$RDY_lookup) &&
	     (!rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || tlb$RDY_lookup) &&
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d348 &&
	     rg_state == 4'd3 ;
  assign WILL_FIRE_RL_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_rl_probe_and_immed_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_start_tlb_refill
  assign CAN_FIRE_RL_rl_start_tlb_refill =
	     master_xactor_f_rd_addr$FULL_N && rg_state == 4'd5 &&
	     b__h28399 == 4'd0 ;
  assign WILL_FIRE_RL_rl_start_tlb_refill =
	     CAN_FIRE_RL_rl_start_tlb_refill && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_ptw_level_1
  assign CAN_FIRE_RL_rl_ptw_level_1 =
	     master_xactor_f_rd_data$EMPTY_N &&
	     NOT_master_xactor_f_rd_data_first__33_BITS_2_T_ETC___d958 &&
	     rg_state == 4'd6 ;
  assign WILL_FIRE_RL_rl_ptw_level_1 =
	     CAN_FIRE_RL_rl_ptw_level_1 && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_ptw_level_0
  assign CAN_FIRE_RL_rl_ptw_level_0 =
	     master_xactor_f_rd_data$EMPTY_N &&
	     (master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	      !_theResult____h28764[0] ||
	      !_theResult____h28764[1] && _theResult____h28764[2] ||
	      !_theResult____h28764[3] && !_theResult____h28764[1] ||
	      tlb$RDY_insert) &&
	     rg_state == 4'd7 ;
  assign WILL_FIRE_RL_rl_ptw_level_0 =
	     CAN_FIRE_RL_rl_ptw_level_0 && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_start_cache_refill
  assign CAN_FIRE_RL_rl_start_cache_refill =
	     master_xactor_f_rd_addr$FULL_N && rg_state == 4'd8 &&
	     b__h28399 == 4'd0 ;
  assign WILL_FIRE_RL_rl_start_cache_refill =
	     CAN_FIRE_RL_rl_start_cache_refill &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;

  // rule RL_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_rl_cache_refill_rsps_loop =
	     master_xactor_f_rd_data$EMPTY_N && rg_state == 4'd9 ;
  assign WILL_FIRE_RL_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_rl_cache_refill_rsps_loop &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;

  // rule RL_rl_rereq
  assign CAN_FIRE_RL_rl_rereq = rg_state == 4'd10 ;
  assign WILL_FIRE_RL_rl_rereq =
	     CAN_FIRE_RL_rl_rereq && !WILL_FIRE_RL_rl_start_reset && !EN_req ;

  // rule RL_rl_ST_AMO_response
  assign CAN_FIRE_RL_rl_ST_AMO_response = rg_state == 4'd11 ;
  assign WILL_FIRE_RL_rl_ST_AMO_response = CAN_FIRE_RL_rl_ST_AMO_response ;

  // rule RL_rl_io_read_req
  assign CAN_FIRE_RL_rl_io_read_req =
	     master_xactor_f_rd_addr$FULL_N &&
	     rg_state_3_EQ_12_098_AND_rg_op_15_EQ_0_16_OR_r_ETC___d1100 ;
  assign WILL_FIRE_RL_rl_io_read_req =
	     CAN_FIRE_RL_rl_io_read_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_read_rsp
  assign CAN_FIRE_RL_rl_io_read_rsp =
	     master_xactor_f_rd_data$EMPTY_N && rg_state == 4'd13 ;
  assign WILL_FIRE_RL_rl_io_read_rsp =
	     CAN_FIRE_RL_rl_io_read_rsp && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_rl_maintain_io_read_rsp = rg_state == 4'd14 ;
  assign WILL_FIRE_RL_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_rl_maintain_io_read_rsp ;

  // rule RL_rl_io_write_req
  assign CAN_FIRE_RL_rl_io_write_req =
	     f_fabric_write_reqs$FULL_N && rg_state == 4'd12 &&
	     rg_op == 2'd1 ;
  assign WILL_FIRE_RL_rl_io_write_req =
	     CAN_FIRE_RL_rl_io_write_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_SC_req
  assign CAN_FIRE_RL_rl_io_AMO_SC_req =
	     rg_state == 4'd12 && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 ;
  assign WILL_FIRE_RL_rl_io_AMO_SC_req =
	     CAN_FIRE_RL_rl_io_AMO_SC_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_op_req
  assign CAN_FIRE_RL_rl_io_AMO_op_req =
	     master_xactor_f_rd_addr$FULL_N && rg_state == 4'd12 &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] != 5'b00010 &&
	     rg_amo_funct7[6:2] != 5'b00011 ;
  assign WILL_FIRE_RL_rl_io_AMO_op_req =
	     CAN_FIRE_RL_rl_io_AMO_op_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_writeback_updated_PTE
  assign CAN_FIRE_RL_rl_writeback_updated_PTE =
	     f_pte_writebacks$EMPTY_N && f_fabric_write_reqs$FULL_N ;
  assign WILL_FIRE_RL_rl_writeback_updated_PTE =
	     CAN_FIRE_RL_rl_writeback_updated_PTE &&
	     !WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     !WILL_FIRE_RL_rl_io_write_req &&
	     !WILL_FIRE_RL_rl_probe_and_immed_rsp ;

  // rule RL_rl_io_AMO_read_rsp
  assign CAN_FIRE_RL_rl_io_AMO_read_rsp =
	     master_xactor_f_rd_data$EMPTY_N &&
	     (master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	      f_fabric_write_reqs$FULL_N) &&
	     rg_state == 4'd15 ;
  assign WILL_FIRE_RL_rl_io_AMO_read_rsp =
	     CAN_FIRE_RL_rl_io_AMO_read_rsp && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_discard_write_rsp
  assign CAN_FIRE_RL_rl_discard_write_rsp =
	     b__h28399 != 4'd0 && master_xactor_f_wr_resp$EMPTY_N ;
  assign WILL_FIRE_RL_rl_discard_write_rsp =
	     CAN_FIRE_RL_rl_discard_write_rsp ;

  // rule RL_rl_drive_exception_rsp
  assign CAN_FIRE_RL_rl_drive_exception_rsp = rg_state == 4'd4 ;
  assign WILL_FIRE_RL_rl_drive_exception_rsp = rg_state == 4'd4 ;

  // rule RL_rl_start_reset
  assign CAN_FIRE_RL_rl_start_reset = MUX_rg_state$write_1__SEL_3 ;
  assign WILL_FIRE_RL_rl_start_reset = MUX_rg_state$write_1__SEL_3 ;

  // inputs to muxes for submodule ports
  assign MUX_dw_output_ld_val$wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_2 =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_3 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d501 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_4 =
	     WILL_FIRE_RL_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_rl_ST_AMO_response ;
  assign MUX_f_fabric_write_reqs$enq_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d847 ;
  assign MUX_master_xactor_f_rd_addr$enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     _theResult____h28764[0] &&
	     !_theResult____h28764[2] &&
	     !_theResult____h28764[3] &&
	     !_theResult____h28764[1] ;
  assign MUX_master_xactor_f_rd_addr$enq_1__SEL_2 =
	     WILL_FIRE_RL_rl_io_AMO_op_req || WILL_FIRE_RL_rl_io_read_req ;
  assign MUX_ram_state_and_ctag_cset$a_put_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] == 2'd0 &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ;
  assign MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     EN_req &&
	     req_f3_BITS_1_TO_0_383_EQ_0b0_384_OR_req_f3_BI_ETC___d1413 ;
  assign MUX_ram_word64_set$a_put_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ;
  assign MUX_ram_word64_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] != 2'd3 ;
  assign MUX_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ;
  assign MUX_rg_exc_code$write_1__SEL_1 =
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_383_EQ_0b0_384_385_AND__ETC___d1404 ;
  assign MUX_rg_exc_code$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ;
  assign MUX_rg_exc_code$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ;
  assign MUX_rg_exc_code$write_1__SEL_5 =
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     (!_theResult____h28764[0] ||
	      !_theResult____h28764[1] && _theResult____h28764[2] ||
	      !_theResult____h28764[3] && !_theResult____h28764[1] ||
	      master_xactor_f_rd_data$D_OUT[2:1] != 2'b0) ;
  assign MUX_rg_exc_code$write_1__SEL_6 =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     NOT_IF_rg_pte_pa_37_BIT_2_38_THEN_master_xacto_ETC___d965 ;
  assign MUX_rg_exc_code$write_1__SEL_7 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d155 ;
  assign MUX_rg_ld_val$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d703 ;
  assign MUX_rg_lrsc_valid$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d494 ;
  assign MUX_rg_state$write_1__SEL_3 =
	     f_reset_reqs$EMPTY_N && rg_state != 4'd1 ;
  assign MUX_rg_state$write_1__SEL_11 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] == 2'd3 ;
  assign MUX_rg_state$write_1__SEL_16 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d432 ;
  assign MUX_rg_state$write_1__SEL_17 =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ;
  assign MUX_tlb$insert_1__SEL_1 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d414 ;
  assign MUX_tlb$insert_1__SEL_2 =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d997 ;
  assign MUX_tlb$insert_1__SEL_3 =
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     _theResult____h28764[0] &&
	     (_theResult____h28764[1] || !_theResult____h28764[2]) &&
	     (_theResult____h28764[3] || _theResult____h28764[1]) ;
  assign MUX_dw_output_ld_val$wset_1__VAL_3 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       new_value__h7595 :
	       new_value__h24024 ;
  assign MUX_f_fabric_write_reqs$enq_1__VAL_1 = { rg_f3, rg_pa, x__h36592 } ;
  assign MUX_f_fabric_write_reqs$enq_1__VAL_2 =
	     { rg_f3,
	       x1_avValue_pa__h6045,
	       IF_rg_op_15_EQ_1_62_OR_rg_op_15_EQ_2_18_AND_rg_ETC___d848 } ;
  assign MUX_f_fabric_write_reqs$enq_1__VAL_3 =
	     { 3'b010, f_pte_writebacks$D_OUT[65:32], x__h3675 } ;
  assign MUX_f_fabric_write_reqs$enq_1__VAL_4 =
	     { rg_f3, rg_pa, rg_st_amo_val } ;
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_1 =
	     { 4'd0, lev_0_pte_pa_w64_fa__h29412, 29'd589824 } ;
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_2 =
	     { 4'd0, fabric_addr__h36020, 8'd0, value__h36149, 18'd65536 } ;
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_3 =
	     { 4'd0, lev_1_pte_pa_w64_fa__h28500, 29'd589824 } ;
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_4 =
	     { 4'd0, cline_fabric_addr__h30646, 29'd7143424 } ;
  assign MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 =
	     { rg_victim_way || ram_state_and_ctag_cset$DOB[45],
	       rg_victim_way ?
		 rg_pa[33:12] :
		 ram_state_and_ctag_cset$DOB[44:23],
	       !rg_victim_way || ram_state_and_ctag_cset$DOB[22],
	       rg_victim_way ?
		 ram_state_and_ctag_cset$DOB[21:0] :
		 rg_pa[33:12] } ;
  assign MUX_ram_word64_set$a_put_3__VAL_1 =
	     rg_victim_way ?
	       { master_xactor_f_rd_data$D_OUT[66:3],
		 ram_word64_set$DOB[63:0] } :
	       { ram_word64_set$DOB[127:64],
		 master_xactor_f_rd_data$D_OUT[66:3] } ;
  assign MUX_ram_word64_set$a_put_3__VAL_2 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       { IF_ram_state_and_ctag_cset_b_read__96_BIT_45_0_ETC___d770,
		 IF_NOT_ram_state_and_ctag_cset_b_read__96_BIT__ETC___d771 } :
	       { IF_ram_state_and_ctag_cset_b_read__96_BIT_45_0_ETC___d838,
		 IF_NOT_ram_state_and_ctag_cset_b_read__96_BIT__ETC___d839 } ;
  assign MUX_ram_word64_set$b_put_2__VAL_2 = rg_word64_set_in_cache + 9'd1 ;
  assign MUX_ram_word64_set$b_put_2__VAL_4 = { rg_addr[11:5], 2'd0 } ;
  assign MUX_rg_cset_in_cache$write_1__VAL_1 = rg_cset_in_cache + 7'd1 ;
  assign MUX_rg_exc_code$write_1__VAL_1 = (req_op == 2'd0) ? 4'd4 : 4'd6 ;
  assign MUX_rg_exc_code$write_1__VAL_5 =
	     (master_xactor_f_rd_data$D_OUT[2:1] == 2'b0) ?
	       exc_code___1__h6444 :
	       access_exc_code__h2597 ;
  assign MUX_rg_ld_val$write_1__VAL_2 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       x__h21605 :
	       IF_rg_f3_13_EQ_0b10_46_THEN_SEXT_IF_rg_f3_13_E_ETC___d707 ;
  assign MUX_rg_pa$write_1__VAL_1 = { 2'd0, req_addr } ;
  assign MUX_rg_state$write_1__VAL_2 =
	     NOT_req_f3_BITS_1_TO_0_383_EQ_0b0_384_385_AND__ETC___d1404 ?
	       4'd4 :
	       4'd3 ;
  assign MUX_rg_state$write_1__VAL_4 =
	     (master_xactor_f_rd_data$D_OUT[2:1] == 2'b0) ? 4'd14 : 4'd4 ;
  assign MUX_rg_state$write_1__VAL_11 =
	     (master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	      rg_error_during_refill) ?
	       4'd4 :
	       4'd10 ;
  assign MUX_rg_state$write_1__VAL_13 =
	     (master_xactor_f_rd_data$D_OUT[2:1] == 2'b0) ?
	       ((!_theResult____h28764[0] ||
		 !_theResult____h28764[1] && _theResult____h28764[2] ||
		 !_theResult____h28764[3] && !_theResult____h28764[1]) ?
		  4'd4 :
		  4'd10) :
	       4'd4 ;
  assign MUX_rg_state$write_1__VAL_14 =
	     (master_xactor_f_rd_data$D_OUT[2:1] == 2'b0) ?
	       ((!_theResult____h28764[0] ||
		 !_theResult____h28764[1] && _theResult____h28764[2]) ?
		  4'd4 :
		  ((!_theResult____h28764[3] && !_theResult____h28764[1]) ?
		     4'd7 :
		     ((_theResult____h28764[19:10] == 10'd0) ?
			4'd10 :
			4'd4))) :
	       4'd4 ;
  assign MUX_rg_state$write_1__VAL_16 =
	     (rg_priv_9_ULE_0b1___d90 && rg_satp[31] && !tlb$lookup[68]) ?
	       4'd5 :
	       IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d437 ;

  // inlined wires
  assign dw_valid$whas =
	     (WILL_FIRE_RL_rl_io_read_rsp ||
	      WILL_FIRE_RL_rl_io_AMO_read_rsp) &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d501 ||
	     WILL_FIRE_RL_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_rl_ST_AMO_response ;
  assign ctr_wr_rsps_pending_crg$port0__write_1 =
	     ctr_wr_rsps_pending_crg + 4'd1 ;
  assign ctr_wr_rsps_pending_crg$port1__write_1 = b__h28399 - 4'd1 ;
  assign ctr_wr_rsps_pending_crg$port2__read =
	     CAN_FIRE_RL_rl_discard_write_rsp ?
	       ctr_wr_rsps_pending_crg$port1__write_1 :
	       b__h28399 ;
  assign ctr_wr_rsps_pending_crg$EN_port2__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign ctr_wr_rsps_pending_crg$port3__read =
	     ctr_wr_rsps_pending_crg$EN_port2__write ?
	       4'd0 :
	       ctr_wr_rsps_pending_crg$port2__read ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_set_verbosity ;

  // register ctr_wr_rsps_pending_crg
  assign ctr_wr_rsps_pending_crg$D_IN = ctr_wr_rsps_pending_crg$port3__read ;
  assign ctr_wr_rsps_pending_crg$EN = 1'b1 ;

  // register rg_addr
  assign rg_addr$D_IN = req_addr ;
  assign rg_addr$EN = EN_req ;

  // register rg_amo_funct7
  assign rg_amo_funct7$D_IN = req_amo_funct7 ;
  assign rg_amo_funct7$EN = EN_req ;

  // register rg_cset_in_cache
  assign rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_rl_reset ?
	       MUX_rg_cset_in_cache$write_1__VAL_1 :
	       7'd0 ;
  assign rg_cset_in_cache$EN =
	     WILL_FIRE_RL_rl_reset || WILL_FIRE_RL_rl_start_reset ;

  // register rg_error_during_refill
  assign rg_error_during_refill$D_IN =
	     MUX_rg_error_during_refill$write_1__SEL_1 ;
  assign rg_error_during_refill$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_exc_code
  always@(MUX_rg_exc_code$write_1__SEL_1 or
	  MUX_rg_exc_code$write_1__VAL_1 or
	  MUX_rg_exc_code$write_1__SEL_2 or
	  MUX_rg_exc_code$write_1__SEL_3 or
	  MUX_rg_error_during_refill$write_1__SEL_1 or
	  access_exc_code__h2597 or
	  MUX_rg_exc_code$write_1__SEL_5 or
	  MUX_rg_exc_code$write_1__VAL_5 or
	  MUX_rg_exc_code$write_1__SEL_6 or
	  MUX_rg_exc_code$write_1__SEL_7 or x1_avValue_exc_code__h6046)
  case (1'b1)
    MUX_rg_exc_code$write_1__SEL_1:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_1;
    MUX_rg_exc_code$write_1__SEL_2: rg_exc_code$D_IN = 4'd7;
    MUX_rg_exc_code$write_1__SEL_3: rg_exc_code$D_IN = 4'd5;
    MUX_rg_error_during_refill$write_1__SEL_1:
	rg_exc_code$D_IN = access_exc_code__h2597;
    MUX_rg_exc_code$write_1__SEL_5:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_5;
    MUX_rg_exc_code$write_1__SEL_6:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_5;
    MUX_rg_exc_code$write_1__SEL_7:
	rg_exc_code$D_IN = x1_avValue_exc_code__h6046;
    default: rg_exc_code$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign rg_exc_code$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d155 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_383_EQ_0b0_384_385_AND__ETC___d1404 ||
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     NOT_IF_rg_pte_pa_37_BIT_2_38_THEN_master_xacto_ETC___d965 ||
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     (!_theResult____h28764[0] ||
	      !_theResult____h28764[1] && _theResult____h28764[2] ||
	      !_theResult____h28764[3] && !_theResult____h28764[1] ||
	      master_xactor_f_rd_data$D_OUT[2:1] != 2'b0) ;

  // register rg_f3
  assign rg_f3$D_IN = req_f3 ;
  assign rg_f3$EN = EN_req ;

  // register rg_ld_val
  always@(MUX_dw_output_ld_val$wset_1__SEL_2 or
	  new_ld_val__h36563 or
	  MUX_rg_ld_val$write_1__SEL_2 or
	  MUX_rg_ld_val$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  ld_val__h34357 or WILL_FIRE_RL_rl_io_AMO_SC_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_output_ld_val$wset_1__SEL_2: rg_ld_val$D_IN = new_ld_val__h36563;
      MUX_rg_ld_val$write_1__SEL_2:
	  rg_ld_val$D_IN = MUX_rg_ld_val$write_1__VAL_2;
      WILL_FIRE_RL_rl_io_read_rsp: rg_ld_val$D_IN = ld_val__h34357;
      WILL_FIRE_RL_rl_io_AMO_SC_req: rg_ld_val$D_IN = 64'd1;
      default: rg_ld_val$D_IN = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_ld_val$EN =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d703 ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_io_AMO_SC_req ;

  // register rg_lower_word32
  assign rg_lower_word32$D_IN = 32'h0 ;
  assign rg_lower_word32$EN = 1'b0 ;

  // register rg_lower_word32_full
  assign rg_lower_word32_full$D_IN = 1'd0 ;
  assign rg_lower_word32_full$EN =
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_lrsc_pa
  assign rg_lrsc_pa$D_IN = x1_avValue_pa__h6045 ;
  assign rg_lrsc_pa$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (!rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d675 ;

  // register rg_lrsc_valid
  assign rg_lrsc_valid$D_IN =
	     MUX_rg_lrsc_valid$write_1__SEL_2 &&
	     rg_op_15_EQ_0_16_OR_rg_op_15_EQ_2_18_AND_rg_am_ETC___d495 ;
  assign rg_lrsc_valid$EN =
	     WILL_FIRE_RL_rl_io_read_req && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d494 ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_mstatus_MXR
  assign rg_mstatus_MXR$D_IN = req_mstatus_MXR ;
  assign rg_mstatus_MXR$EN = EN_req ;

  // register rg_op
  assign rg_op$D_IN = req_op ;
  assign rg_op$EN = EN_req ;

  // register rg_pa
  assign rg_pa$D_IN =
	     EN_req ? MUX_rg_pa$write_1__VAL_1 : x1_avValue_pa__h6045 ;
  assign rg_pa$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d457 ||
	     EN_req ;

  // register rg_priv
  assign rg_priv$D_IN = req_priv ;
  assign rg_priv$EN = EN_req ;

  // register rg_pte_pa
  assign rg_pte_pa$D_IN =
	     MUX_master_xactor_f_rd_addr$enq_1__SEL_1 ?
	       lev_0_pte_pa__h29410 :
	       lev_1_pte_pa__h28498 ;
  assign rg_pte_pa$EN =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     _theResult____h28764[0] &&
	     !_theResult____h28764[2] &&
	     !_theResult____h28764[3] &&
	     !_theResult____h28764[1] ||
	     WILL_FIRE_RL_rl_start_tlb_refill ;

  // register rg_satp
  assign rg_satp$D_IN = req_satp ;
  assign rg_satp$EN = EN_req ;

  // register rg_sstatus_SUM
  assign rg_sstatus_SUM$D_IN = req_sstatus_SUM ;
  assign rg_sstatus_SUM$EN = EN_req ;

  // register rg_st_amo_val
  assign rg_st_amo_val$D_IN = EN_req ? req_st_value : new_st_val__h25154 ;
  assign rg_st_amo_val$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d917 ||
	     EN_req ;

  // register rg_state
  always@(EN_tlb_flush or
	  EN_req or
	  MUX_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_start_reset or
	  WILL_FIRE_RL_rl_io_AMO_read_rsp or
	  MUX_rg_state$write_1__VAL_4 or
	  WILL_FIRE_RL_rl_io_AMO_op_req or
	  WILL_FIRE_RL_rl_io_AMO_SC_req or
	  WILL_FIRE_RL_rl_io_write_req or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  WILL_FIRE_RL_rl_io_read_req or
	  WILL_FIRE_RL_rl_rereq or
	  MUX_rg_state$write_1__SEL_11 or
	  MUX_rg_state$write_1__VAL_11 or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  WILL_FIRE_RL_rl_ptw_level_0 or
	  MUX_rg_state$write_1__VAL_13 or
	  WILL_FIRE_RL_rl_ptw_level_1 or
	  MUX_rg_state$write_1__VAL_14 or
	  WILL_FIRE_RL_rl_start_tlb_refill or
	  MUX_rg_state$write_1__SEL_16 or
	  MUX_rg_state$write_1__VAL_16 or MUX_rg_state$write_1__SEL_17)
  case (1'b1)
    EN_tlb_flush: rg_state$D_IN = 4'd2;
    EN_req: rg_state$D_IN = MUX_rg_state$write_1__VAL_2;
    WILL_FIRE_RL_rl_start_reset: rg_state$D_IN = 4'd1;
    WILL_FIRE_RL_rl_io_AMO_read_rsp:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_4;
    WILL_FIRE_RL_rl_io_AMO_op_req: rg_state$D_IN = 4'd15;
    WILL_FIRE_RL_rl_io_AMO_SC_req || WILL_FIRE_RL_rl_io_write_req:
	rg_state$D_IN = 4'd11;
    WILL_FIRE_RL_rl_io_read_rsp: rg_state$D_IN = MUX_rg_state$write_1__VAL_4;
    WILL_FIRE_RL_rl_io_read_req: rg_state$D_IN = 4'd13;
    WILL_FIRE_RL_rl_rereq: rg_state$D_IN = 4'd3;
    MUX_rg_state$write_1__SEL_11:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_11;
    WILL_FIRE_RL_rl_start_cache_refill: rg_state$D_IN = 4'd9;
    WILL_FIRE_RL_rl_ptw_level_0: rg_state$D_IN = MUX_rg_state$write_1__VAL_13;
    WILL_FIRE_RL_rl_ptw_level_1: rg_state$D_IN = MUX_rg_state$write_1__VAL_14;
    WILL_FIRE_RL_rl_start_tlb_refill: rg_state$D_IN = 4'd6;
    MUX_rg_state$write_1__SEL_16:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_16;
    MUX_rg_state$write_1__SEL_17: rg_state$D_IN = 4'd2;
    default: rg_state$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] == 2'd3 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d432 ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_rl_ptw_level_1 ||
	     WILL_FIRE_RL_rl_ptw_level_0 ||
	     EN_req ||
	     WILL_FIRE_RL_rl_start_reset ||
	     EN_tlb_flush ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_tlb_refill ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_io_AMO_SC_req ||
	     WILL_FIRE_RL_rl_io_write_req ||
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_io_AMO_op_req ;

  // register rg_victim_way
  assign rg_victim_way$D_IN = tmp__h30786[0] ;
  assign rg_victim_way$EN = WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_word64_set_in_cache
  assign rg_word64_set_in_cache$D_IN =
	     MUX_ram_word64_set$b_put_1__SEL_2 ?
	       MUX_ram_word64_set$b_put_2__VAL_2 :
	       MUX_ram_word64_set$b_put_2__VAL_4 ;
  assign rg_word64_set_in_cache$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule f_fabric_write_reqs
  always@(MUX_dw_output_ld_val$wset_1__SEL_2 or
	  MUX_f_fabric_write_reqs$enq_1__VAL_1 or
	  MUX_f_fabric_write_reqs$enq_1__SEL_2 or
	  MUX_f_fabric_write_reqs$enq_1__VAL_2 or
	  WILL_FIRE_RL_rl_writeback_updated_PTE or
	  MUX_f_fabric_write_reqs$enq_1__VAL_3 or
	  WILL_FIRE_RL_rl_io_write_req or
	  MUX_f_fabric_write_reqs$enq_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_output_ld_val$wset_1__SEL_2:
	  f_fabric_write_reqs$D_IN = MUX_f_fabric_write_reqs$enq_1__VAL_1;
      MUX_f_fabric_write_reqs$enq_1__SEL_2:
	  f_fabric_write_reqs$D_IN = MUX_f_fabric_write_reqs$enq_1__VAL_2;
      WILL_FIRE_RL_rl_writeback_updated_PTE:
	  f_fabric_write_reqs$D_IN = MUX_f_fabric_write_reqs$enq_1__VAL_3;
      WILL_FIRE_RL_rl_io_write_req:
	  f_fabric_write_reqs$D_IN = MUX_f_fabric_write_reqs$enq_1__VAL_4;
      default: f_fabric_write_reqs$D_IN =
		   101'h0AAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_fabric_write_reqs$ENQ =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d847 ||
	     WILL_FIRE_RL_rl_writeback_updated_PTE ||
	     WILL_FIRE_RL_rl_io_write_req ;
  assign f_fabric_write_reqs$DEQ = CAN_FIRE_RL_rl_fabric_send_write_req ;
  assign f_fabric_write_reqs$CLR = 1'b0 ;

  // submodule f_pte_writebacks
  assign f_pte_writebacks$D_IN = { tlb$lookup[33:0], x1_avValue_pte__h6048 } ;
  assign f_pte_writebacks$ENQ = MUX_tlb$insert_1__SEL_1 ;
  assign f_pte_writebacks$DEQ = WILL_FIRE_RL_rl_writeback_updated_PTE ;
  assign f_pte_writebacks$CLR = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign f_reset_reqs$ENQ =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign f_reset_reqs$DEQ =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = f_reset_reqs$D_OUT ;
  assign f_reset_rsps$ENQ =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ;
  assign f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule master_xactor_f_rd_addr
  always@(MUX_master_xactor_f_rd_addr$enq_1__SEL_1 or
	  MUX_master_xactor_f_rd_addr$enq_1__VAL_1 or
	  MUX_master_xactor_f_rd_addr$enq_1__SEL_2 or
	  MUX_master_xactor_f_rd_addr$enq_1__VAL_2 or
	  WILL_FIRE_RL_rl_start_tlb_refill or
	  MUX_master_xactor_f_rd_addr$enq_1__VAL_3 or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_master_xactor_f_rd_addr$enq_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_master_xactor_f_rd_addr$enq_1__SEL_1:
	  master_xactor_f_rd_addr$D_IN =
	      MUX_master_xactor_f_rd_addr$enq_1__VAL_1;
      MUX_master_xactor_f_rd_addr$enq_1__SEL_2:
	  master_xactor_f_rd_addr$D_IN =
	      MUX_master_xactor_f_rd_addr$enq_1__VAL_2;
      WILL_FIRE_RL_rl_start_tlb_refill:
	  master_xactor_f_rd_addr$D_IN =
	      MUX_master_xactor_f_rd_addr$enq_1__VAL_3;
      WILL_FIRE_RL_rl_start_cache_refill:
	  master_xactor_f_rd_addr$D_IN =
	      MUX_master_xactor_f_rd_addr$enq_1__VAL_4;
      default: master_xactor_f_rd_addr$D_IN =
		   97'h0AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign master_xactor_f_rd_addr$ENQ =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     _theResult____h28764[0] &&
	     !_theResult____h28764[2] &&
	     !_theResult____h28764[3] &&
	     !_theResult____h28764[1] ||
	     WILL_FIRE_RL_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_start_tlb_refill ||
	     WILL_FIRE_RL_rl_start_cache_refill ;
  assign master_xactor_f_rd_addr$DEQ =
	     master_xactor_f_rd_addr$EMPTY_N && mem_master_arready ;
  assign master_xactor_f_rd_addr$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule master_xactor_f_rd_data
  assign master_xactor_f_rd_data$D_IN =
	     { mem_master_rid,
	       mem_master_rdata,
	       mem_master_rresp,
	       mem_master_rlast } ;
  assign master_xactor_f_rd_data$ENQ =
	     mem_master_rvalid && master_xactor_f_rd_data$FULL_N ;
  assign master_xactor_f_rd_data$DEQ =
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop ||
	     WILL_FIRE_RL_rl_ptw_level_0 ||
	     WILL_FIRE_RL_rl_ptw_level_1 ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp ;
  assign master_xactor_f_rd_data$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule master_xactor_f_wr_addr
  assign master_xactor_f_wr_addr$D_IN =
	     { 4'd0,
	       mem_req_wr_addr_awaddr__h2814,
	       8'd0,
	       x__h2861,
	       18'd65536 } ;
  assign master_xactor_f_wr_addr$ENQ = CAN_FIRE_RL_rl_fabric_send_write_req ;
  assign master_xactor_f_wr_addr$DEQ =
	     master_xactor_f_wr_addr$EMPTY_N && mem_master_awready ;
  assign master_xactor_f_wr_addr$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule master_xactor_f_wr_data
  assign master_xactor_f_wr_data$D_IN =
	     { mem_req_wr_data_wdata__h3040,
	       mem_req_wr_data_wstrb__h3041,
	       1'd1 } ;
  assign master_xactor_f_wr_data$ENQ = CAN_FIRE_RL_rl_fabric_send_write_req ;
  assign master_xactor_f_wr_data$DEQ =
	     master_xactor_f_wr_data$EMPTY_N && mem_master_wready ;
  assign master_xactor_f_wr_data$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule master_xactor_f_wr_resp
  assign master_xactor_f_wr_resp$D_IN = { mem_master_bid, mem_master_bresp } ;
  assign master_xactor_f_wr_resp$ENQ =
	     mem_master_bvalid && master_xactor_f_wr_resp$FULL_N ;
  assign master_xactor_f_wr_resp$DEQ = CAN_FIRE_RL_rl_discard_write_rsp ;
  assign master_xactor_f_wr_resp$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule ram_state_and_ctag_cset
  assign ram_state_and_ctag_cset$ADDRA =
	     MUX_ram_state_and_ctag_cset$a_put_1__SEL_1 ?
	       rg_addr[11:5] :
	       rg_cset_in_cache ;
  assign ram_state_and_ctag_cset$ADDRB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[11:5] :
	       rg_addr[11:5] ;
  assign ram_state_and_ctag_cset$DIA =
	     MUX_ram_state_and_ctag_cset$a_put_1__SEL_1 ?
	       MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       46'h1555552AAAAA ;
  assign ram_state_and_ctag_cset$DIB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       46'h2AAAAAAAAAAA /* unspecified value */  :
	       46'h2AAAAAAAAAAA /* unspecified value */  ;
  assign ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] == 2'd0 &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_reset ;
  assign ram_state_and_ctag_cset$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_383_EQ_0b0_384_OR_req_f3_BI_ETC___d1413 ||
	     WILL_FIRE_RL_rl_rereq ;

  // submodule ram_word64_set
  assign ram_word64_set$ADDRA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       rg_word64_set_in_cache :
	       rg_addr[11:3] ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  MUX_ram_word64_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_rl_rereq or
	  rg_addr or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_ram_word64_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$ADDRB = req_addr[11:3];
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_2;
      WILL_FIRE_RL_rl_rereq: ram_word64_set$ADDRB = rg_addr[11:3];
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_4;
      default: ram_word64_set$ADDRB = 9'b010101010 /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$DIA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       MUX_ram_word64_set$a_put_3__VAL_1 :
	       MUX_ram_word64_set$a_put_3__VAL_2 ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_rl_rereq or WILL_FIRE_RL_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$DIB =
	      128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$DIB =
	      128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_rereq:
	  ram_word64_set$DIB =
	      128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$DIB =
	      128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: ram_word64_set$DIB =
		   128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$WEA = 1'd1 ;
  assign ram_word64_set$WEB = 1'd0 ;
  assign ram_word64_set$ENA =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d716 ;
  assign ram_word64_set$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_383_EQ_0b0_384_OR_req_f3_BI_ETC___d1413 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = { 30'd0, x1_avValue_pa__h6045 } ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // submodule tlb
  assign tlb$insert_asid = rg_satp[30:22] ;
  always@(MUX_tlb$insert_1__SEL_1 or
	  tlb$lookup or MUX_tlb$insert_1__SEL_2 or MUX_tlb$insert_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_tlb$insert_1__SEL_1: tlb$insert_level = tlb$lookup[35:34];
      MUX_tlb$insert_1__SEL_2: tlb$insert_level = 2'd1;
      MUX_tlb$insert_1__SEL_3: tlb$insert_level = 2'd0;
      default: tlb$insert_level = 2'b10 /* unspecified value */ ;
    endcase
  end
  always@(MUX_tlb$insert_1__SEL_1 or
	  x1_avValue_pte__h6048 or
	  MUX_tlb$insert_1__SEL_2 or
	  _theResult____h28764 or MUX_tlb$insert_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_tlb$insert_1__SEL_1: tlb$insert_pte = x1_avValue_pte__h6048;
      MUX_tlb$insert_1__SEL_2: tlb$insert_pte = _theResult____h28764;
      MUX_tlb$insert_1__SEL_3: tlb$insert_pte = _theResult____h28764;
      default: tlb$insert_pte = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign tlb$insert_pte_pa =
	     MUX_tlb$insert_1__SEL_1 ? tlb$lookup[33:0] : rg_pte_pa ;
  assign tlb$insert_vpn = rg_addr[31:12] ;
  assign tlb$lookup_asid = rg_satp[30:22] ;
  assign tlb$lookup_vpn = rg_addr[31:12] ;
  assign tlb$EN_flush = WILL_FIRE_RL_rl_start_reset || EN_tlb_flush ;
  assign tlb$EN_insert =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d414 ||
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d997 ||
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     _theResult____h28764[0] &&
	     (_theResult____h28764[1] || !_theResult____h28764[2]) &&
	     (_theResult____h28764[3] || _theResult____h28764[1]) ;

  // remaining internal signals
  assign IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d330 =
	     (x1_avValue_pa__h6045[2:0] == 3'h0) ?
	       CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_13_ETC__q29 :
	       NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d329 ;
  assign IF_NOT_ram_state_and_ctag_cset_b_read__96_BIT__ETC___d433 =
	     ((!ram_state_and_ctag_cset$DOB[22] ||
	       !ram_state_and_ctag_cset_b_read__96_BITS_21_TO__ETC___d201) &&
	      (!ram_state_and_ctag_cset$DOB[45] ||
	       !ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207)) ?
	       4'd8 :
	       4'd11 ;
  assign IF_NOT_ram_state_and_ctag_cset_b_read__96_BIT__ETC___d771 =
	     (!ram_state_and_ctag_cset$DOB[45] ||
	      !ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207) ?
	       n__h22384 :
	       ram_word64_set$DOB[63:0] ;
  assign IF_NOT_ram_state_and_ctag_cset_b_read__96_BIT__ETC___d839 =
	     (!ram_state_and_ctag_cset$DOB[45] ||
	      !ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207) ?
	       n__h25318 :
	       ram_word64_set$DOB[63:0] ;
  assign IF_ram_state_and_ctag_cset_b_read__96_BIT_45_0_ETC___d770 =
	     (ram_state_and_ctag_cset$DOB[45] &&
	      ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207) ?
	       n__h22384 :
	       ram_word64_set$DOB[127:64] ;
  assign IF_ram_state_and_ctag_cset_b_read__96_BIT_45_0_ETC___d838 =
	     (ram_state_and_ctag_cset$DOB[45] &&
	      ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207) ?
	       n__h25318 :
	       ram_word64_set$DOB[127:64] ;
  assign IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_1_E_ETC___d654 =
	     (rg_addr[2:0] == 3'h0) ? 64'd1 : 64'd0 ;
  assign IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_IF__ETC___d1297 =
	     (rg_addr[2:0] == 3'h0) ? ld_val__h34357 : 64'd0 ;
  assign IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_NOT_ETC___d251 =
	     (rg_addr[2:0] == 3'h0) ?
	       NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d231 &&
	       NOT_ram_state_and_ctag_cset_b_read__96_BIT_45__ETC___d232 :
	       rg_addr[2:0] != 3'h4 ||
	       NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d231 &&
	       NOT_ram_state_and_ctag_cset_b_read__96_BIT_45__ETC___d232 ;
  assign IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_ram_ETC___d639 =
	     (rg_addr[2:0] == 3'h0) ? word64__h7467 : 64'd0 ;
  assign IF_rg_f3_13_EQ_0b0_14_THEN_IF_rg_addr_9_BITS_2_ETC__q32 =
	     IF_rg_f3_13_EQ_0b0_14_THEN_IF_rg_addr_9_BITS_2_ETC___d646[31:0] ;
  assign IF_rg_f3_13_EQ_0b10_46_THEN_SEXT_rg_st_amo_val_ETC___d776 =
	     (rg_f3 == 3'b010) ?
	       { {32{rg_st_amo_val_BITS_31_TO_0__q33[31]}},
		 rg_st_amo_val_BITS_31_TO_0__q33 } :
	       rg_st_amo_val ;
  assign IF_rg_op_15_EQ_0_16_OR_rg_op_15_EQ_2_18_AND_rg_ETC___d344 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d261 :
	       IF_rg_op_15_EQ_1_62_OR_rg_op_15_EQ_2_18_AND_rg_ETC___d343 ;
  assign IF_rg_op_15_EQ_0_16_OR_rg_op_15_EQ_2_18_AND_rg_ETC___d435 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       4'd8 :
	       IF_rg_op_15_EQ_1_62_OR_rg_op_15_EQ_2_18_AND_rg_ETC___d434 ;
  assign IF_rg_op_15_EQ_1_62_OR_rg_op_15_EQ_2_18_AND_rg_ETC___d343 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       rg_op_15_EQ_2_18_AND_rg_amo_funct7_20_BITS_6_T_ETC___d283 :
	       NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d342 ;
  assign IF_rg_op_15_EQ_1_62_OR_rg_op_15_EQ_2_18_AND_rg_ETC___d434 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       4'd11 :
	       IF_NOT_ram_state_and_ctag_cset_b_read__96_BIT__ETC___d433 ;
  assign IF_rg_op_15_EQ_1_62_OR_rg_op_15_EQ_2_18_AND_rg_ETC___d848 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       rg_st_amo_val :
	       new_st_val__h25154 ;
  assign IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d437 =
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d155 ?
	       4'd4 :
	       ((dmem_not_imem && !soc_map$m_is_mem_addr) ?
		  4'd12 :
		  IF_rg_op_15_EQ_0_16_OR_rg_op_15_EQ_2_18_AND_rg_ETC___d435) ;
  assign IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d477 =
	     x1_avValue_pa__h6045 == rg_lrsc_pa ;
  assign NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d319 =
	     x1_avValue_pa__h6045[2:0] != 3'h7 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_13_ETC__q29 ;
  assign NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d325 =
	     x1_avValue_pa__h6045[2:0] != 3'h6 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_13_ETC__q29 ;
  assign NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d329 =
	     x1_avValue_pa__h6045[2:0] != 3'h4 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_13_ETC__q29 ;
  assign NOT_IF_rg_pte_pa_37_BIT_2_38_THEN_master_xacto_ETC___d965 =
	     !_theResult____h28764[0] ||
	     !_theResult____h28764[1] && _theResult____h28764[2] ||
	     (_theResult____h28764[3] || _theResult____h28764[1]) &&
	     _theResult____h28764[19:10] != 10'd0 ||
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ;
  assign NOT_cfg_verbosity_read__0_ULE_2_055___d1056 = cfg_verbosity > 4'd2 ;
  assign NOT_cfg_verbosity_read__0_ULT_2_41___d442 = cfg_verbosity >= 4'd2 ;
  assign NOT_dmem_not_imem_30_AND_rg_op_15_EQ_0_16_OR_r_ETC___d377 =
	     !dmem_not_imem &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     tlb$lookup[39] ;
  assign NOT_dmem_not_imem_30_OR_NOT_rg_op_15_EQ_0_16_1_ETC___d137 =
	     !dmem_not_imem ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ||
	     !tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d135 ;
  assign NOT_dmem_not_imem_30_OR_soc_map_m_is_mem_addr__ETC___d471 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__96_BITS_21_TO__ETC___d201 &&
	     ram_state_and_ctag_cset$DOB[45] &&
	     ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207 ;
  assign NOT_dmem_not_imem_30_OR_soc_map_m_is_mem_addr__ETC___d667 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset_b_read__96_BIT_22_97_A_ETC___d665 ;
  assign NOT_dmem_not_imem_30_OR_soc_map_m_is_mem_addr__ETC___d679 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     ram_state_and_ctag_cset_b_read__96_BIT_22_97_A_ETC___d665 ;
  assign NOT_dmem_not_imem_30_OR_soc_map_m_is_mem_addr__ETC___d684 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d682 ;
  assign NOT_dmem_not_imem_30_OR_soc_map_m_is_mem_addr__ETC___d692 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d689 ;
  assign NOT_dmem_not_imem_30_OR_soc_map_m_is_mem_addr__ETC___d701 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	      NOT_rg_op_15_EQ_1_62_85_AND_ram_state_and_ctag_ETC___d698) ;
  assign NOT_dmem_not_imem_30_OR_soc_map_m_is_mem_addr__ETC___d714 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_15_EQ_1_62_OR_rg_op_15_EQ_2_18_AND_rg_am_ETC___d712 ;
  assign NOT_dmem_not_imem_30_OR_soc_map_m_is_mem_addr__ETC___d851 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op == 2'd1 &&
	     IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d477 &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign NOT_dmem_not_imem_30_OR_soc_map_m_is_mem_addr__ETC___d869 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign NOT_dmem_not_imem_30_OR_soc_map_m_is_mem_addr__ETC___d915 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_15_EQ_1_62_85_AND_NOT_rg_op_15_EQ_2__ETC___d711 ;
  assign NOT_master_xactor_f_rd_data_first__33_BITS_2_T_ETC___d958 =
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     !_theResult____h28764[0] ||
	     !_theResult____h28764[1] && _theResult____h28764[2] ||
	     ((!_theResult____h28764[3] && !_theResult____h28764[1]) ?
		master_xactor_f_rd_addr$FULL_N :
		_theResult____h28764[19:10] != 10'd0 || tlb$RDY_insert) ;
  assign NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d231 =
	     !ram_state_and_ctag_cset$DOB[22] || !rg_priv_9_ULE_0b1___d90 ||
	     !rg_satp[31] ||
	     tlb$RDY_lookup ;
  assign NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d261 =
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__96_BITS_21_TO__ETC___d201) &&
	     (!ram_state_and_ctag_cset$DOB[45] ||
	      !ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207) ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	     IF_rg_f3_13_EQ_0b0_14_OR_rg_f3_13_EQ_0b100_15__ETC___d259 ;
  assign NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d281 =
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__96_BITS_21_TO__ETC___d201) &&
	     (!ram_state_and_ctag_cset$DOB[45] ||
	      !ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207) ||
	     (!ram_state_and_ctag_cset$DOB[45] ||
	      !ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207 ||
	      IF_rg_f3_13_EQ_0b0_14_OR_rg_f3_13_EQ_0b1_38_OR_ETC___d275) &&
	     (ram_state_and_ctag_cset$DOB[45] &&
	      ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207 ||
	      IF_rg_f3_13_EQ_0b0_14_OR_rg_f3_13_EQ_0b1_38_OR_ETC___d275) ;
  assign NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d342 =
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__96_BITS_21_TO__ETC___d201) &&
	     (!ram_state_and_ctag_cset$DOB[45] ||
	      !ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207) ||
	     f_fabric_write_reqs$FULL_N &&
	     rg_amo_funct7_20_BITS_6_TO_2_21_EQ_0b1_84_OR_I_ETC___d340 ;
  assign NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d479 =
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__96_BITS_21_TO__ETC___d201) &&
	     (!ram_state_and_ctag_cset$DOB[45] ||
	      !ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d477 ;
  assign NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d682 =
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__96_BITS_21_TO__ETC___d201) &&
	     (!ram_state_and_ctag_cset$DOB[45] ||
	      !ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207) &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d689 =
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__96_BITS_21_TO__ETC___d201) &&
	     (!ram_state_and_ctag_cset$DOB[45] ||
	      !ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207) &&
	     IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d477 &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign NOT_ram_state_and_ctag_cset_b_read__96_BIT_45__ETC___d232 =
	     !ram_state_and_ctag_cset$DOB[45] || !rg_priv_9_ULE_0b1___d90 ||
	     !rg_satp[31] ||
	     tlb$RDY_lookup ;
  assign NOT_req_f3_BITS_1_TO_0_383_EQ_0b0_384_385_AND__ETC___d1404 =
	     req_f3[1:0] != 2'b0 && (req_f3[1:0] != 2'b01 || req_addr[0]) &&
	     (req_f3[1:0] != 2'b10 || req_addr[1:0] != 2'b0) &&
	     (req_f3[1:0] != 2'b11 || req_addr[2:0] != 3'b0) ;
  assign NOT_rg_op_15_EQ_0_16_17_AND_NOT_rg_op_15_EQ_2__ETC___d428 =
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_66_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d267) ;
  assign NOT_rg_op_15_EQ_1_62_85_AND_NOT_rg_op_15_EQ_2__ETC___d711 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     (ram_state_and_ctag_cset$DOB[22] &&
	      ram_state_and_ctag_cset_b_read__96_BITS_21_TO__ETC___d201 ||
	      ram_state_and_ctag_cset$DOB[45] &&
	      ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207) ;
  assign NOT_rg_op_15_EQ_1_62_85_AND_ram_state_and_ctag_ETC___d698 =
	     rg_op != 2'd1 &&
	     (ram_state_and_ctag_cset$DOB[22] &&
	      ram_state_and_ctag_cset_b_read__96_BITS_21_TO__ETC___d201 ||
	      ram_state_and_ctag_cset$DOB[45] &&
	      ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207) ;
  assign NOT_rg_op_15_EQ_2_18_19_OR_NOT_rg_amo_funct7_2_ETC___d709 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_66_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d267) &&
	     (ram_state_and_ctag_cset$DOB[22] &&
	      ram_state_and_ctag_cset_b_read__96_BITS_21_TO__ETC___d201 ||
	      ram_state_and_ctag_cset$DOB[45] &&
	      ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207) ;
  assign NOT_rg_op_15_EQ_2_18_19_OR_NOT_rg_amo_funct7_2_ETC___d872 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_66_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d267) &&
	     ram_state_and_ctag_cset_b_read__96_BIT_22_97_A_ETC___d665 ;
  assign NOT_rg_op_15_EQ_2_18_19_OR_NOT_rg_amo_funct7_2_ETC___d878 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_66_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d267) &&
	     NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d682 ;
  assign NOT_rg_op_15_EQ_2_18_19_OR_NOT_rg_amo_funct7_2_ETC___d884 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_66_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d267) &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign NOT_rg_priv_9_EQ_0b0_05_70_OR_tlb_lookup_rg_sa_ETC___d384 =
	     (rg_priv != 2'b0 || tlb$lookup[40]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[40] || rg_sstatus_SUM) &&
	     (NOT_dmem_not_imem_30_AND_rg_op_15_EQ_0_16_OR_r_ETC___d377 ||
	      dmem_not_imem_AND_rg_op_15_EQ_0_16_OR_rg_op_15_ETC___d379 ||
	      dmem_not_imem && rg_op != 2'd0 &&
	      (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	      tlb$lookup[38]) ;
  assign NOT_rg_priv_9_EQ_0b0_05_70_OR_tlb_lookup_rg_sa_ETC___d407 =
	     (rg_priv != 2'b0 || tlb$lookup[40]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[40] || rg_sstatus_SUM) &&
	     dmem_not_imem &&
	     tlb$lookup[38] ;
  assign NOT_rg_priv_9_EQ_0b0_05_70_OR_tlb_lookup_rg_sa_ETC___d445 =
	     (rg_priv != 2'b0 || tlb$lookup[40]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[40] || rg_sstatus_SUM) &&
	     tlb$lookup[42] &&
	     !pte___2__h6542[7] &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ;
  assign NOT_rg_priv_9_EQ_0b0_05_70_OR_tlb_lookup_rg_sa_ETC___d661 =
	     (rg_priv != 2'b0 || tlb$lookup[40]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[40] || rg_sstatus_SUM) &&
	     (!dmem_not_imem && tlb$lookup[39] ||
	      dmem_not_imem &&
	      tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d135) ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d171 =
	     !rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || !tlb$lookup[68] ||
	     rg_priv_9_EQ_0b0_05_AND_NOT_tlb_lookup_rg_satp_ETC___d159 ||
	     NOT_tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_ad_ETC___d168 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d346 =
	     (NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d171 ||
	      tlb$RDY_insert && tlb$RDY_lookup && f_pte_writebacks$FULL_N) &&
	     (dmem_not_imem && !soc_map$m_is_mem_addr ||
	      IF_rg_op_15_EQ_0_16_OR_rg_op_15_EQ_2_18_AND_rg_ETC___d344) ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d389 =
	     !rg_priv_9_ULE_0b1___d90 || !rg_satp[31] ||
	     tlb$lookup[68] &&
	     NOT_rg_priv_9_EQ_0b0_05_70_OR_tlb_lookup_rg_sa_ETC___d384 &&
	     tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d386 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d404 =
	     !rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || !tlb$lookup[68] ||
	     rg_priv_9_EQ_0b0_05_AND_NOT_tlb_lookup_rg_satp_ETC___d159 ||
	     NOT_tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_ad_ETC___d168 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d456 =
	     !rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || !tlb$lookup[68] ||
	     NOT_rg_priv_9_EQ_0b0_05_70_OR_tlb_lookup_rg_sa_ETC___d384 &&
	     tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d386 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d457 =
	     (!rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d456 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d464 =
	     !rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || !tlb$lookup[68] ||
	     (rg_priv != 2'b0 || tlb$lookup[40]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[40] || rg_sstatus_SUM) &&
	     rg_op_15_EQ_0_16_OR_rg_op_15_EQ_2_18_AND_rg_am_ETC___d460 &&
	     tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d386 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d467 =
	     (!rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d464 &&
	     dmem_not_imem &&
	     !soc_map$m_is_mem_addr &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d473 =
	     (!rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d456 &&
	     NOT_dmem_not_imem_30_OR_soc_map_m_is_mem_addr__ETC___d471 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d494 =
	     (!rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d456 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op_15_EQ_0_16_OR_rg_op_15_EQ_2_18_AND_rg_am_ETC___d491 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d500 =
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d456 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     (rg_op_15_EQ_0_16_OR_rg_op_15_EQ_2_18_AND_rg_am_ETC___d495 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	      lrsc_result__h21595) ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d501 =
	     (!rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d500 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d664 =
	     !rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || !tlb$lookup[68] ||
	     NOT_rg_priv_9_EQ_0b0_05_70_OR_tlb_lookup_rg_sa_ETC___d661 &&
	     tlb$lookup[42] ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d669 =
	     (!rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d664 &&
	     NOT_dmem_not_imem_30_OR_soc_map_m_is_mem_addr__ETC___d667 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d675 =
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d664 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7_20_BITS_6_TO_2_21_EQ_0b10_22_AND_ETC___d672 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d681 =
	     (!rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d664 &&
	     NOT_dmem_not_imem_30_OR_soc_map_m_is_mem_addr__ETC___d679 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d686 =
	     (!rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d664 &&
	     NOT_dmem_not_imem_30_OR_soc_map_m_is_mem_addr__ETC___d684 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d694 =
	     (!rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d664 &&
	     NOT_dmem_not_imem_30_OR_soc_map_m_is_mem_addr__ETC___d692 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d697 =
	     !rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || !tlb$lookup[68] ||
	     NOT_rg_priv_9_EQ_0b0_05_70_OR_tlb_lookup_rg_sa_ETC___d407 &&
	     tlb$lookup[42] &&
	     tlb$lookup[43] ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d703 =
	     (!rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d697 &&
	     NOT_dmem_not_imem_30_OR_soc_map_m_is_mem_addr__ETC___d701 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d716 =
	     (!rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d697 &&
	     NOT_dmem_not_imem_30_OR_soc_map_m_is_mem_addr__ETC___d714 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d846 =
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d697 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op_15_EQ_1_62_OR_rg_op_15_EQ_2_18_AND_rg_am_ETC___d842 ||
	      NOT_rg_op_15_EQ_1_62_85_AND_NOT_rg_op_15_EQ_2__ETC___d711) ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d847 =
	     (!rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d846 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d853 =
	     (!rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d697 &&
	     NOT_dmem_not_imem_30_OR_soc_map_m_is_mem_addr__ETC___d851 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d859 =
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d697 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     rg_lrsc_valid &&
	     !rg_lrsc_pa_66_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d267 &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d865 =
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d697 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     !rg_lrsc_valid &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d871 =
	     (!rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d697 &&
	     NOT_dmem_not_imem_30_OR_soc_map_m_is_mem_addr__ETC___d869 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d876 =
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d697 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_15_EQ_2_18_19_OR_NOT_rg_amo_funct7_2_ETC___d872 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d877 =
	     (!rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d876 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d882 =
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d697 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_15_EQ_2_18_19_OR_NOT_rg_amo_funct7_2_ETC___d878 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d888 =
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d697 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_15_EQ_2_18_19_OR_NOT_rg_amo_funct7_2_ETC___d884 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d889 =
	     (!rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d888 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d894 =
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d697 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h21595 &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d895 =
	     (!rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d894 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d901 =
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d697 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d682 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d906 =
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d697 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset_b_read__96_BIT_22_97_A_ETC___d665 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d907 =
	     (!rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d906 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d912 =
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d697 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset_b_read__96_BIT_22_97_A_ETC___d908 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d917 =
	     (!rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d697 &&
	     NOT_dmem_not_imem_30_OR_soc_map_m_is_mem_addr__ETC___d915 ;
  assign NOT_tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_ad_ETC___d152 =
	     !tlb$lookup[42] ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     !tlb$lookup[43] ;
  assign NOT_tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_ad_ETC___d168 =
	     !tlb$lookup[42] || !tlb$lookup[43] || pte___2__h6542[7] ||
	     rg_op == 2'd0 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ;
  assign _theResult____h28764 =
	     rg_pte_pa[2] ?
	       master_xactor_f_rd_data$D_OUT[66:35] :
	       master_xactor_f_rd_data$D_OUT[34:3] ;
  assign _theResult___fst__h6133 =
	     tlb$lookup[68] ? _theResult___fst__h6205 : pa__h6033 ;
  assign _theResult___fst__h6205 =
	     (rg_priv_9_EQ_0b0_05_AND_NOT_tlb_lookup_rg_satp_ETC___d146 ||
	      NOT_tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_ad_ETC___d152) ?
	       pa__h6033 :
	       _theResult___fst__h6544 ;
  assign _theResult___snd_fst__h3048 =
	     f_fabric_write_reqs$D_OUT[63:0] << shift_bits__h2828 ;
  assign _theResult___snd_fst__h6135 =
	     tlb$lookup[68] ?
	       _theResult___snd_fst__h6207 :
	       tlb$lookup[67:36] ;
  assign _theResult___snd_fst__h6207 =
	     (rg_priv_9_EQ_0b0_05_AND_NOT_tlb_lookup_rg_satp_ETC___d146 ||
	      NOT_tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_ad_ETC___d152) ?
	       tlb$lookup[67:36] :
	       _theResult___snd_fst__h6682 ;
  assign _theResult___snd_fst__h6682 =
	     (!pte___2__h6542[7] && rg_op != 2'd0 &&
	      (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010)) ?
	       pte___1__h6759 :
	       pte___2__h6542 ;
  assign access_exc_code__h2597 =
	     dmem_not_imem ?
	       ((rg_op == 2'd0 ||
		 rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
		  4'd5 :
		  4'd7) :
	       4'd1 ;
  assign b__h28399 =
	     CAN_FIRE_RL_rl_fabric_send_write_req ?
	       ctr_wr_rsps_pending_crg$port0__write_1 :
	       ctr_wr_rsps_pending_crg ;
  assign cfg_verbosity_read__0_ULE_1___d41 = cfg_verbosity <= 4'd1 ;
  assign cline_addr__h30645 = { rg_pa[33:5], 5'd0 } ;
  assign cline_fabric_addr__h30646 = { 30'd0, cline_addr__h30645 } ;
  assign dmem_not_imem_AND_rg_op_15_EQ_0_16_OR_rg_op_15_ETC___d379 =
	     dmem_not_imem &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d135 ;
  assign dmem_not_imem_OR_NOT_rg_op_15_EQ_0_16_17_AND_N_ETC___d129 =
	     dmem_not_imem ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ||
	     !tlb$lookup[39] ;
  assign exc_code___1__h6444 = x1_avValue_exc_code__h6046 ;
  assign fabric_addr__h36020 = { 30'd0, rg_pa } ;
  assign ld_val4357_BITS_15_TO_0__q38 = ld_val__h34357[15:0] ;
  assign ld_val4357_BITS_15_TO_8__q40 = ld_val__h34357[15:8] ;
  assign ld_val4357_BITS_23_TO_16__q41 = ld_val__h34357[23:16] ;
  assign ld_val4357_BITS_31_TO_0__q39 = ld_val__h34357[31:0] ;
  assign ld_val4357_BITS_31_TO_16__q42 = ld_val__h34357[31:16] ;
  assign ld_val4357_BITS_31_TO_24__q43 = ld_val__h34357[31:24] ;
  assign ld_val4357_BITS_39_TO_32__q44 = ld_val__h34357[39:32] ;
  assign ld_val4357_BITS_47_TO_32__q45 = ld_val__h34357[47:32] ;
  assign ld_val4357_BITS_47_TO_40__q47 = ld_val__h34357[47:40] ;
  assign ld_val4357_BITS_55_TO_48__q48 = ld_val__h34357[55:48] ;
  assign ld_val4357_BITS_63_TO_32__q46 = ld_val__h34357[63:32] ;
  assign ld_val4357_BITS_63_TO_48__q49 = ld_val__h34357[63:48] ;
  assign ld_val4357_BITS_63_TO_56__q50 = ld_val__h34357[63:56] ;
  assign ld_val4357_BITS_7_TO_0__q37 = ld_val__h34357[7:0] ;
  assign lev_0_PTN_pa__h29408 = { _theResult____h28764[31:10], 12'b0 } ;
  assign lev_0_pte_pa__h29410 = lev_0_PTN_pa__h29408 + vpn_0_pa__h29409 ;
  assign lev_0_pte_pa_w64__h29411 = { lev_0_pte_pa__h29410[33:3], 3'b0 } ;
  assign lev_0_pte_pa_w64_fa__h29412 = { 30'd0, lev_0_pte_pa_w64__h29411 } ;
  assign lev_1_pte_pa__h28498 = satp_pa__h1894 + vpn_1_pa__h28497 ;
  assign lev_1_pte_pa_w64__h28499 = { lev_1_pte_pa__h28498[33:3], 3'b0 } ;
  assign lev_1_pte_pa_w64_fa__h28500 = { 30'd0, lev_1_pte_pa_w64__h28499 } ;
  assign lrsc_result__h21595 =
	     !rg_lrsc_valid ||
	     !rg_lrsc_pa_66_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d267 ;
  assign master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q1 =
	     master_xactor_f_rd_data$D_OUT[10:3] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q4 =
	     master_xactor_f_rd_data$D_OUT[18:11] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q2 =
	     master_xactor_f_rd_data$D_OUT[18:3] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q5 =
	     master_xactor_f_rd_data$D_OUT[26:19] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6 =
	     master_xactor_f_rd_data$D_OUT[34:19] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7 =
	     master_xactor_f_rd_data$D_OUT[34:27] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q3 =
	     master_xactor_f_rd_data$D_OUT[34:3] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q8 =
	     master_xactor_f_rd_data$D_OUT[42:35] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q9 =
	     master_xactor_f_rd_data$D_OUT[50:35] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q11 =
	     master_xactor_f_rd_data$D_OUT[50:43] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q12 =
	     master_xactor_f_rd_data$D_OUT[58:51] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q10 =
	     master_xactor_f_rd_data$D_OUT[66:35] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q13 =
	     master_xactor_f_rd_data$D_OUT[66:51] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q14 =
	     master_xactor_f_rd_data$D_OUT[66:59] ;
  assign master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d1001 =
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     _theResult____h28764[0] &&
	     (_theResult____h28764[1] || !_theResult____h28764[2]) &&
	     (_theResult____h28764[3] || _theResult____h28764[1]) &&
	     _theResult____h28764[19:10] == 10'd0 &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d1007 =
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     _theResult____h28764[0] &&
	     (_theResult____h28764[1] || !_theResult____h28764[2]) &&
	     (_theResult____h28764[3] || _theResult____h28764[1]) &&
	     _theResult____h28764[19:10] != 10'd0 &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d1033 =
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     _theResult____h28764[0] &&
	     (_theResult____h28764[1] || !_theResult____h28764[2]) &&
	     (_theResult____h28764[3] || _theResult____h28764[1]) &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d974 =
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     (!_theResult____h28764[0] ||
	      !_theResult____h28764[1] && _theResult____h28764[2]) &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982 =
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     _theResult____h28764[0] &&
	     !_theResult____h28764[2] &&
	     !_theResult____h28764[3] &&
	     !_theResult____h28764[1] &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d997 =
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	     _theResult____h28764[0] &&
	     (_theResult____h28764[1] || !_theResult____h28764[2]) &&
	     (_theResult____h28764[3] || _theResult____h28764[1]) &&
	     _theResult____h28764[19:10] == 10'd0 ;
  assign mem_req_wr_addr_awaddr__h2814 =
	     { 30'd0, f_fabric_write_reqs$D_OUT[97:64] } ;
  assign new_st_val__h25154 =
	     (rg_f3 == 3'b010) ?
	       new_st_val__h25460 :
	       _theResult_____2__h25456 ;
  assign new_st_val__h25460 = { 32'd0, _theResult_____2__h25456[31:0] } ;
  assign new_st_val__h25551 =
	     IF_rg_f3_13_EQ_0b10_46_THEN_SEXT_IF_rg_f3_13_E_ETC___d707 +
	     IF_rg_f3_13_EQ_0b10_46_THEN_SEXT_rg_st_amo_val_ETC___d776 ;
  assign new_st_val__h26531 = w1__h25448 ^ w2__h36603 ;
  assign new_st_val__h26535 = w1__h25448 & w2__h36603 ;
  assign new_st_val__h26539 = w1__h25448 | w2__h36603 ;
  assign new_st_val__h26543 =
	     (w1__h25448 < w2__h36603) ? w1__h25448 : w2__h36603 ;
  assign new_st_val__h26548 =
	     (w1__h25448 <= w2__h36603) ? w2__h36603 : w1__h25448 ;
  assign new_st_val__h26554 =
	     ((IF_rg_f3_13_EQ_0b10_46_THEN_SEXT_IF_rg_f3_13_E_ETC___d707 ^
	       64'h8000000000000000) <
	      (IF_rg_f3_13_EQ_0b10_46_THEN_SEXT_rg_st_amo_val_ETC___d776 ^
	       64'h8000000000000000)) ?
	       w1__h25448 :
	       w2__h36603 ;
  assign new_st_val__h26559 =
	     ((IF_rg_f3_13_EQ_0b10_46_THEN_SEXT_IF_rg_f3_13_E_ETC___d707 ^
	       64'h8000000000000000) <=
	      (IF_rg_f3_13_EQ_0b10_46_THEN_SEXT_rg_st_amo_val_ETC___d776 ^
	       64'h8000000000000000)) ?
	       w2__h36603 :
	       w1__h25448 ;
  assign new_st_val__h36613 = { 32'd0, _theResult_____2__h36609[31:0] } ;
  assign new_st_val__h36704 =
	     new_ld_val__h36563 +
	     IF_rg_f3_13_EQ_0b10_46_THEN_SEXT_rg_st_amo_val_ETC___d776 ;
  assign new_st_val__h38564 = w1__h36601 ^ w2__h36603 ;
  assign new_st_val__h38568 = w1__h36601 & w2__h36603 ;
  assign new_st_val__h38572 = w1__h36601 | w2__h36603 ;
  assign new_st_val__h38576 =
	     (w1__h36601 < w2__h36603) ? w1__h36601 : w2__h36603 ;
  assign new_st_val__h38581 =
	     (w1__h36601 <= w2__h36603) ? w2__h36603 : w1__h36601 ;
  assign new_st_val__h38587 =
	     ((new_ld_val__h36563 ^ 64'h8000000000000000) <
	      (IF_rg_f3_13_EQ_0b10_46_THEN_SEXT_rg_st_amo_val_ETC___d776 ^
	       64'h8000000000000000)) ?
	       w1__h36601 :
	       w2__h36603 ;
  assign new_st_val__h38592 =
	     ((new_ld_val__h36563 ^ 64'h8000000000000000) <=
	      (IF_rg_f3_13_EQ_0b10_46_THEN_SEXT_rg_st_amo_val_ETC___d776 ^
	       64'h8000000000000000)) ?
	       w2__h36603 :
	       w1__h36601 ;
  assign new_value__h24024 =
	     (rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       64'd1 :
	       CASE_rg_f3_0b0_IF_rg_addr_9_BITS_2_TO_0_17_EQ__ETC__q53 ;
  assign new_value__h7595 =
	     (rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       word64__h7467 :
	       IF_rg_f3_13_EQ_0b0_14_THEN_IF_rg_addr_9_BITS_2_ETC___d646 ;
  assign pa___1__h6550 = { tlb$lookup[67:46], rg_addr[11:0] } ;
  assign pa___1__h6599 = { tlb$lookup[67:56], rg_addr[21:0] } ;
  assign pa__h6033 = { 2'd0, rg_addr } ;
  assign pte___1__h6731 = { tlb$lookup[67:43], 1'd1, tlb$lookup[41:36] } ;
  assign pte___1__h6759 =
	     { pte___2__h6542[31:8], 1'd1, pte___2__h6542[6:0] } ;
  assign pte___2__h6542 =
	     tlb$lookup[42] ? tlb$lookup[67:36] : pte___1__h6731 ;
  assign ram_state_and_ctag_cset_b_read__96_BITS_21_TO__ETC___d201 =
	     ram_state_and_ctag_cset$DOB[21:0] ==
	     x1_avValue_pa__h6045[33:12] ;
  assign ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207 =
	     ram_state_and_ctag_cset$DOB[44:23] ==
	     x1_avValue_pa__h6045[33:12] ;
  assign ram_state_and_ctag_cset_b_read__96_BIT_22_97_A_ETC___d476 =
	     (ram_state_and_ctag_cset$DOB[22] &&
	      ram_state_and_ctag_cset_b_read__96_BITS_21_TO__ETC___d201 ||
	      ram_state_and_ctag_cset$DOB[45] &&
	      ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 ;
  assign ram_state_and_ctag_cset_b_read__96_BIT_22_97_A_ETC___d487 =
	     (ram_state_and_ctag_cset$DOB[22] &&
	      ram_state_and_ctag_cset_b_read__96_BITS_21_TO__ETC___d201 ||
	      ram_state_and_ctag_cset$DOB[45] &&
	      ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207) &&
	     IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d477 ;
  assign ram_state_and_ctag_cset_b_read__96_BIT_22_97_A_ETC___d665 =
	     (ram_state_and_ctag_cset$DOB[22] &&
	      ram_state_and_ctag_cset_b_read__96_BITS_21_TO__ETC___d201 ||
	      ram_state_and_ctag_cset$DOB[45] &&
	      ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207) &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign ram_state_and_ctag_cset_b_read__96_BIT_22_97_A_ETC___d908 =
	     (ram_state_and_ctag_cset$DOB[22] &&
	      ram_state_and_ctag_cset_b_read__96_BITS_21_TO__ETC___d201 ||
	      ram_state_and_ctag_cset$DOB[45] &&
	      ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207) &&
	     IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d477 &&
	     !cfg_verbosity_read__0_ULE_1___d41 ;
  assign req_f3_BITS_1_TO_0_383_EQ_0b0_384_OR_req_f3_BI_ETC___d1413 =
	     req_f3[1:0] == 2'b0 || req_f3[1:0] == 2'b01 && !req_addr[0] ||
	     req_f3[1:0] == 2'b10 && req_addr[1:0] == 2'b0 ||
	     req_f3[1:0] == 2'b11 && req_addr[2:0] == 3'b0 ;
  assign result__h20306 =
	     { {56{word64467_BITS_7_TO_0__q15[7]}},
	       word64467_BITS_7_TO_0__q15 } ;
  assign result__h20334 =
	     { {56{word64467_BITS_15_TO_8__q18[7]}},
	       word64467_BITS_15_TO_8__q18 } ;
  assign result__h20362 =
	     { {56{word64467_BITS_23_TO_16__q19[7]}},
	       word64467_BITS_23_TO_16__q19 } ;
  assign result__h20390 =
	     { {56{word64467_BITS_31_TO_24__q21[7]}},
	       word64467_BITS_31_TO_24__q21 } ;
  assign result__h20418 =
	     { {56{word64467_BITS_39_TO_32__q22[7]}},
	       word64467_BITS_39_TO_32__q22 } ;
  assign result__h20446 =
	     { {56{word64467_BITS_47_TO_40__q25[7]}},
	       word64467_BITS_47_TO_40__q25 } ;
  assign result__h20474 =
	     { {56{word64467_BITS_55_TO_48__q26[7]}},
	       word64467_BITS_55_TO_48__q26 } ;
  assign result__h20502 =
	     { {56{word64467_BITS_63_TO_56__q28[7]}},
	       word64467_BITS_63_TO_56__q28 } ;
  assign result__h20547 = { 56'd0, word64__h7467[7:0] } ;
  assign result__h20575 = { 56'd0, word64__h7467[15:8] } ;
  assign result__h20603 = { 56'd0, word64__h7467[23:16] } ;
  assign result__h20631 = { 56'd0, word64__h7467[31:24] } ;
  assign result__h20659 = { 56'd0, word64__h7467[39:32] } ;
  assign result__h20687 = { 56'd0, word64__h7467[47:40] } ;
  assign result__h20715 = { 56'd0, word64__h7467[55:48] } ;
  assign result__h20743 = { 56'd0, word64__h7467[63:56] } ;
  assign result__h20788 =
	     { {48{word64467_BITS_15_TO_0__q16[15]}},
	       word64467_BITS_15_TO_0__q16 } ;
  assign result__h20816 =
	     { {48{word64467_BITS_31_TO_16__q20[15]}},
	       word64467_BITS_31_TO_16__q20 } ;
  assign result__h20844 =
	     { {48{word64467_BITS_47_TO_32__q23[15]}},
	       word64467_BITS_47_TO_32__q23 } ;
  assign result__h20872 =
	     { {48{word64467_BITS_63_TO_48__q27[15]}},
	       word64467_BITS_63_TO_48__q27 } ;
  assign result__h20913 = { 48'd0, word64__h7467[15:0] } ;
  assign result__h20941 = { 48'd0, word64__h7467[31:16] } ;
  assign result__h20969 = { 48'd0, word64__h7467[47:32] } ;
  assign result__h20997 = { 48'd0, word64__h7467[63:48] } ;
  assign result__h21038 =
	     { {32{word64467_BITS_31_TO_0__q17[31]}},
	       word64467_BITS_31_TO_0__q17 } ;
  assign result__h21066 =
	     { {32{word64467_BITS_63_TO_32__q24[31]}},
	       word64467_BITS_63_TO_32__q24 } ;
  assign result__h21105 = { 32'd0, word64__h7467[31:0] } ;
  assign result__h21133 = { 32'd0, word64__h7467[63:32] } ;
  assign result__h34417 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q1[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q1 } ;
  assign result__h34447 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q4[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q4 } ;
  assign result__h34474 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q5[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q5 } ;
  assign result__h34501 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7 } ;
  assign result__h34528 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q8[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q8 } ;
  assign result__h34555 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q11[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q11 } ;
  assign result__h34582 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q12[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q12 } ;
  assign result__h34609 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q14[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q14 } ;
  assign result__h34653 = { 56'd0, master_xactor_f_rd_data$D_OUT[10:3] } ;
  assign result__h34680 = { 56'd0, master_xactor_f_rd_data$D_OUT[18:11] } ;
  assign result__h34707 = { 56'd0, master_xactor_f_rd_data$D_OUT[26:19] } ;
  assign result__h34734 = { 56'd0, master_xactor_f_rd_data$D_OUT[34:27] } ;
  assign result__h34761 = { 56'd0, master_xactor_f_rd_data$D_OUT[42:35] } ;
  assign result__h34788 = { 56'd0, master_xactor_f_rd_data$D_OUT[50:43] } ;
  assign result__h34815 = { 56'd0, master_xactor_f_rd_data$D_OUT[58:51] } ;
  assign result__h34842 = { 56'd0, master_xactor_f_rd_data$D_OUT[66:59] } ;
  assign result__h34886 =
	     { {48{master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q2[15]}},
	       master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q2 } ;
  assign result__h34913 =
	     { {48{master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6[15]}},
	       master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6 } ;
  assign result__h34940 =
	     { {48{master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q9[15]}},
	       master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q9 } ;
  assign result__h34967 =
	     { {48{master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q13[15]}},
	       master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q13 } ;
  assign result__h35007 = { 48'd0, master_xactor_f_rd_data$D_OUT[18:3] } ;
  assign result__h35034 = { 48'd0, master_xactor_f_rd_data$D_OUT[34:19] } ;
  assign result__h35061 = { 48'd0, master_xactor_f_rd_data$D_OUT[50:35] } ;
  assign result__h35088 = { 48'd0, master_xactor_f_rd_data$D_OUT[66:51] } ;
  assign result__h35128 =
	     { {32{master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q3[31]}},
	       master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q3 } ;
  assign result__h35155 =
	     { {32{master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q10[31]}},
	       master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q10 } ;
  assign result__h35193 = { 32'd0, master_xactor_f_rd_data$D_OUT[34:3] } ;
  assign result__h35220 = { 32'd0, master_xactor_f_rd_data$D_OUT[66:35] } ;
  assign result__h36792 =
	     { {56{ld_val4357_BITS_7_TO_0__q37[7]}},
	       ld_val4357_BITS_7_TO_0__q37 } ;
  assign result__h37700 =
	     { {56{ld_val4357_BITS_15_TO_8__q40[7]}},
	       ld_val4357_BITS_15_TO_8__q40 } ;
  assign result__h37728 =
	     { {56{ld_val4357_BITS_23_TO_16__q41[7]}},
	       ld_val4357_BITS_23_TO_16__q41 } ;
  assign result__h37756 =
	     { {56{ld_val4357_BITS_31_TO_24__q43[7]}},
	       ld_val4357_BITS_31_TO_24__q43 } ;
  assign result__h37784 =
	     { {56{ld_val4357_BITS_39_TO_32__q44[7]}},
	       ld_val4357_BITS_39_TO_32__q44 } ;
  assign result__h37812 =
	     { {56{ld_val4357_BITS_47_TO_40__q47[7]}},
	       ld_val4357_BITS_47_TO_40__q47 } ;
  assign result__h37840 =
	     { {56{ld_val4357_BITS_55_TO_48__q48[7]}},
	       ld_val4357_BITS_55_TO_48__q48 } ;
  assign result__h37868 =
	     { {56{ld_val4357_BITS_63_TO_56__q50[7]}},
	       ld_val4357_BITS_63_TO_56__q50 } ;
  assign result__h37913 = { 56'd0, ld_val__h34357[7:0] } ;
  assign result__h37941 = { 56'd0, ld_val__h34357[15:8] } ;
  assign result__h37969 = { 56'd0, ld_val__h34357[23:16] } ;
  assign result__h37997 = { 56'd0, ld_val__h34357[31:24] } ;
  assign result__h38025 = { 56'd0, ld_val__h34357[39:32] } ;
  assign result__h38053 = { 56'd0, ld_val__h34357[47:40] } ;
  assign result__h38081 = { 56'd0, ld_val__h34357[55:48] } ;
  assign result__h38109 = { 56'd0, ld_val__h34357[63:56] } ;
  assign result__h38154 =
	     { {48{ld_val4357_BITS_15_TO_0__q38[15]}},
	       ld_val4357_BITS_15_TO_0__q38 } ;
  assign result__h38182 =
	     { {48{ld_val4357_BITS_31_TO_16__q42[15]}},
	       ld_val4357_BITS_31_TO_16__q42 } ;
  assign result__h38210 =
	     { {48{ld_val4357_BITS_47_TO_32__q45[15]}},
	       ld_val4357_BITS_47_TO_32__q45 } ;
  assign result__h38238 =
	     { {48{ld_val4357_BITS_63_TO_48__q49[15]}},
	       ld_val4357_BITS_63_TO_48__q49 } ;
  assign result__h38279 = { 48'd0, ld_val__h34357[15:0] } ;
  assign result__h38307 = { 48'd0, ld_val__h34357[31:16] } ;
  assign result__h38335 = { 48'd0, ld_val__h34357[47:32] } ;
  assign result__h38363 = { 48'd0, ld_val__h34357[63:48] } ;
  assign result__h38404 =
	     { {32{ld_val4357_BITS_31_TO_0__q39[31]}},
	       ld_val4357_BITS_31_TO_0__q39 } ;
  assign result__h38432 =
	     { {32{ld_val4357_BITS_63_TO_32__q46[31]}},
	       ld_val4357_BITS_63_TO_32__q46 } ;
  assign result__h38471 = { 32'd0, ld_val__h34357[31:0] } ;
  assign result__h38499 = { 32'd0, ld_val__h34357[63:32] } ;
  assign rg_amo_funct7_20_BITS_6_TO_2_21_EQ_0b10_22_AND_ETC___d672 =
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     (ram_state_and_ctag_cset$DOB[22] &&
	      ram_state_and_ctag_cset_b_read__96_BITS_21_TO__ETC___d201 ||
	      ram_state_and_ctag_cset$DOB[45] &&
	      ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207) ;
  assign rg_amo_funct7_20_BITS_6_TO_2_21_EQ_0b1_84_OR_I_ETC___d340 =
	     IF_rg_f3_13_EQ_0b0_14_OR_rg_f3_13_EQ_0b100_15__ETC___d259 &&
	     (!ram_state_and_ctag_cset$DOB[45] ||
	      !ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207 ||
	      IF_rg_f3_13_EQ_0b0_14_THEN_NOT_rg_priv_9_ULE_0_ETC___d335) &&
	     (ram_state_and_ctag_cset$DOB[45] &&
	      ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207 ||
	      IF_rg_f3_13_EQ_0b0_14_THEN_NOT_rg_priv_9_ULE_0_ETC___d335) ;
  assign rg_lrsc_pa_66_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d267 =
	     rg_lrsc_pa == x1_avValue_pa__h6045 ;
  assign rg_op_15_EQ_0_16_OR_rg_op_15_EQ_2_18_AND_rg_am_ETC___d423 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__96_BITS_21_TO__ETC___d201) &&
	     (!ram_state_and_ctag_cset$DOB[45] ||
	      !ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207) ;
  assign rg_op_15_EQ_0_16_OR_rg_op_15_EQ_2_18_AND_rg_am_ETC___d460 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d135 ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     tlb$lookup[38] ;
  assign rg_op_15_EQ_0_16_OR_rg_op_15_EQ_2_18_AND_rg_am_ETC___d481 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (ram_state_and_ctag_cset_b_read__96_BIT_22_97_A_ETC___d476 ||
	      NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d479) ;
  assign rg_op_15_EQ_0_16_OR_rg_op_15_EQ_2_18_AND_rg_am_ETC___d491 =
	     rg_op_15_EQ_0_16_OR_rg_op_15_EQ_2_18_AND_rg_am_ETC___d481 ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_15_EQ_1_62_OR_rg_op_15_EQ_2_18_AND_rg_am_ETC___d489 ;
  assign rg_op_15_EQ_0_16_OR_rg_op_15_EQ_2_18_AND_rg_am_ETC___d495 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (ram_state_and_ctag_cset$DOB[22] &&
	      ram_state_and_ctag_cset_b_read__96_BITS_21_TO__ETC___d201 ||
	      ram_state_and_ctag_cset$DOB[45] &&
	      ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207) ;
  assign rg_op_15_EQ_1_62_OR_rg_op_15_EQ_2_18_AND_rg_am_ETC___d489 =
	     rg_op == 2'd1 &&
	     IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d477 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset_b_read__96_BIT_22_97_A_ETC___d487 ;
  assign rg_op_15_EQ_1_62_OR_rg_op_15_EQ_2_18_AND_rg_am_ETC___d712 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_15_EQ_2_18_19_OR_NOT_rg_amo_funct7_2_ETC___d709 ||
	     NOT_rg_op_15_EQ_1_62_85_AND_NOT_rg_op_15_EQ_2__ETC___d711 ;
  assign rg_op_15_EQ_1_62_OR_rg_op_15_EQ_2_18_AND_rg_am_ETC___d842 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_66_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d267) ;
  assign rg_op_15_EQ_2_18_AND_rg_amo_funct7_20_BITS_6_T_ETC___d283 =
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h21595 ||
	     f_fabric_write_reqs$FULL_N &&
	     NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d281 ;
  assign rg_priv_9_EQ_0b0_05_AND_NOT_tlb_lookup_rg_satp_ETC___d146 =
	     rg_priv == 2'b0 && !tlb$lookup[40] ||
	     rg_priv == 2'b01 && tlb$lookup[40] && !rg_sstatus_SUM ||
	     dmem_not_imem_OR_NOT_rg_op_15_EQ_0_16_17_AND_N_ETC___d129 &&
	     NOT_dmem_not_imem_30_OR_NOT_rg_op_15_EQ_0_16_1_ETC___d137 &&
	     (!dmem_not_imem || rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ||
	      !tlb$lookup[38]) ;
  assign rg_priv_9_EQ_0b0_05_AND_NOT_tlb_lookup_rg_satp_ETC___d159 =
	     rg_priv == 2'b0 && !tlb$lookup[40] ||
	     rg_priv == 2'b01 && tlb$lookup[40] && !rg_sstatus_SUM ||
	     !dmem_not_imem ||
	     !tlb$lookup[38] ;
  assign rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d155 =
	     rg_priv_9_ULE_0b1___d90 && rg_satp[31] && tlb$lookup[68] &&
	     (rg_priv_9_EQ_0b0_05_AND_NOT_tlb_lookup_rg_satp_ETC___d146 ||
	      NOT_tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_ad_ETC___d152) ;
  assign rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d348 =
	     rg_priv_9_ULE_0b1___d90 && rg_satp[31] && !tlb$lookup[68] ||
	     (rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d155 ?
		tlb$RDY_lookup :
		NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d346) ;
  assign rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d392 =
	     rg_priv_9_ULE_0b1___d90 && rg_satp[31] &&
	     (rg_priv_9_EQ_0b0_05_AND_NOT_tlb_lookup_rg_satp_ETC___d146 ||
	      NOT_tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_ad_ETC___d152) &&
	     tlb$lookup[68] ;
  assign rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d414 =
	     rg_priv_9_ULE_0b1___d90 && rg_satp[31] && tlb$lookup[68] &&
	     NOT_rg_priv_9_EQ_0b0_05_70_OR_tlb_lookup_rg_sa_ETC___d407 &&
	     tlb$lookup[42] &&
	     tlb$lookup[43] &&
	     !pte___2__h6542[7] &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ;
  assign rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d431 =
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d155 ||
	     dmem_not_imem && !soc_map$m_is_mem_addr ||
	     rg_op_15_EQ_0_16_OR_rg_op_15_EQ_2_18_AND_rg_am_ETC___d423 ||
	     NOT_rg_op_15_EQ_0_16_17_AND_NOT_rg_op_15_EQ_2__ETC___d428 ;
  assign rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d432 =
	     rg_priv_9_ULE_0b1___d90 && rg_satp[31] && !tlb$lookup[68] ||
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d431 ;
  assign rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d450 =
	     rg_priv_9_ULE_0b1___d90 && rg_satp[31] && tlb$lookup[68] &&
	     NOT_rg_priv_9_EQ_0b0_05_70_OR_tlb_lookup_rg_sa_ETC___d445 &&
	     NOT_cfg_verbosity_read__0_ULT_2_41___d442 &&
	     dmem_not_imem &&
	     tlb$lookup[38] &&
	     tlb$lookup[43] ;
  assign rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d453 =
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d414 &&
	     NOT_cfg_verbosity_read__0_ULT_2_41___d442 &&
	     (!dmem_not_imem || !tlb$lookup[38] || !tlb$lookup[43]) ;
  assign rg_priv_9_ULE_0b1___d90 = rg_priv <= 2'b01 ;
  assign rg_st_amo_val_BITS_31_TO_0__q33 = rg_st_amo_val[31:0] ;
  assign rg_state_3_EQ_12_098_AND_rg_op_15_EQ_0_16_OR_r_ETC___d1100 =
	     rg_state == 4'd12 &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     b__h28399 == 4'd0 ;
  assign satp_pa__h1894 = { rg_satp[21:0], 12'b0 } ;
  assign shift_bits__h2828 = { f_fabric_write_reqs$D_OUT[66:64], 3'b0 } ;
  assign strobe64__h2978 = 8'b00000001 << f_fabric_write_reqs$D_OUT[66:64] ;
  assign strobe64__h2980 = 8'b00000011 << f_fabric_write_reqs$D_OUT[66:64] ;
  assign strobe64__h2982 = 8'b00001111 << f_fabric_write_reqs$D_OUT[66:64] ;
  assign tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d135 =
	     tlb$lookup[37] | y__h6370 ;
  assign tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d386 =
	     tlb$lookup[42] &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ||
	      tlb$lookup[43]) ;
  assign tmp__h30785 = { 1'd0, rg_victim_way } ;
  assign tmp__h30786 = tmp__h30785 + 2'd1 ;
  assign vpn_0_pa__h29409 = { 22'd0, rg_addr[21:12], 2'd0 } ;
  assign vpn_1_pa__h28497 = { 22'd0, rg_addr[31:22], 2'd0 } ;
  assign w16597_BITS_31_TO_0__q52 = w1__h36597[31:0] ;
  assign w1___1__h25519 =
	     { 32'd0,
	       IF_rg_f3_13_EQ_0b0_14_THEN_IF_rg_addr_9_BITS_2_ETC___d646[31:0] } ;
  assign w1___1__h36672 = { 32'd0, w1__h36597[31:0] } ;
  assign w2___1__h36673 = { 32'd0, rg_st_amo_val[31:0] } ;
  assign w2__h36603 = (rg_f3 == 3'b010) ? w2___1__h36673 : rg_st_amo_val ;
  assign word64467_BITS_15_TO_0__q16 = word64__h7467[15:0] ;
  assign word64467_BITS_15_TO_8__q18 = word64__h7467[15:8] ;
  assign word64467_BITS_23_TO_16__q19 = word64__h7467[23:16] ;
  assign word64467_BITS_31_TO_0__q17 = word64__h7467[31:0] ;
  assign word64467_BITS_31_TO_16__q20 = word64__h7467[31:16] ;
  assign word64467_BITS_31_TO_24__q21 = word64__h7467[31:24] ;
  assign word64467_BITS_39_TO_32__q22 = word64__h7467[39:32] ;
  assign word64467_BITS_47_TO_32__q23 = word64__h7467[47:32] ;
  assign word64467_BITS_47_TO_40__q25 = word64__h7467[47:40] ;
  assign word64467_BITS_55_TO_48__q26 = word64__h7467[55:48] ;
  assign word64467_BITS_63_TO_32__q24 = word64__h7467[63:32] ;
  assign word64467_BITS_63_TO_48__q27 = word64__h7467[63:48] ;
  assign word64467_BITS_63_TO_56__q28 = word64__h7467[63:56] ;
  assign word64467_BITS_7_TO_0__q15 = word64__h7467[7:0] ;
  assign word64__h7467 = x__h7620 | y__h7621 ;
  assign x1_avValue_exc_code__h6046 =
	     dmem_not_imem ?
	       ((rg_op == 2'd0 ||
		 rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
		  4'd13 :
		  4'd15) :
	       4'd12 ;
  assign x1_avValue_pa__h6045 =
	     (rg_priv_9_ULE_0b1___d90 && rg_satp[31]) ?
	       _theResult___fst__h6133 :
	       pa__h6033 ;
  assign x1_avValue_pte__h6048 =
	     (rg_priv_9_ULE_0b1___d90 && rg_satp[31]) ?
	       _theResult___snd_fst__h6135 :
	       tlb$lookup[67:36] ;
  assign x__h21605 = { 63'd0, lrsc_result__h21595 } ;
  assign x__h36592 =
	     (rg_f3 == 3'b010) ?
	       new_st_val__h36613 :
	       _theResult_____2__h36609 ;
  assign x__h3675 = { 32'd0, f_pte_writebacks$D_OUT[31:0] } ;
  assign x__h7620 = ram_word64_set$DOB[63:0] & y__h7635 ;
  assign y__h13950 =
	     {64{ram_state_and_ctag_cset$DOB[45] &&
		 ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207}} ;
  assign y__h6370 = rg_mstatus_MXR & tlb$lookup[39] ;
  assign y__h7621 = ram_word64_set$DOB[127:64] & y__h13950 ;
  assign y__h7635 =
	     {64{ram_state_and_ctag_cset$DOB[22] &&
		 ram_state_and_ctag_cset_b_read__96_BITS_21_TO__ETC___d201}} ;
  always@(f_fabric_write_reqs$D_OUT)
  begin
    case (f_fabric_write_reqs$D_OUT[99:98])
      2'b0: x__h2861 = 3'b0;
      2'b01: x__h2861 = 3'b001;
      2'b10: x__h2861 = 3'b010;
      2'b11: x__h2861 = 3'b011;
    endcase
  end
  always@(rg_f3)
  begin
    case (rg_f3[1:0])
      2'b0: value__h36149 = 3'b0;
      2'b01: value__h36149 = 3'b001;
      2'b10: value__h36149 = 3'b010;
      2'd3: value__h36149 = 3'b011;
    endcase
  end
  always@(tlb$lookup or pa__h6033 or pa___1__h6550 or pa___1__h6599)
  begin
    case (tlb$lookup[35:34])
      2'd0: _theResult___fst__h6544 = pa___1__h6550;
      2'd1: _theResult___fst__h6544 = pa___1__h6599;
      default: _theResult___fst__h6544 = pa__h6033;
    endcase
  end
  always@(f_fabric_write_reqs$D_OUT or
	  strobe64__h2978 or strobe64__h2980 or strobe64__h2982)
  begin
    case (f_fabric_write_reqs$D_OUT[99:98])
      2'b0: mem_req_wr_data_wstrb__h3041 = strobe64__h2978;
      2'b01: mem_req_wr_data_wstrb__h3041 = strobe64__h2980;
      2'b10: mem_req_wr_data_wstrb__h3041 = strobe64__h2982;
      2'b11: mem_req_wr_data_wstrb__h3041 = 8'b11111111;
    endcase
  end
  always@(f_fabric_write_reqs$D_OUT or _theResult___snd_fst__h3048)
  begin
    case (f_fabric_write_reqs$D_OUT[99:98])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h3040 = _theResult___snd_fst__h3048;
      2'd3: mem_req_wr_data_wdata__h3040 = f_fabric_write_reqs$D_OUT[63:0];
    endcase
  end
  always@(ram_state_and_ctag_cset$DOB or
	  ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207 or
	  ram_word64_set$DOB)
  begin
    case (ram_state_and_ctag_cset$DOB[45] &&
	  ram_state_and_ctag_cset_b_read__96_BITS_44_TO__ETC___d207)
      1'd0: old_word64__h22373 = ram_word64_set$DOB[63:0];
      1'd1: old_word64__h22373 = ram_word64_set$DOB[127:64];
    endcase
  end
  always@(rg_f3 or
	  NOT_ram_state_and_ctag_cset_b_read__96_BIT_45__ETC___d232 or
	  rg_priv_9_ULE_0b1___d90 or rg_satp or tlb$RDY_lookup)
  begin
    case (rg_f3)
      3'b0, 3'b001, 3'b010:
	  IF_rg_f3_13_EQ_0b0_14_OR_rg_f3_13_EQ_0b1_38_OR_ETC___d275 =
	      !rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || tlb$RDY_lookup;
      default: IF_rg_f3_13_EQ_0b0_14_OR_rg_f3_13_EQ_0b1_38_OR_ETC___d275 =
		   rg_f3 == 3'b011 ||
		   NOT_ram_state_and_ctag_cset_b_read__96_BIT_45__ETC___d232;
    endcase
  end
  always@(rg_addr or
	  NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d231 or
	  NOT_ram_state_and_ctag_cset_b_read__96_BIT_45__ETC___d232)
  begin
    case (rg_addr[2:0])
      3'h0, 3'h1, 3'h2, 3'h3, 3'h4, 3'h5, 3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_OR_rg_ad_ETC___d237 =
	      NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d231 &&
	      NOT_ram_state_and_ctag_cset_b_read__96_BIT_45__ETC___d232;
      3'd7:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_OR_rg_ad_ETC___d237 =
	      rg_addr[2:0] != 3'h7 ||
	      NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d231 &&
	      NOT_ram_state_and_ctag_cset_b_read__96_BIT_45__ETC___d232;
    endcase
  end
  always@(rg_addr or
	  NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d231 or
	  NOT_ram_state_and_ctag_cset_b_read__96_BIT_45__ETC___d232)
  begin
    case (rg_addr[2:0])
      3'h0, 3'h2, 3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_OR_rg_ad_ETC___d245 =
	      NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d231 &&
	      NOT_ram_state_and_ctag_cset_b_read__96_BIT_45__ETC___d232;
      default: IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_OR_rg_ad_ETC___d245 =
		   rg_addr[2:0] != 3'h6 ||
		   NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d231 &&
		   NOT_ram_state_and_ctag_cset_b_read__96_BIT_45__ETC___d232;
    endcase
  end
  always@(rg_f3 or
	  rg_addr or
	  NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d231 or
	  NOT_ram_state_and_ctag_cset_b_read__96_BIT_45__ETC___d232 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_OR_rg_ad_ETC___d237 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_OR_rg_ad_ETC___d245 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_NOT_ETC___d251)
  begin
    case (rg_f3)
      3'b0, 3'b100:
	  IF_rg_f3_13_EQ_0b0_14_OR_rg_f3_13_EQ_0b100_15__ETC___d259 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_OR_rg_ad_ETC___d237;
      3'b001, 3'b101:
	  IF_rg_f3_13_EQ_0b0_14_OR_rg_f3_13_EQ_0b100_15__ETC___d259 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_OR_rg_ad_ETC___d245;
      3'b010, 3'b110:
	  IF_rg_f3_13_EQ_0b0_14_OR_rg_f3_13_EQ_0b100_15__ETC___d259 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_NOT_ETC___d251;
      default: IF_rg_f3_13_EQ_0b0_14_OR_rg_f3_13_EQ_0b100_15__ETC___d259 =
		   rg_f3 != 3'b011 || rg_addr[2:0] != 3'h0 ||
		   NOT_ram_state_and_ctag_cset_b_read__96_BIT_22__ETC___d231 &&
		   NOT_ram_state_and_ctag_cset_b_read__96_BIT_45__ETC___d232;
    endcase
  end
  always@(rg_amo_funct7 or
	  IF_rg_f3_13_EQ_0b0_14_OR_rg_f3_13_EQ_0b100_15__ETC___d259)
  begin
    case (rg_amo_funct7[6:2])
      5'b0, 5'b00100, 5'b01000, 5'b01100, 5'b10000, 5'b11000, 5'b11100:
	  CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_13_ETC__q29 =
	      IF_rg_f3_13_EQ_0b0_14_OR_rg_f3_13_EQ_0b100_15__ETC___d259;
      default: CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_13_ETC__q29 =
		   rg_amo_funct7[6:2] != 5'b10100 ||
		   IF_rg_f3_13_EQ_0b0_14_OR_rg_f3_13_EQ_0b100_15__ETC___d259;
    endcase
  end
  always@(x1_avValue_pa__h6045 or
	  NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d325 or
	  CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_13_ETC__q29)
  begin
    case (x1_avValue_pa__h6045[2:0])
      3'h0, 3'h2, 3'h4:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d326 =
	      CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_13_ETC__q29;
      default: IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d326 =
		   NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d325;
    endcase
  end
  always@(x1_avValue_pa__h6045 or
	  NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d319 or
	  CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_13_ETC__q29)
  begin
    case (x1_avValue_pa__h6045[2:0])
      3'h0, 3'h1, 3'h2, 3'h3, 3'h4, 3'h5, 3'h6:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d320 =
	      CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_13_ETC__q29;
      3'd7:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d320 =
	      NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d319;
    endcase
  end
  always@(rg_f3 or
	  NOT_ram_state_and_ctag_cset_b_read__96_BIT_45__ETC___d232 or
	  rg_priv_9_ULE_0b1___d90 or
	  rg_satp or
	  tlb$RDY_lookup or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d320 or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d326 or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d330 or
	  CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_13_ETC__q29)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_13_EQ_0b0_14_THEN_NOT_rg_priv_9_ULE_0_ETC___d335 =
	      (!rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || tlb$RDY_lookup) &&
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d320;
      3'b001:
	  IF_rg_f3_13_EQ_0b0_14_THEN_NOT_rg_priv_9_ULE_0_ETC___d335 =
	      (!rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || tlb$RDY_lookup) &&
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d326;
      3'b010:
	  IF_rg_f3_13_EQ_0b0_14_THEN_NOT_rg_priv_9_ULE_0_ETC___d335 =
	      (!rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || tlb$RDY_lookup) &&
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d330;
      3'b011:
	  IF_rg_f3_13_EQ_0b0_14_THEN_NOT_rg_priv_9_ULE_0_ETC___d335 =
	      CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_13_ETC__q29;
      default: IF_rg_f3_13_EQ_0b0_14_THEN_NOT_rg_priv_9_ULE_0_ETC___d335 =
		   NOT_ram_state_and_ctag_cset_b_read__96_BIT_45__ETC___d232;
    endcase
  end
  always@(rg_addr or
	  result__h20306 or
	  result__h20334 or
	  result__h20362 or
	  result__h20390 or
	  result__h20418 or
	  result__h20446 or result__h20474 or result__h20502)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d592 =
	      result__h20306;
      3'h1:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d592 =
	      result__h20334;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d592 =
	      result__h20362;
      3'h3:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d592 =
	      result__h20390;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d592 =
	      result__h20418;
      3'h5:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d592 =
	      result__h20446;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d592 =
	      result__h20474;
      3'h7:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d592 =
	      result__h20502;
    endcase
  end
  always@(rg_addr or
	  result__h20547 or
	  result__h20575 or
	  result__h20603 or
	  result__h20631 or
	  result__h20659 or
	  result__h20687 or result__h20715 or result__h20743)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d608 =
	      result__h20547;
      3'h1:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d608 =
	      result__h20575;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d608 =
	      result__h20603;
      3'h3:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d608 =
	      result__h20631;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d608 =
	      result__h20659;
      3'h5:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d608 =
	      result__h20687;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d608 =
	      result__h20715;
      3'h7:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d608 =
	      result__h20743;
    endcase
  end
  always@(rg_addr or
	  result__h20788 or
	  result__h20816 or result__h20844 or result__h20872)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d620 =
	      result__h20788;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d620 =
	      result__h20816;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d620 =
	      result__h20844;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d620 =
	      result__h20872;
      default: IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d620 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h20913 or
	  result__h20941 or result__h20969 or result__h20997)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d628 =
	      result__h20913;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d628 =
	      result__h20941;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d628 =
	      result__h20969;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d628 =
	      result__h20997;
      default: IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d628 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h21105 or result__h21133)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d638 =
	      result__h21105;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d638 =
	      result__h21133;
      default: IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d638 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h21038 or result__h21066)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result1038_0x4_re_ETC__q30 =
	      result__h21038;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result1038_0x4_re_ETC__q30 =
	      result__h21066;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result1038_0x4_re_ETC__q30 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d592 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d620 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result1038_0x4_re_ETC__q30 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_ram_ETC___d639 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d608 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d628 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d638)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_13_EQ_0b0_14_THEN_IF_rg_addr_9_BITS_2_ETC___d646 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d592;
      3'b001:
	  IF_rg_f3_13_EQ_0b0_14_THEN_IF_rg_addr_9_BITS_2_ETC___d646 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d620;
      3'b010:
	  IF_rg_f3_13_EQ_0b0_14_THEN_IF_rg_addr_9_BITS_2_ETC___d646 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result1038_0x4_re_ETC__q30;
      3'b011:
	  IF_rg_f3_13_EQ_0b0_14_THEN_IF_rg_addr_9_BITS_2_ETC___d646 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_ram_ETC___d639;
      3'b100:
	  IF_rg_f3_13_EQ_0b0_14_THEN_IF_rg_addr_9_BITS_2_ETC___d646 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d608;
      3'b101:
	  IF_rg_f3_13_EQ_0b0_14_THEN_IF_rg_addr_9_BITS_2_ETC___d646 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d628;
      3'b110:
	  IF_rg_f3_13_EQ_0b0_14_THEN_IF_rg_addr_9_BITS_2_ETC___d646 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d638;
      3'd7: IF_rg_f3_13_EQ_0b0_14_THEN_IF_rg_addr_9_BITS_2_ETC___d646 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d592 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d620 or
	  w1___1__h25519 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_ram_ETC___d639 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d608 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d628 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d638)
  begin
    case (rg_f3)
      3'b0:
	  w1__h25448 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d592;
      3'b001:
	  w1__h25448 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d620;
      3'b010: w1__h25448 = w1___1__h25519;
      3'b011:
	  w1__h25448 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_ram_ETC___d639;
      3'b100:
	  w1__h25448 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d608;
      3'b101:
	  w1__h25448 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d628;
      3'b110:
	  w1__h25448 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d638;
      3'd7: w1__h25448 = 64'd0;
    endcase
  end
  always@(x1_avValue_pa__h6045 or old_word64__h22373 or rg_st_amo_val)
  begin
    case (x1_avValue_pa__h6045[2:0])
      3'h0:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d760 =
	      { old_word64__h22373[63:16], rg_st_amo_val[15:0] };
      3'h2:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d760 =
	      { old_word64__h22373[63:32],
		rg_st_amo_val[15:0],
		old_word64__h22373[15:0] };
      3'h4:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d760 =
	      { old_word64__h22373[63:48],
		rg_st_amo_val[15:0],
		old_word64__h22373[31:0] };
      3'h6:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d760 =
	      { rg_st_amo_val[15:0], old_word64__h22373[47:0] };
      default: IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d760 =
		   old_word64__h22373;
    endcase
  end
  always@(x1_avValue_pa__h6045 or old_word64__h22373 or rg_st_amo_val)
  begin
    case (x1_avValue_pa__h6045[2:0])
      3'h0:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d751 =
	      { old_word64__h22373[63:8], rg_st_amo_val[7:0] };
      3'h1:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d751 =
	      { old_word64__h22373[63:16],
		rg_st_amo_val[7:0],
		old_word64__h22373[7:0] };
      3'h2:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d751 =
	      { old_word64__h22373[63:24],
		rg_st_amo_val[7:0],
		old_word64__h22373[15:0] };
      3'h3:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d751 =
	      { old_word64__h22373[63:32],
		rg_st_amo_val[7:0],
		old_word64__h22373[23:0] };
      3'h4:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d751 =
	      { old_word64__h22373[63:40],
		rg_st_amo_val[7:0],
		old_word64__h22373[31:0] };
      3'h5:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d751 =
	      { old_word64__h22373[63:48],
		rg_st_amo_val[7:0],
		old_word64__h22373[39:0] };
      3'h6:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d751 =
	      { old_word64__h22373[63:56],
		rg_st_amo_val[7:0],
		old_word64__h22373[47:0] };
      3'h7:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d751 =
	      { rg_st_amo_val[7:0], old_word64__h22373[55:0] };
    endcase
  end
  always@(x1_avValue_pa__h6045 or old_word64__h22373 or rg_st_amo_val)
  begin
    case (x1_avValue_pa__h6045[2:0])
      3'h0:
	  CASE_x1_avValue_pa045_BITS_2_TO_0_0x0_old_word_ETC__q31 =
	      { old_word64__h22373[63:32], rg_st_amo_val[31:0] };
      3'h4:
	  CASE_x1_avValue_pa045_BITS_2_TO_0_0x0_old_word_ETC__q31 =
	      { rg_st_amo_val[31:0], old_word64__h22373[31:0] };
      default: CASE_x1_avValue_pa045_BITS_2_TO_0_0x0_old_word_ETC__q31 =
		   old_word64__h22373;
    endcase
  end
  always@(rg_f3 or
	  old_word64__h22373 or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d751 or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d760 or
	  CASE_x1_avValue_pa045_BITS_2_TO_0_0x0_old_word_ETC__q31 or
	  rg_st_amo_val)
  begin
    case (rg_f3)
      3'b0:
	  n__h22384 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d751;
      3'b001:
	  n__h22384 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d760;
      3'b010:
	  n__h22384 = CASE_x1_avValue_pa045_BITS_2_TO_0_0x0_old_word_ETC__q31;
      3'b011: n__h22384 = rg_st_amo_val;
      default: n__h22384 = old_word64__h22373;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d592 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d620 or
	  IF_rg_f3_13_EQ_0b0_14_THEN_IF_rg_addr_9_BITS_2_ETC__q32 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_ram_ETC___d639 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d608 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d628 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d638)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_13_EQ_0b10_46_THEN_SEXT_IF_rg_f3_13_E_ETC___d707 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d592;
      3'b001:
	  IF_rg_f3_13_EQ_0b10_46_THEN_SEXT_IF_rg_f3_13_E_ETC___d707 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d620;
      3'b010:
	  IF_rg_f3_13_EQ_0b10_46_THEN_SEXT_IF_rg_f3_13_E_ETC___d707 =
	      { {32{IF_rg_f3_13_EQ_0b0_14_THEN_IF_rg_addr_9_BITS_2_ETC__q32[31]}},
		IF_rg_f3_13_EQ_0b0_14_THEN_IF_rg_addr_9_BITS_2_ETC__q32 };
      3'b011:
	  IF_rg_f3_13_EQ_0b10_46_THEN_SEXT_IF_rg_f3_13_E_ETC___d707 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_ram_ETC___d639;
      3'b100:
	  IF_rg_f3_13_EQ_0b10_46_THEN_SEXT_IF_rg_f3_13_E_ETC___d707 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d608;
      3'b101:
	  IF_rg_f3_13_EQ_0b10_46_THEN_SEXT_IF_rg_f3_13_E_ETC___d707 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d628;
      3'b110:
	  IF_rg_f3_13_EQ_0b10_46_THEN_SEXT_IF_rg_f3_13_E_ETC___d707 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d638;
      3'd7: IF_rg_f3_13_EQ_0b10_46_THEN_SEXT_IF_rg_f3_13_E_ETC___d707 = 64'd0;
    endcase
  end
  always@(rg_amo_funct7 or
	  new_st_val__h26559 or
	  new_st_val__h25551 or
	  w2__h36603 or
	  new_st_val__h26531 or
	  new_st_val__h26539 or
	  new_st_val__h26535 or
	  new_st_val__h26554 or new_st_val__h26543 or new_st_val__h26548)
  begin
    case (rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h25456 = new_st_val__h25551;
      5'b00001: _theResult_____2__h25456 = w2__h36603;
      5'b00100: _theResult_____2__h25456 = new_st_val__h26531;
      5'b01000: _theResult_____2__h25456 = new_st_val__h26539;
      5'b01100: _theResult_____2__h25456 = new_st_val__h26535;
      5'b10000: _theResult_____2__h25456 = new_st_val__h26554;
      5'b11000: _theResult_____2__h25456 = new_st_val__h26543;
      5'b11100: _theResult_____2__h25456 = new_st_val__h26548;
      default: _theResult_____2__h25456 = new_st_val__h26559;
    endcase
  end
  always@(x1_avValue_pa__h6045 or old_word64__h22373 or new_st_val__h25154)
  begin
    case (x1_avValue_pa__h6045[2:0])
      3'h0:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d828 =
	      { old_word64__h22373[63:16], new_st_val__h25154[15:0] };
      3'h2:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d828 =
	      { old_word64__h22373[63:32],
		new_st_val__h25154[15:0],
		old_word64__h22373[15:0] };
      3'h4:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d828 =
	      { old_word64__h22373[63:48],
		new_st_val__h25154[15:0],
		old_word64__h22373[31:0] };
      3'h6:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d828 =
	      { new_st_val__h25154[15:0], old_word64__h22373[47:0] };
      default: IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d828 =
		   old_word64__h22373;
    endcase
  end
  always@(x1_avValue_pa__h6045 or old_word64__h22373 or new_st_val__h25154)
  begin
    case (x1_avValue_pa__h6045[2:0])
      3'h0:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d819 =
	      { old_word64__h22373[63:8], new_st_val__h25154[7:0] };
      3'h1:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d819 =
	      { old_word64__h22373[63:16],
		new_st_val__h25154[7:0],
		old_word64__h22373[7:0] };
      3'h2:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d819 =
	      { old_word64__h22373[63:24],
		new_st_val__h25154[7:0],
		old_word64__h22373[15:0] };
      3'h3:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d819 =
	      { old_word64__h22373[63:32],
		new_st_val__h25154[7:0],
		old_word64__h22373[23:0] };
      3'h4:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d819 =
	      { old_word64__h22373[63:40],
		new_st_val__h25154[7:0],
		old_word64__h22373[31:0] };
      3'h5:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d819 =
	      { old_word64__h22373[63:48],
		new_st_val__h25154[7:0],
		old_word64__h22373[39:0] };
      3'h6:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d819 =
	      { old_word64__h22373[63:56],
		new_st_val__h25154[7:0],
		old_word64__h22373[47:0] };
      3'h7:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d819 =
	      { new_st_val__h25154[7:0], old_word64__h22373[55:0] };
    endcase
  end
  always@(x1_avValue_pa__h6045 or old_word64__h22373 or new_st_val__h25154)
  begin
    case (x1_avValue_pa__h6045[2:0])
      3'h0:
	  CASE_x1_avValue_pa045_BITS_2_TO_0_0x0_old_word_ETC__q34 =
	      { old_word64__h22373[63:32], new_st_val__h25154[31:0] };
      3'h4:
	  CASE_x1_avValue_pa045_BITS_2_TO_0_0x0_old_word_ETC__q34 =
	      { new_st_val__h25154[31:0], old_word64__h22373[31:0] };
      default: CASE_x1_avValue_pa045_BITS_2_TO_0_0x0_old_word_ETC__q34 =
		   old_word64__h22373;
    endcase
  end
  always@(rg_f3 or
	  old_word64__h22373 or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d819 or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d828 or
	  CASE_x1_avValue_pa045_BITS_2_TO_0_0x0_old_word_ETC__q34 or
	  new_st_val__h25154)
  begin
    case (rg_f3)
      3'b0:
	  n__h25318 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d819;
      3'b001:
	  n__h25318 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d828;
      3'b010:
	  n__h25318 = CASE_x1_avValue_pa045_BITS_2_TO_0_0x0_old_word_ETC__q34;
      3'b011: n__h25318 = new_st_val__h25154;
      default: n__h25318 = old_word64__h22373;
    endcase
  end
  always@(rg_addr or
	  result__h35007 or
	  result__h35034 or result__h35061 or result__h35088)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1179 =
	      result__h35007;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1179 =
	      result__h35034;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1179 =
	      result__h35061;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1179 =
	      result__h35088;
      default: IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1179 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h34886 or
	  result__h34913 or result__h34940 or result__h34967)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1171 =
	      result__h34886;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1171 =
	      result__h34913;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1171 =
	      result__h34940;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1171 =
	      result__h34967;
      default: IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1171 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h34653 or
	  result__h34680 or
	  result__h34707 or
	  result__h34734 or
	  result__h34761 or
	  result__h34788 or result__h34815 or result__h34842)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1159 =
	      result__h34653;
      3'h1:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1159 =
	      result__h34680;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1159 =
	      result__h34707;
      3'h3:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1159 =
	      result__h34734;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1159 =
	      result__h34761;
      3'h5:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1159 =
	      result__h34788;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1159 =
	      result__h34815;
      3'h7:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1159 =
	      result__h34842;
    endcase
  end
  always@(rg_addr or
	  result__h34417 or
	  result__h34447 or
	  result__h34474 or
	  result__h34501 or
	  result__h34528 or
	  result__h34555 or result__h34582 or result__h34609)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1143 =
	      result__h34417;
      3'h1:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1143 =
	      result__h34447;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1143 =
	      result__h34474;
      3'h3:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1143 =
	      result__h34501;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1143 =
	      result__h34528;
      3'h5:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1143 =
	      result__h34555;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1143 =
	      result__h34582;
      3'h7:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1143 =
	      result__h34609;
    endcase
  end
  always@(rg_addr or result__h35128 or result__h35155)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result5128_0x4_re_ETC__q35 =
	      result__h35128;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result5128_0x4_re_ETC__q35 =
	      result__h35155;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result5128_0x4_re_ETC__q35 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h35193 or result__h35220)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result5193_0x4_re_ETC__q36 =
	      result__h35193;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result5193_0x4_re_ETC__q36 =
	      result__h35220;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result5193_0x4_re_ETC__q36 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1143 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1171 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result5128_0x4_re_ETC__q35 or
	  rg_addr or
	  master_xactor_f_rd_data$D_OUT or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1159 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1179 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result5193_0x4_re_ETC__q36)
  begin
    case (rg_f3)
      3'b0:
	  ld_val__h34357 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1143;
      3'b001:
	  ld_val__h34357 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1171;
      3'b010:
	  ld_val__h34357 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result5128_0x4_re_ETC__q35;
      3'b011:
	  ld_val__h34357 =
	      (rg_addr[2:0] == 3'h0) ?
		master_xactor_f_rd_data$D_OUT[66:3] :
		64'd0;
      3'b100:
	  ld_val__h34357 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1159;
      3'b101:
	  ld_val__h34357 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1179;
      3'b110:
	  ld_val__h34357 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result5193_0x4_re_ETC__q36;
      3'd7: ld_val__h34357 = 64'd0;
    endcase
  end
  always@(rg_addr or result__h38471 or result__h38499)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1296 =
	      result__h38471;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1296 =
	      result__h38499;
      default: IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1296 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h38279 or
	  result__h38307 or result__h38335 or result__h38363)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1286 =
	      result__h38279;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1286 =
	      result__h38307;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1286 =
	      result__h38335;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1286 =
	      result__h38363;
      default: IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1286 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h38154 or
	  result__h38182 or result__h38210 or result__h38238)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1278 =
	      result__h38154;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1278 =
	      result__h38182;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1278 =
	      result__h38210;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1278 =
	      result__h38238;
      default: IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1278 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h37913 or
	  result__h37941 or
	  result__h37969 or
	  result__h37997 or
	  result__h38025 or
	  result__h38053 or result__h38081 or result__h38109)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1266 =
	      result__h37913;
      3'h1:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1266 =
	      result__h37941;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1266 =
	      result__h37969;
      3'h3:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1266 =
	      result__h37997;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1266 =
	      result__h38025;
      3'h5:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1266 =
	      result__h38053;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1266 =
	      result__h38081;
      3'h7:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1266 =
	      result__h38109;
    endcase
  end
  always@(rg_addr or
	  result__h36792 or
	  result__h37700 or
	  result__h37728 or
	  result__h37756 or
	  result__h37784 or
	  result__h37812 or result__h37840 or result__h37868)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1250 =
	      result__h36792;
      3'h1:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1250 =
	      result__h37700;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1250 =
	      result__h37728;
      3'h3:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1250 =
	      result__h37756;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1250 =
	      result__h37784;
      3'h5:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1250 =
	      result__h37812;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1250 =
	      result__h37840;
      3'h7:
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1250 =
	      result__h37868;
    endcase
  end
  always@(rg_addr or result__h38404 or result__h38432)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result8404_0x4_re_ETC__q51 =
	      result__h38404;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result8404_0x4_re_ETC__q51 =
	      result__h38432;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result8404_0x4_re_ETC__q51 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1250 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1278 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result8404_0x4_re_ETC__q51 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_IF__ETC___d1297 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1266 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1286 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1296)
  begin
    case (rg_f3)
      3'b0:
	  w1__h36597 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1250;
      3'b001:
	  w1__h36597 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1278;
      3'b010:
	  w1__h36597 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result8404_0x4_re_ETC__q51;
      3'b011:
	  w1__h36597 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_IF__ETC___d1297;
      3'b100:
	  w1__h36597 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1266;
      3'b101:
	  w1__h36597 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1286;
      3'b110:
	  w1__h36597 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1296;
      3'd7: w1__h36597 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1250 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1278 or
	  w1___1__h36672 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_IF__ETC___d1297 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1266 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1286 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1296)
  begin
    case (rg_f3)
      3'b0:
	  w1__h36601 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1250;
      3'b001:
	  w1__h36601 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1278;
      3'b010: w1__h36601 = w1___1__h36672;
      3'b011:
	  w1__h36601 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_IF__ETC___d1297;
      3'b100:
	  w1__h36601 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1266;
      3'b101:
	  w1__h36601 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1286;
      3'b110:
	  w1__h36601 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1296;
      3'd7: w1__h36601 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1250 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1278 or
	  w16597_BITS_31_TO_0__q52 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_IF__ETC___d1297 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1266 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1286 or
	  IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1296)
  begin
    case (rg_f3)
      3'b0:
	  new_ld_val__h36563 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1250;
      3'b001:
	  new_ld_val__h36563 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_SEX_ETC___d1278;
      3'b010:
	  new_ld_val__h36563 =
	      { {32{w16597_BITS_31_TO_0__q52[31]}},
		w16597_BITS_31_TO_0__q52 };
      3'b011:
	  new_ld_val__h36563 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_IF__ETC___d1297;
      3'b100:
	  new_ld_val__h36563 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1266;
      3'b101:
	  new_ld_val__h36563 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1286;
      3'b110:
	  new_ld_val__h36563 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_0_C_ETC___d1296;
      3'd7: new_ld_val__h36563 = 64'd0;
    endcase
  end
  always@(rg_amo_funct7 or
	  new_st_val__h38592 or
	  new_st_val__h36704 or
	  w2__h36603 or
	  new_st_val__h38564 or
	  new_st_val__h38572 or
	  new_st_val__h38568 or
	  new_st_val__h38587 or new_st_val__h38576 or new_st_val__h38581)
  begin
    case (rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h36609 = new_st_val__h36704;
      5'b00001: _theResult_____2__h36609 = w2__h36603;
      5'b00100: _theResult_____2__h36609 = new_st_val__h38564;
      5'b01000: _theResult_____2__h36609 = new_st_val__h38572;
      5'b01100: _theResult_____2__h36609 = new_st_val__h38568;
      5'b10000: _theResult_____2__h36609 = new_st_val__h38587;
      5'b11000: _theResult_____2__h36609 = new_st_val__h38576;
      5'b11100: _theResult_____2__h36609 = new_st_val__h38581;
      default: _theResult_____2__h36609 = new_st_val__h38592;
    endcase
  end
  always@(rg_f3 or IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_1_E_ETC___d654)
  begin
    case (rg_f3)
      3'b0, 3'b001, 3'b010, 3'b011, 3'b100, 3'b101, 3'b110:
	  CASE_rg_f3_0b0_IF_rg_addr_9_BITS_2_TO_0_17_EQ__ETC__q53 =
	      IF_rg_addr_9_BITS_2_TO_0_17_EQ_0x0_18_THEN_1_E_ETC___d654;
      3'd7: CASE_rg_f3_0b0_IF_rg_addr_9_BITS_2_TO_0_17_EQ__ETC__q53 = 64'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 7'd0;
	rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (ctr_wr_rsps_pending_crg$EN)
	  ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY
	      ctr_wr_rsps_pending_crg$D_IN;
	if (rg_cset_in_cache$EN)
	  rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY rg_cset_in_cache$D_IN;
	if (rg_lower_word32_full$EN)
	  rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY
	      rg_lower_word32_full$D_IN;
	if (rg_lrsc_valid$EN)
	  rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY rg_lrsc_valid$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (rg_addr$EN) rg_addr <= `BSV_ASSIGNMENT_DELAY rg_addr$D_IN;
    if (rg_amo_funct7$EN)
      rg_amo_funct7 <= `BSV_ASSIGNMENT_DELAY rg_amo_funct7$D_IN;
    if (rg_error_during_refill$EN)
      rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  rg_error_during_refill$D_IN;
    if (rg_exc_code$EN) rg_exc_code <= `BSV_ASSIGNMENT_DELAY rg_exc_code$D_IN;
    if (rg_f3$EN) rg_f3 <= `BSV_ASSIGNMENT_DELAY rg_f3$D_IN;
    if (rg_ld_val$EN) rg_ld_val <= `BSV_ASSIGNMENT_DELAY rg_ld_val$D_IN;
    if (rg_lower_word32$EN)
      rg_lower_word32 <= `BSV_ASSIGNMENT_DELAY rg_lower_word32$D_IN;
    if (rg_lrsc_pa$EN) rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY rg_lrsc_pa$D_IN;
    if (rg_mstatus_MXR$EN)
      rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY rg_mstatus_MXR$D_IN;
    if (rg_op$EN) rg_op <= `BSV_ASSIGNMENT_DELAY rg_op$D_IN;
    if (rg_pa$EN) rg_pa <= `BSV_ASSIGNMENT_DELAY rg_pa$D_IN;
    if (rg_priv$EN) rg_priv <= `BSV_ASSIGNMENT_DELAY rg_priv$D_IN;
    if (rg_pte_pa$EN) rg_pte_pa <= `BSV_ASSIGNMENT_DELAY rg_pte_pa$D_IN;
    if (rg_satp$EN) rg_satp <= `BSV_ASSIGNMENT_DELAY rg_satp$D_IN;
    if (rg_sstatus_SUM$EN)
      rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY rg_sstatus_SUM$D_IN;
    if (rg_st_amo_val$EN)
      rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY rg_st_amo_val$D_IN;
    if (rg_victim_way$EN)
      rg_victim_way <= `BSV_ASSIGNMENT_DELAY rg_victim_way$D_IN;
    if (rg_word64_set_in_cache$EN)
      rg_word64_set_in_cache <= `BSV_ASSIGNMENT_DELAY
	  rg_word64_set_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    ctr_wr_rsps_pending_crg = 4'hA;
    rg_addr = 32'hAAAAAAAA;
    rg_amo_funct7 = 7'h2A;
    rg_cset_in_cache = 7'h2A;
    rg_error_during_refill = 1'h0;
    rg_exc_code = 4'hA;
    rg_f3 = 3'h2;
    rg_ld_val = 64'hAAAAAAAAAAAAAAAA;
    rg_lower_word32 = 32'hAAAAAAAA;
    rg_lower_word32_full = 1'h0;
    rg_lrsc_pa = 34'h2AAAAAAAA;
    rg_lrsc_valid = 1'h0;
    rg_mstatus_MXR = 1'h0;
    rg_op = 2'h2;
    rg_pa = 34'h2AAAAAAAA;
    rg_priv = 2'h2;
    rg_pte_pa = 34'h2AAAAAAAA;
    rg_satp = 32'hAAAAAAAA;
    rg_sstatus_SUM = 1'h0;
    rg_st_amo_val = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 4'hA;
    rg_victim_way = 1'h0;
    rg_word64_set_in_cache = 9'h0AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h3289 = $stime;
	  #0;
	end
    v__h3283 = v__h3289 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h3283);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", mem_req_wr_addr_awaddr__h2814);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", x__h2861);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("AXI4_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", mem_req_wr_data_wdata__h3040);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", mem_req_wr_data_wstrb__h3041);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	begin
	  v__h4532 = $stime;
	  #0;
	end
    v__h4526 = v__h4532 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h4526,
		   "D_MMU_Cache",
		   $signed(32'd128),
		   $signed(32'd2));
	else
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h4526,
		   "I_MMU_Cache",
		   $signed(32'd128),
		   $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  f_reset_reqs$D_OUT)
	begin
	  v__h4631 = $stime;
	  #0;
	end
    v__h4625 = v__h4631 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: Flushed", v__h4625, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_reset: Flushed", v__h4625, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h4780 = $stime;
	  #0;
	end
    v__h4774 = v__h4780 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h4774,
		   "D_MMU_Cache",
		   rg_addr);
	else
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h4774,
		   "I_MMU_Cache",
		   rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  rg_satp[31])
	$display("        Priv:%0d  SATP:{mode %0d asid %0h pa %0h}  VA:%0h.%0h.%0h",
		 rg_priv,
		 rg_satp[31],
		 rg_satp[30:22],
		 satp_pa__h1894,
		 rg_addr[31:22],
		 rg_addr[21:12],
		 rg_addr[11:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word64 0x%0h  Byte 0x%0h}",
		 { 2'd0, rg_addr[31:12] },
		 rg_addr[11:5],
		 rg_addr[4:3],
		 rg_addr[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("        CSet 0x%0x: (state, tag):", rg_addr[11:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  !ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  ram_state_and_ctag_cset$DOB[22])
	$write(", 0x%0x", ram_state_and_ctag_cset$DOB[21:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  !ram_state_and_ctag_cset$DOB[22])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  ram_state_and_ctag_cset$DOB[45])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  !ram_state_and_ctag_cset$DOB[45])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  ram_state_and_ctag_cset$DOB[45])
	$write(", 0x%0x", ram_state_and_ctag_cset$DOB[44:23]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  !ram_state_and_ctag_cset$DOB[45])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(" 0x%0x", ram_word64_set$DOB[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(" 0x%0x", ram_word64_set$DOB[127:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d389)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d392)
	$write("VM_XLATE_EXCEPTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  rg_priv_9_ULE_0b1___d90 &&
	  rg_satp[31] &&
	  !tlb$lookup[68])
	$write("VM_XLATE_TLB_MISS");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", x1_avValue_pa__h6045);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", x1_avValue_exc_code__h6046);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "pte_modified: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d404)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d414)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "pte: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", x1_avValue_pte__h6048, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d414 &&
	  NOT_cfg_verbosity_read__0_ULT_2_41___d442)
	$display("    fa_record_pte_A_D_updates:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d414 &&
	  NOT_cfg_verbosity_read__0_ULT_2_41___d442)
	$write("      ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d414 &&
	  NOT_cfg_verbosity_read__0_ULT_2_41___d442)
	$write("TLB_Lookup_Result { ", "hit: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d414 &&
	  NOT_cfg_verbosity_read__0_ULT_2_41___d442)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d414 &&
	  NOT_cfg_verbosity_read__0_ULT_2_41___d442)
	$write(", ", "pte: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d414 &&
	  NOT_cfg_verbosity_read__0_ULT_2_41___d442)
	$write("'h%h", tlb$lookup[67:36]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d414 &&
	  NOT_cfg_verbosity_read__0_ULT_2_41___d442)
	$write(", ", "pte_level: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d414 &&
	  NOT_cfg_verbosity_read__0_ULT_2_41___d442)
	$write("'h%h", tlb$lookup[35:34]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d414 &&
	  NOT_cfg_verbosity_read__0_ULT_2_41___d442)
	$write(", ", "pte_pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d414 &&
	  NOT_cfg_verbosity_read__0_ULT_2_41___d442)
	$write("'h%h", tlb$lookup[33:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d414 &&
	  NOT_cfg_verbosity_read__0_ULT_2_41___d442)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d414 &&
	  NOT_cfg_verbosity_read__0_ULT_2_41___d442)
	$write("      ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d414 &&
	  NOT_cfg_verbosity_read__0_ULT_2_41___d442)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d450)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d453)
	$write("VM_XLATE_EXCEPTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d414 &&
	  NOT_cfg_verbosity_read__0_ULT_2_41___d442)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d414 &&
	  NOT_cfg_verbosity_read__0_ULT_2_41___d442)
	$write("'h%h", x1_avValue_pa__h6045);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d414 &&
	  NOT_cfg_verbosity_read__0_ULT_2_41___d442)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d414 &&
	  NOT_cfg_verbosity_read__0_ULT_2_41___d442)
	$write("'h%h", x1_avValue_exc_code__h6046);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d414 &&
	  NOT_cfg_verbosity_read__0_ULT_2_41___d442)
	$write(", ", "pte_modified: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d453)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d450)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d414 &&
	  NOT_cfg_verbosity_read__0_ULT_2_41___d442)
	$write(", ", "pte: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d414 &&
	  NOT_cfg_verbosity_read__0_ULT_2_41___d442)
	$write("'h%h", x1_avValue_pte__h6048, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d414 &&
	  NOT_cfg_verbosity_read__0_ULT_2_41___d442)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d467)
	$display("    => IO_REQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d473)
	$display("        ASSERTION ERROR: fn_test_cache_hit_or_miss: multiple hits in set at [%0d] and [%0d]",
		 $signed(32'd1),
		 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d669)
	begin
	  v__h21218 = $stime;
	  #0;
	end
    v__h21212 = v__h21218 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d669)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h21212,
		   "D_MMU_Cache",
		   rg_addr,
		   word64__h7467,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h21212,
		   "I_MMU_Cache",
		   rg_addr,
		   word64__h7467,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d681)
	$display("        AMO LR: reserving PA 0x%0h", x1_avValue_pa__h6045);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d669)
	$display("        Read-hit: addr 0x%0h word64 0x%0h",
		 rg_addr,
		 word64__h7467);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d686)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d694)
	$display("        AMO LR: cache refill: cancelling LR/SC reservation for PA 0x%0h",
		 rg_lrsc_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d853)
	$display("        ST: cancelling LR/SC reservation for PA",
		 x1_avValue_pa__h6045);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || tlb$lookup[68]) &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d859)
	$display("        AMO SC: fail: reserved addr 0x%0h, this address 0x%0h",
		 rg_lrsc_pa,
		 x1_avValue_pa__h6045);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || tlb$lookup[68]) &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d865)
	$display("        AMO SC: fail due to invalid LR/SC reservation");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d871)
	$display("        AMO SC result = %0d", lrsc_result__h21595);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d877)
	$display("        Write-Cache-Hit: pa 0x%0h word64 0x%0h",
		 x1_avValue_pa__h6045,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d877)
	$write("        New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d877)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d877)
	$write(" 0x%0x",
	       IF_NOT_ram_state_and_ctag_cset_b_read__96_BIT__ETC___d771);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d877)
	$write(" 0x%0x",
	       IF_ram_state_and_ctag_cset_b_read__96_BIT_45_0_ETC___d770);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d877)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || tlb$lookup[68]) &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d882)
	$display("        Write-Cache-Miss: pa 0x%0h word64 0x%0h",
		 x1_avValue_pa__h6045,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d889)
	$display("        Write-Cache-Hit/Miss: eaddr 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d889)
	$display("        => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d895)
	begin
	  v__h24934 = $stime;
	  #0;
	end
    v__h24928 = v__h24934 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d895)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h24928,
		   "D_MMU_Cache",
		   rg_addr,
		   64'd1,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h24928,
		   "I_MMU_Cache",
		   rg_addr,
		   64'd1,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d895)
	$display("        AMO SC: Fail response for addr 0x%0h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || tlb$lookup[68]) &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d901)
	$display("        AMO Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d907)
	$display("        AMO: addr 0x%0h amo_f7 0x%0h f3 %0d rs2_val 0x%0h",
		 rg_addr,
		 rg_amo_funct7,
		 rg_f3,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d907)
	$display("          PA 0x%0h ", x1_avValue_pa__h6045);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d907)
	$display("          Cache word64 0x%0h, load-result 0x%0h",
		 word64__h7467,
		 word64__h7467);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d907)
	$display("          0x%0h  op  0x%0h -> 0x%0h",
		 word64__h7467,
		 word64__h7467,
		 new_st_val__h25154);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d907)
	$write("          New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d907)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d907)
	$write(" 0x%0x",
	       IF_NOT_ram_state_and_ctag_cset_b_read__96_BIT__ETC___d839);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d907)
	$write(" 0x%0x",
	       IF_ram_state_and_ctag_cset_b_read__96_BIT_45_0_ETC___d838);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d907)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_9_ULE_0b1___d90 || !rg_satp[31] || tlb$lookup[68]) &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d912)
	$display("        AMO_op: cancelling LR/SC reservation for PA",
		 x1_avValue_pa__h6045);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h28445 = $stime;
	  #0;
	end
    v__h28439 = v__h28445 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_tlb_refill for eaddr 0x%0h; req for level 1 PTE",
		   v__h28439,
		   "D_MMU_Cache",
		   rg_addr);
	else
	  $display("%0d: %s.rl_start_tlb_refill for eaddr 0x%0h; req for level 1 PTE",
		   v__h28439,
		   "I_MMU_Cache",
		   rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", lev_1_pte_pa_w64_fa__h28500);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 3'b010);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d974)
	begin
	  v__h29378 = $stime;
	  #0;
	end
    v__h29372 = v__h29378 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d974)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h29372,
		   "D_MMU_Cache",
		   rg_addr,
		   _theResult____h28764,
		   rg_pte_pa,
		   exc_code___1__h6444);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h29372,
		   "I_MMU_Cache",
		   rg_addr,
		   _theResult____h28764,
		   rg_pte_pa,
		   exc_code___1__h6444);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982)
	begin
	  v__h29136 = $stime;
	  #0;
	end
    v__h29130 = v__h29136 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 0",
		   v__h29130,
		   "D_MMU_Cache",
		   rg_addr,
		   _theResult____h28764,
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 0",
		   v__h29130,
		   "I_MMU_Cache",
		   rg_addr,
		   _theResult____h28764,
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982)
	$display("    Req for level 0 PTE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982)
	$write("'h%h", lev_0_pte_pa_w64_fa__h29412);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982)
	$write("'h%h", 3'b010);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d1001)
	begin
	  v__h29776 = $stime;
	  #0;
	end
    v__h29770 = v__h29776 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d1001)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for megapage",
		   v__h29770,
		   "D_MMU_Cache",
		   rg_addr,
		   _theResult____h28764,
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for megapage",
		   v__h29770,
		   "I_MMU_Cache",
		   rg_addr,
		   _theResult____h28764,
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d1001)
	$display("    Addr Space megapage pa: 0x%0h", lev_0_PTN_pa__h29408);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d1007)
	begin
	  v__h29664 = $stime;
	  #0;
	end
    v__h29658 = v__h29664 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d1007)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: megapage pte 0x%0h @ 0x%0h",
		   v__h29658,
		   "D_MMU_Cache",
		   rg_addr,
		   _theResult____h28764,
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: megapage pte 0x%0h @ 0x%0h",
		   v__h29658,
		   "I_MMU_Cache",
		   rg_addr,
		   _theResult____h28764,
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  _theResult____h28764[0] &&
	  (_theResult____h28764[1] || !_theResult____h28764[2]) &&
	  (_theResult____h28764[3] || _theResult____h28764[1]) &&
	  _theResult____h28764[19:10] != 10'd0)
	$display("    Invalid PTE: PPN [0] is not zero; page fault %0d",
		 exc_code___1__h6444);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h29307 = $stime;
	  #0;
	end
    v__h29301 = v__h29307 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h29301,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h2597);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h29301,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h2597);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d974)
	begin
	  v__h30315 = $stime;
	  #0;
	end
    v__h30309 = v__h30315 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d974)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h30309,
		   "D_MMU_Cache",
		   rg_addr,
		   _theResult____h28764,
		   rg_pte_pa,
		   exc_code___1__h6444);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h30309,
		   "I_MMU_Cache",
		   rg_addr,
		   _theResult____h28764,
		   rg_pte_pa,
		   exc_code___1__h6444);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982)
	begin
	  v__h30386 = $stime;
	  #0;
	end
    v__h30380 = v__h30386 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d982)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x50h: Not a leaf PTE; page fault %0d",
		   v__h30380,
		   "D_MMU_Cache",
		   rg_addr,
		   _theResult____h28764,
		   rg_pte_pa,
		   exc_code___1__h6444);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x50h: Not a leaf PTE; page fault %0d",
		   v__h30380,
		   "I_MMU_Cache",
		   rg_addr,
		   _theResult____h28764,
		   rg_pte_pa,
		   exc_code___1__h6444);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d1033)
	begin
	  v__h30468 = $stime;
	  #0;
	end
    v__h30462 = v__h30468 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d1033)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE",
		   v__h30462,
		   "D_MMU_Cache",
		   rg_addr,
		   _theResult____h28764,
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE",
		   v__h30462,
		   "I_MMU_Cache",
		   rg_addr,
		   _theResult____h28764,
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data_first__33_BITS_2_TO_1__ETC___d1033)
	$display("    Addr Space page pa: 0x%0h", lev_0_PTN_pa__h29408);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h30244 = $stime;
	  #0;
	end
    v__h30238 = v__h30244 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h30238,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h2597);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h30238,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h2597);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h30593 = $stime;
	  #0;
	end
    v__h30587 = v__h30593 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_cache_refill: ",
		   v__h30587,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_start_cache_refill: ",
		   v__h30587,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("    To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", cline_fabric_addr__h30646);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 8'd3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 3'b011);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$display("    Victim way %0d; => CACHE_REFILL", tmp__h30786[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_055___d1056)
	begin
	  v__h31284 = $stime;
	  #0;
	end
    v__h31278 = v__h31284 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_055___d1056)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h31278,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h31278,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_055___d1056)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_055___d1056)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_055___d1056)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_055___d1056)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_055___d1056)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_055___d1056)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_055___d1056)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_055___d1056)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_055___d1056 &&
	  master_xactor_f_rd_data$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_055___d1056 &&
	  !master_xactor_f_rd_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_055___d1056)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_055___d1056)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_055___d1056)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h31506 = $stime;
	  #0;
	end
    v__h31500 = v__h31506 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h31500,
		   "D_MMU_Cache",
		   access_exc_code__h2597);
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h31500,
		   "I_MMU_Cache",
		   access_exc_code__h2597);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[1:0] == 2'd3 &&
	  (master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	   rg_error_during_refill) &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[1:0] == 2'd3 &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !rg_error_during_refill &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_055___d1056)
	$display("        Updating Cache word64_set 0x%0h, word64_in_cline %0d) old => new",
		 rg_word64_set_in_cache,
		 rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_055___d1056)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_055___d1056)
	$write(" 0x%0x", ram_word64_set$DOB[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_055___d1056)
	$write(" 0x%0x", ram_word64_set$DOB[127:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_055___d1056)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_055___d1056)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_055___d1056)
	$write(" 0x%0x",
	       rg_victim_way ?
		 ram_word64_set$DOB[63:0] :
		 master_xactor_f_rd_data$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_055___d1056)
	$write(" 0x%0x",
	       rg_victim_way ?
		 master_xactor_f_rd_data$D_OUT[66:3] :
		 ram_word64_set$DOB[127:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_055___d1056)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_rereq && !cfg_verbosity_read__0_ULE_1___d41)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 rg_addr[11:5],
		 rg_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h33898 = $stime;
	  #0;
	end
    v__h33892 = v__h33898 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h33892,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h33892,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", fabric_addr__h36020);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", value__h36149);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h34248 = $stime;
	  #0;
	end
    v__h34242 = v__h34248 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h34242,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h34242,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d41)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d41)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d41 &&
	  master_xactor_f_rd_data$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d41 &&
	  !master_xactor_f_rd_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h35348 = $stime;
	  #0;
	end
    v__h35342 = v__h35348 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h35342,
		   "D_MMU_Cache",
		   rg_addr,
		   ld_val__h34357);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h35342,
		   "I_MMU_Cache",
		   rg_addr,
		   ld_val__h34357);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h35455 = $stime;
	  #0;
	end
    v__h35449 = v__h35455 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h35449,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h35449,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h35560 = $stime;
	  #0;
	end
    v__h35554 = v__h35560 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h35554,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h35554,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h35640 = $stime;
	  #0;
	end
    v__h35634 = v__h35640 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h35634,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h35634,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d41)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h35850 = $stime;
	  #0;
	end
    v__h35844 = v__h35850 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h35844,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h35844,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__0_ULE_1___d41)
	$display("    FAIL due to I/O address.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__0_ULE_1___d41)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h35968 = $stime;
	  #0;
	end
    v__h35962 = v__h35968 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h35962,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h35962,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", fabric_addr__h36020);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", value__h36149);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h36262 = $stime;
	  #0;
	end
    v__h36256 = v__h36262 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h36256,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h36256,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  master_xactor_f_rd_data$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41 &&
	  !master_xactor_f_rd_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h36437 = $stime;
	  #0;
	end
    v__h36431 = v__h36437 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h36431,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h36431,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h38696 = $stime;
	  #0;
	end
    v__h38690 = v__h38696 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h38690,
		   "D_MMU_Cache",
		   rg_addr,
		   new_ld_val__h36563);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h38690,
		   "I_MMU_Cache",
		   rg_addr,
		   new_ld_val__h36563);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h36533 = $stime;
	  #0;
	end
    v__h36527 = v__h36533 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		   v__h36527,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		   v__h36527,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h39303 = $stime;
	  #0;
	end
    v__h39297 = v__h39303 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h39297,
		 "D_MMU_Cache",
		 $unsigned(b__h28399));
	else
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h39297,
		 "I_MMU_Cache",
		 $unsigned(b__h28399));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	begin
	  v__h39264 = $stime;
	  #0;
	end
    v__h39258 = v__h39264 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h39258,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h39258,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset)
	begin
	  v__h4064 = $stime;
	  #0;
	end
    v__h4058 = v__h4064 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset)
	if (dmem_not_imem)
	  $display("%0d: %s: cache size %0d KB, associativity %0d, line size %0d bytes (= %0d XLEN words)",
		   v__h4058,
		   "D_MMU_Cache",
		   $signed(32'd8),
		   $signed(32'd2),
		   $signed(32'd32),
		   $signed(32'd8));
	else
	  $display("%0d: %s: cache size %0d KB, associativity %0d, line size %0d bytes (= %0d XLEN words)",
		   v__h4058,
		   "I_MMU_Cache",
		   $signed(32'd8),
		   $signed(32'd2),
		   $signed(32'd32),
		   $signed(32'd8));
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h39651 = $stime;
	  #0;
	end
    v__h39645 = v__h39651 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write("%0d: %m.req: op:", v__h39645);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d41 && req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d41 && req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d41 && req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(" f3:%0d addr:0x%0h st_value:0x%0h",
	       req_f3,
	       req_addr,
	       req_st_value,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d41) $write("    priv:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d41 && req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d41 && req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d41 && req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d41 && req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d41)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d41)
	$display("    amo_funct7 = 0x%0h", req_amo_funct7);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req &&
	  req_f3_BITS_1_TO_0_383_EQ_0b0_384_OR_req_f3_BI_ETC___d1413 &&
	  !cfg_verbosity_read__0_ULE_1___d41)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 req_addr[11:5],
		 req_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_tlb_flush && !cfg_verbosity_read__0_ULE_1___d41)
	begin
	  v__h41026 = $stime;
	  #0;
	end
    v__h41020 = v__h41026 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_tlb_flush && !cfg_verbosity_read__0_ULE_1___d41)
	if (dmem_not_imem)
	  $display("%0d: %s.tlb_flush", v__h41020, "D_MMU_Cache");
	else
	  $display("%0d: %s.tlb_flush", v__h41020, "I_MMU_Cache");
  end
  // synopsys translate_on
endmodule  // mkMMU_Cache

