//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_core_request_put    O     1 reg
// server_core_response_get       O    71
// RDY_server_core_response_get   O     1 reg
// verbosity                      I     4
// CLK                            I     1 clock
// RST_N                          I     1 reset
// server_core_request_put        I   138
// EN_server_core_request_put     I     1
// EN_server_core_response_get    I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPositCore(verbosity,
		   CLK,
		   RST_N,

		   server_core_request_put,
		   EN_server_core_request_put,
		   RDY_server_core_request_put,

		   EN_server_core_response_get,
		   server_core_response_get,
		   RDY_server_core_response_get);
  input  [3 : 0] verbosity;
  input  CLK;
  input  RST_N;

  // action method server_core_request_put
  input  [137 : 0] server_core_request_put;
  input  EN_server_core_request_put;
  output RDY_server_core_request_put;

  // actionvalue method server_core_response_get
  input  EN_server_core_response_get;
  output [70 : 0] server_core_response_get;
  output RDY_server_core_response_get;

  // signals for module outputs
  wire [70 : 0] server_core_response_get;
  wire RDY_server_core_request_put, RDY_server_core_response_get;

  // inlined wires
  wire [32 : 0] ffI_f_rv$port0__write_1,
		ffI_f_rv$port1__read,
		ffI_f_rv$port2__read;
  wire [3 : 0] opcode_in_rv$port0__write_1,
	       opcode_in_rv$port1__read,
	       opcode_in_rv$port2__read;
  wire ffI_f_rv$EN_port0__write, opcode_in_rv$EN_port1__write;

  // register fda_check_quire
  reg fda_check_quire;
  wire fda_check_quire$D_IN, fda_check_quire$EN;

  // register fda_divider_intDivide_rg_denom
  reg [19 : 0] fda_divider_intDivide_rg_denom;
  wire [19 : 0] fda_divider_intDivide_rg_denom$D_IN;
  wire fda_divider_intDivide_rg_denom$EN;

  // register fda_divider_intDivide_rg_denom2
  reg [57 : 0] fda_divider_intDivide_rg_denom2;
  reg [57 : 0] fda_divider_intDivide_rg_denom2$D_IN;
  wire fda_divider_intDivide_rg_denom2$EN;

  // register fda_divider_intDivide_rg_n
  reg [38 : 0] fda_divider_intDivide_rg_n;
  reg [38 : 0] fda_divider_intDivide_rg_n$D_IN;
  wire fda_divider_intDivide_rg_n$EN;

  // register fda_divider_intDivide_rg_numer
  reg [57 : 0] fda_divider_intDivide_rg_numer;
  wire [57 : 0] fda_divider_intDivide_rg_numer$D_IN;
  wire fda_divider_intDivide_rg_numer$EN;

  // register fda_divider_intDivide_rg_quo
  reg [38 : 0] fda_divider_intDivide_rg_quo;
  wire [38 : 0] fda_divider_intDivide_rg_quo$D_IN;
  wire fda_divider_intDivide_rg_quo$EN;

  // register fda_divider_intDivide_rg_state
  reg [1 : 0] fda_divider_intDivide_rg_state;
  reg [1 : 0] fda_divider_intDivide_rg_state$D_IN;
  wire fda_divider_intDivide_rg_state$EN;

  // register ffI_f_rv
  reg [32 : 0] ffI_f_rv;
  wire [32 : 0] ffI_f_rv$D_IN;
  wire ffI_f_rv$EN;

  // register fma_check_quire
  reg fma_check_quire;
  wire fma_check_quire$D_IN, fma_check_quire$EN;

  // register opcode_in_rv
  reg [3 : 0] opcode_in_rv;
  wire [3 : 0] opcode_in_rv$D_IN;
  wire opcode_in_rv$EN;

  // register rg_quire
  reg [287 : 0] rg_quire;
  reg [287 : 0] rg_quire$D_IN;
  wire rg_quire$EN;

  // register rg_quire_busy
  reg rg_quire_busy;
  wire rg_quire_busy$D_IN, rg_quire_busy$EN;

  // ports of submodule extracter1_fifo_output_reg
  wire [29 : 0] extracter1_fifo_output_reg$D_IN,
		extracter1_fifo_output_reg$D_OUT;
  wire extracter1_fifo_output_reg$CLR,
       extracter1_fifo_output_reg$DEQ,
       extracter1_fifo_output_reg$EMPTY_N,
       extracter1_fifo_output_reg$ENQ,
       extracter1_fifo_output_reg$FULL_N;

  // ports of submodule extracter1_fifo_stage0_reg
  wire [25 : 0] extracter1_fifo_stage0_reg$D_IN;
  wire extracter1_fifo_stage0_reg$CLR,
       extracter1_fifo_stage0_reg$DEQ,
       extracter1_fifo_stage0_reg$ENQ;

  // ports of submodule extracter1_fifo_stage1_reg
  wire [34 : 0] extracter1_fifo_stage1_reg$D_IN;
  wire extracter1_fifo_stage1_reg$CLR,
       extracter1_fifo_stage1_reg$DEQ,
       extracter1_fifo_stage1_reg$ENQ;

  // ports of submodule extracter1_fifo_stage2_reg
  wire [31 : 0] extracter1_fifo_stage2_reg$D_IN;
  wire extracter1_fifo_stage2_reg$CLR,
       extracter1_fifo_stage2_reg$DEQ,
       extracter1_fifo_stage2_reg$ENQ;

  // ports of submodule extracter2_fifo_output_reg
  wire [29 : 0] extracter2_fifo_output_reg$D_IN,
		extracter2_fifo_output_reg$D_OUT;
  wire extracter2_fifo_output_reg$CLR,
       extracter2_fifo_output_reg$DEQ,
       extracter2_fifo_output_reg$EMPTY_N,
       extracter2_fifo_output_reg$ENQ,
       extracter2_fifo_output_reg$FULL_N;

  // ports of submodule extracter2_fifo_stage0_reg
  wire [25 : 0] extracter2_fifo_stage0_reg$D_IN;
  wire extracter2_fifo_stage0_reg$CLR,
       extracter2_fifo_stage0_reg$DEQ,
       extracter2_fifo_stage0_reg$ENQ;

  // ports of submodule extracter2_fifo_stage1_reg
  wire [34 : 0] extracter2_fifo_stage1_reg$D_IN;
  wire extracter2_fifo_stage1_reg$CLR,
       extracter2_fifo_stage1_reg$DEQ,
       extracter2_fifo_stage1_reg$ENQ;

  // ports of submodule extracter2_fifo_stage2_reg
  wire [31 : 0] extracter2_fifo_stage2_reg$D_IN;
  wire extracter2_fifo_stage2_reg$CLR,
       extracter2_fifo_stage2_reg$DEQ,
       extracter2_fifo_stage2_reg$ENQ;

  // ports of submodule fda_adder_fifo_output_reg
  wire fda_adder_fifo_output_reg$CLR,
       fda_adder_fifo_output_reg$DEQ,
       fda_adder_fifo_output_reg$EMPTY_N,
       fda_adder_fifo_output_reg$ENQ,
       fda_adder_fifo_output_reg$FULL_N;

  // ports of submodule fda_adder_fifo_stage0_reg
  wire [294 : 0] fda_adder_fifo_stage0_reg$D_IN,
		 fda_adder_fifo_stage0_reg$D_OUT;
  wire fda_adder_fifo_stage0_reg$CLR,
       fda_adder_fifo_stage0_reg$DEQ,
       fda_adder_fifo_stage0_reg$EMPTY_N,
       fda_adder_fifo_stage0_reg$ENQ,
       fda_adder_fifo_stage0_reg$FULL_N;

  // ports of submodule fda_divider_fifo_output_reg
  wire [292 : 0] fda_divider_fifo_output_reg$D_IN,
		 fda_divider_fifo_output_reg$D_OUT;
  wire fda_divider_fifo_output_reg$CLR,
       fda_divider_fifo_output_reg$DEQ,
       fda_divider_fifo_output_reg$EMPTY_N,
       fda_divider_fifo_output_reg$ENQ,
       fda_divider_fifo_output_reg$FULL_N;

  // ports of submodule fda_divider_fifo_stage0_reg
  wire [12 : 0] fda_divider_fifo_stage0_reg$D_IN,
		fda_divider_fifo_stage0_reg$D_OUT;
  wire fda_divider_fifo_stage0_reg$CLR,
       fda_divider_fifo_stage0_reg$DEQ,
       fda_divider_fifo_stage0_reg$EMPTY_N,
       fda_divider_fifo_stage0_reg$ENQ,
       fda_divider_fifo_stage0_reg$FULL_N;

  // ports of submodule fda_divider_intDivide_fifo_output_reg
  wire [40 : 0] fda_divider_intDivide_fifo_output_reg$D_IN,
		fda_divider_intDivide_fifo_output_reg$D_OUT;
  wire fda_divider_intDivide_fifo_output_reg$CLR,
       fda_divider_intDivide_fifo_output_reg$DEQ,
       fda_divider_intDivide_fifo_output_reg$EMPTY_N,
       fda_divider_intDivide_fifo_output_reg$ENQ,
       fda_divider_intDivide_fifo_output_reg$FULL_N;

  // ports of submodule fda_ffO
  wire fda_ffO$CLR, fda_ffO$DEQ, fda_ffO$EMPTY_N, fda_ffO$ENQ, fda_ffO$FULL_N;

  // ports of submodule ffI
  wire [137 : 0] ffI$D_IN, ffI$D_OUT;
  wire ffI$CLR, ffI$DEQ, ffI$EMPTY_N, ffI$ENQ, ffI$FULL_N;

  // ports of submodule ffO
  reg [70 : 0] ffO$D_IN;
  wire [70 : 0] ffO$D_OUT;
  wire ffO$CLR, ffO$DEQ, ffO$EMPTY_N, ffO$ENQ, ffO$FULL_N;

  // ports of submodule fma_adder_fifo_output_reg
  wire fma_adder_fifo_output_reg$CLR,
       fma_adder_fifo_output_reg$DEQ,
       fma_adder_fifo_output_reg$EMPTY_N,
       fma_adder_fifo_output_reg$ENQ,
       fma_adder_fifo_output_reg$FULL_N;

  // ports of submodule fma_adder_fifo_stage0_reg
  wire [294 : 0] fma_adder_fifo_stage0_reg$D_IN,
		 fma_adder_fifo_stage0_reg$D_OUT;
  wire fma_adder_fifo_stage0_reg$CLR,
       fma_adder_fifo_stage0_reg$DEQ,
       fma_adder_fifo_stage0_reg$EMPTY_N,
       fma_adder_fifo_stage0_reg$ENQ,
       fma_adder_fifo_stage0_reg$FULL_N;

  // ports of submodule fma_ffO
  wire fma_ffO$CLR, fma_ffO$DEQ, fma_ffO$EMPTY_N, fma_ffO$ENQ, fma_ffO$FULL_N;

  // ports of submodule fma_multiplier_fifo_output_reg
  wire [292 : 0] fma_multiplier_fifo_output_reg$D_IN,
		 fma_multiplier_fifo_output_reg$D_OUT;
  wire fma_multiplier_fifo_output_reg$CLR,
       fma_multiplier_fifo_output_reg$DEQ,
       fma_multiplier_fifo_output_reg$EMPTY_N,
       fma_multiplier_fifo_output_reg$ENQ,
       fma_multiplier_fifo_output_reg$FULL_N;

  // ports of submodule fma_multiplier_fifo_stage0_reg
  wire [52 : 0] fma_multiplier_fifo_stage0_reg$D_IN,
		fma_multiplier_fifo_stage0_reg$D_OUT;
  wire fma_multiplier_fifo_stage0_reg$CLR,
       fma_multiplier_fifo_stage0_reg$DEQ,
       fma_multiplier_fifo_stage0_reg$EMPTY_N,
       fma_multiplier_fifo_stage0_reg$ENQ,
       fma_multiplier_fifo_stage0_reg$FULL_N;

  // ports of submodule ftop_fToP_fifo_output_reg
  wire [32 : 0] ftop_fToP_fifo_output_reg$D_IN,
		ftop_fToP_fifo_output_reg$D_OUT;
  wire ftop_fToP_fifo_output_reg$CLR,
       ftop_fToP_fifo_output_reg$DEQ,
       ftop_fToP_fifo_output_reg$EMPTY_N,
       ftop_fToP_fifo_output_reg$ENQ,
       ftop_fToP_fifo_output_reg$FULL_N;

  // ports of submodule ftop_fToP_fifo_stage0_reg
  wire [38 : 0] ftop_fToP_fifo_stage0_reg$D_IN,
		ftop_fToP_fifo_stage0_reg$D_OUT;
  wire ftop_fToP_fifo_stage0_reg$CLR,
       ftop_fToP_fifo_stage0_reg$DEQ,
       ftop_fToP_fifo_stage0_reg$EMPTY_N,
       ftop_fToP_fifo_stage0_reg$ENQ,
       ftop_fToP_fifo_stage0_reg$FULL_N;

  // ports of submodule ftop_ffO
  wire [32 : 0] ftop_ffO$D_IN, ftop_ffO$D_OUT;
  wire ftop_ffO$CLR,
       ftop_ffO$DEQ,
       ftop_ffO$EMPTY_N,
       ftop_ffO$ENQ,
       ftop_ffO$FULL_N;

  // ports of submodule need_normalize
  wire need_normalize$CLR,
       need_normalize$DEQ,
       need_normalize$D_IN,
       need_normalize$ENQ;

  // ports of submodule normalizer_fifo_output_reg
  wire [27 : 0] normalizer_fifo_output_reg$D_IN,
		normalizer_fifo_output_reg$D_OUT;
  wire normalizer_fifo_output_reg$CLR,
       normalizer_fifo_output_reg$DEQ,
       normalizer_fifo_output_reg$EMPTY_N,
       normalizer_fifo_output_reg$ENQ,
       normalizer_fifo_output_reg$FULL_N;

  // ports of submodule normalizer_fifo_stage0_reg
  wire [49 : 0] normalizer_fifo_stage0_reg$D_IN;
  wire normalizer_fifo_stage0_reg$CLR,
       normalizer_fifo_stage0_reg$DEQ,
       normalizer_fifo_stage0_reg$ENQ;

  // ports of submodule normalizer_fifo_stage1_reg
  wire [53 : 0] normalizer_fifo_stage1_reg$D_IN;
  wire normalizer_fifo_stage1_reg$CLR,
       normalizer_fifo_stage1_reg$DEQ,
       normalizer_fifo_stage1_reg$ENQ;

  // ports of submodule normalizer_fifo_stage2_reg
  wire [27 : 0] normalizer_fifo_stage2_reg$D_IN;
  wire normalizer_fifo_stage2_reg$CLR,
       normalizer_fifo_stage2_reg$DEQ,
       normalizer_fifo_stage2_reg$ENQ;

  // ports of submodule opcode_norm
  wire [2 : 0] opcode_norm$D_IN, opcode_norm$D_OUT;
  wire opcode_norm$CLR,
       opcode_norm$DEQ,
       opcode_norm$EMPTY_N,
       opcode_norm$ENQ,
       opcode_norm$FULL_N;

  // ports of submodule opcode_out
  wire [2 : 0] opcode_out$D_IN, opcode_out$D_OUT;
  wire opcode_out$CLR,
       opcode_out$DEQ,
       opcode_out$EMPTY_N,
       opcode_out$ENQ,
       opcode_out$FULL_N;

  // ports of submodule ptof_ffO
  wire [31 : 0] ptof_ffO$D_IN, ptof_ffO$D_OUT;
  wire ptof_ffO$CLR,
       ptof_ffO$DEQ,
       ptof_ffO$EMPTY_N,
       ptof_ffO$ENQ,
       ptof_ffO$FULL_N;

  // ports of submodule ptof_ptoF_fifo_output_reg
  reg [31 : 0] ptof_ptoF_fifo_output_reg$D_IN;
  wire [31 : 0] ptof_ptoF_fifo_output_reg$D_OUT;
  wire ptof_ptoF_fifo_output_reg$CLR,
       ptof_ptoF_fifo_output_reg$DEQ,
       ptof_ptoF_fifo_output_reg$EMPTY_N,
       ptof_ptoF_fifo_output_reg$ENQ,
       ptof_ptoF_fifo_output_reg$FULL_N;

  // ports of submodule ptof_ptoF_fifo_stage0_reg
  wire [41 : 0] ptof_ptoF_fifo_stage0_reg$D_IN,
		ptof_ptoF_fifo_stage0_reg$D_OUT;
  wire ptof_ptoF_fifo_stage0_reg$CLR,
       ptof_ptoF_fifo_stage0_reg$DEQ,
       ptof_ptoF_fifo_stage0_reg$EMPTY_N,
       ptof_ptoF_fifo_stage0_reg$ENQ,
       ptof_ptoF_fifo_stage0_reg$FULL_N;

  // ports of submodule ptoq_ffO
  wire ptoq_ffO$CLR,
       ptoq_ffO$DEQ,
       ptoq_ffO$EMPTY_N,
       ptoq_ffO$ENQ,
       ptoq_ffO$FULL_N;

  // ports of submodule ptoq_positToquire_fifo_output_reg
  wire ptoq_positToquire_fifo_output_reg$CLR,
       ptoq_positToquire_fifo_output_reg$DEQ,
       ptoq_positToquire_fifo_output_reg$EMPTY_N,
       ptoq_positToquire_fifo_output_reg$ENQ,
       ptoq_positToquire_fifo_output_reg$FULL_N;

  // ports of submodule ptoq_positToquire_fifo_stage0_reg
  wire [29 : 0] ptoq_positToquire_fifo_stage0_reg$D_IN;
  wire ptoq_positToquire_fifo_stage0_reg$CLR,
       ptoq_positToquire_fifo_stage0_reg$DEQ,
       ptoq_positToquire_fifo_stage0_reg$ENQ;

  // ports of submodule ptoq_positToquire_fifo_stage1_reg
  wire [266 : 0] ptoq_positToquire_fifo_stage1_reg$D_IN,
		 ptoq_positToquire_fifo_stage1_reg$D_OUT;
  wire ptoq_positToquire_fifo_stage1_reg$CLR,
       ptoq_positToquire_fifo_stage1_reg$DEQ,
       ptoq_positToquire_fifo_stage1_reg$EMPTY_N,
       ptoq_positToquire_fifo_stage1_reg$ENQ,
       ptoq_positToquire_fifo_stage1_reg$FULL_N;

  // ports of submodule qtop_ffO
  wire [32 : 0] qtop_ffO$D_IN, qtop_ffO$D_OUT;
  wire qtop_ffO$CLR,
       qtop_ffO$DEQ,
       qtop_ffO$EMPTY_N,
       qtop_ffO$ENQ,
       qtop_ffO$FULL_N;

  // ports of submodule qtop_quireToPosit1_fifo_output_reg
  wire [32 : 0] qtop_quireToPosit1_fifo_output_reg$D_IN,
		qtop_quireToPosit1_fifo_output_reg$D_OUT;
  wire qtop_quireToPosit1_fifo_output_reg$CLR,
       qtop_quireToPosit1_fifo_output_reg$DEQ,
       qtop_quireToPosit1_fifo_output_reg$EMPTY_N,
       qtop_quireToPosit1_fifo_output_reg$ENQ,
       qtop_quireToPosit1_fifo_output_reg$FULL_N;

  // ports of submodule qtop_quireToPosit1_fifo_stage0_reg
  wire [298 : 0] qtop_quireToPosit1_fifo_stage0_reg$D_IN,
		 qtop_quireToPosit1_fifo_stage0_reg$D_OUT;
  wire qtop_quireToPosit1_fifo_stage0_reg$CLR,
       qtop_quireToPosit1_fifo_stage0_reg$DEQ,
       qtop_quireToPosit1_fifo_stage0_reg$EMPTY_N,
       qtop_quireToPosit1_fifo_stage0_reg$ENQ,
       qtop_quireToPosit1_fifo_stage0_reg$FULL_N;

  // ports of submodule qtop_quireToPosit1_fifo_stage1_reg
  wire [32 : 0] qtop_quireToPosit1_fifo_stage1_reg$D_IN,
		qtop_quireToPosit1_fifo_stage1_reg$D_OUT;
  wire qtop_quireToPosit1_fifo_stage1_reg$CLR,
       qtop_quireToPosit1_fifo_stage1_reg$DEQ,
       qtop_quireToPosit1_fifo_stage1_reg$EMPTY_N,
       qtop_quireToPosit1_fifo_stage1_reg$ENQ,
       qtop_quireToPosit1_fifo_stage1_reg$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_extract_in,
       CAN_FIRE_RL_fda_adder_stage_1,
       CAN_FIRE_RL_fda_divider_intDivide_rl_loop1,
       CAN_FIRE_RL_fda_divider_intDivide_rl_loop2,
       CAN_FIRE_RL_fda_divider_stage_1,
       CAN_FIRE_RL_fda_rl_connect1,
       CAN_FIRE_RL_fda_rl_out,
       CAN_FIRE_RL_fma_adder_stage_1,
       CAN_FIRE_RL_fma_multiplier_stage_1,
       CAN_FIRE_RL_fma_rl_connect1,
       CAN_FIRE_RL_fma_rl_out,
       CAN_FIRE_RL_ftop_fToP_stage_1,
       CAN_FIRE_RL_ftop_rl_out,
       CAN_FIRE_RL_ptof_ptoF_stage_2,
       CAN_FIRE_RL_ptof_rl_out,
       CAN_FIRE_RL_ptoq_positToquire_stage_2,
       CAN_FIRE_RL_ptoq_rl_out,
       CAN_FIRE_RL_qtop_quireToPosit1_stage_1,
       CAN_FIRE_RL_qtop_quireToPosit1_stage_2,
       CAN_FIRE_RL_qtop_rl_out,
       CAN_FIRE_RL_rl_fda,
       CAN_FIRE_RL_rl_fma,
       CAN_FIRE_RL_rl_ftop,
       CAN_FIRE_RL_rl_norm,
       CAN_FIRE_RL_rl_out,
       CAN_FIRE_RL_rl_ptof,
       CAN_FIRE_RL_rl_ptoq,
       CAN_FIRE_RL_rl_qtop,
       CAN_FIRE_server_core_request_put,
       CAN_FIRE_server_core_response_get,
       WILL_FIRE_RL_extract_in,
       WILL_FIRE_RL_fda_adder_stage_1,
       WILL_FIRE_RL_fda_divider_intDivide_rl_loop1,
       WILL_FIRE_RL_fda_divider_intDivide_rl_loop2,
       WILL_FIRE_RL_fda_divider_stage_1,
       WILL_FIRE_RL_fda_rl_connect1,
       WILL_FIRE_RL_fda_rl_out,
       WILL_FIRE_RL_fma_adder_stage_1,
       WILL_FIRE_RL_fma_multiplier_stage_1,
       WILL_FIRE_RL_fma_rl_connect1,
       WILL_FIRE_RL_fma_rl_out,
       WILL_FIRE_RL_ftop_fToP_stage_1,
       WILL_FIRE_RL_ftop_rl_out,
       WILL_FIRE_RL_ptof_ptoF_stage_2,
       WILL_FIRE_RL_ptof_rl_out,
       WILL_FIRE_RL_ptoq_positToquire_stage_2,
       WILL_FIRE_RL_ptoq_rl_out,
       WILL_FIRE_RL_qtop_quireToPosit1_stage_1,
       WILL_FIRE_RL_qtop_quireToPosit1_stage_2,
       WILL_FIRE_RL_qtop_rl_out,
       WILL_FIRE_RL_rl_fda,
       WILL_FIRE_RL_rl_fma,
       WILL_FIRE_RL_rl_ftop,
       WILL_FIRE_RL_rl_norm,
       WILL_FIRE_RL_rl_out,
       WILL_FIRE_RL_rl_ptof,
       WILL_FIRE_RL_rl_ptoq,
       WILL_FIRE_RL_rl_qtop,
       WILL_FIRE_server_core_request_put,
       WILL_FIRE_server_core_response_get;

  // inputs to muxes for submodule ports
  wire [287 : 0] MUX_rg_quire$write_1__VAL_1,
		 MUX_rg_quire$write_1__VAL_2,
		 MUX_rg_quire$write_1__VAL_3;
  wire [57 : 0] MUX_fda_divider_intDivide_rg_denom2$write_1__VAL_1,
		MUX_fda_divider_intDivide_rg_denom2$write_1__VAL_2,
		MUX_fda_divider_intDivide_rg_denom2$write_1__VAL_3,
		MUX_fda_divider_intDivide_rg_numer$write_1__VAL_1,
		MUX_fda_divider_intDivide_rg_numer$write_1__VAL_2;
  wire [40 : 0] MUX_fda_divider_intDivide_fifo_output_reg$enq_1__VAL_1,
		MUX_fda_divider_intDivide_fifo_output_reg$enq_1__VAL_2;
  wire [38 : 0] MUX_fda_divider_intDivide_rg_n$write_1__VAL_1,
		MUX_fda_divider_intDivide_rg_n$write_1__VAL_3,
		MUX_fda_divider_intDivide_rg_quo$write_1__VAL_1,
		MUX_fda_divider_intDivide_rg_quo$write_1__VAL_2;
  wire [1 : 0] MUX_fda_divider_intDivide_rg_state$write_1__VAL_3;
  wire MUX_fda_divider_intDivide_fifo_output_reg$enq_1__SEL_1,
       MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_1,
       MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_2,
       MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_3,
       MUX_fda_divider_intDivide_rg_numer$write_1__SEL_2,
       MUX_fda_divider_intDivide_rg_state$write_1__SEL_2,
       MUX_opcode_out$enq_1__SEL_1,
       MUX_rg_quire_busy$write_1__SEL_1,
       MUX_rg_quire_busy$write_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h86879;
  reg [31 : 0] v__h143348;
  reg [31 : 0] v__h147866;
  reg [31 : 0] v__h138880;
  reg [31 : 0] v__h149258;
  reg [31 : 0] v__h86873;
  reg [31 : 0] v__h138874;
  reg [31 : 0] v__h143342;
  reg [31 : 0] v__h147860;
  reg [31 : 0] v__h149252;
  // synopsys translate_on

  // remaining internal signals
  reg [23 : 0] IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR_ffI_ETC___d772,
	       output_regf_out_posit__h138952,
	       output_regf_out_posit__h143448;
  reg [18 : 0] x__h70695, x__h78574;
  reg [1 : 0] CASE_ffOD_OUT_BITS_70_TO_69_0_ffOD_OUT_BITS__ETC__q1,
	      CASE_server_core_request_put_BITS_137_TO_136_0_ETC__q31,
	      CASE_server_core_request_put_BITS_71_TO_70_0_s_ETC__q32;
  reg CASE_shift_new038921_0_NOT_ftop_ffOD_OUT_BIT__ETC__q19,
      CASE_shift_new038921_0_ftop_ffOD_OUT_BIT_0_1__ETC__q18,
      CASE_shift_new043421_0_NOT_qtop_ffOD_OUT_BIT__ETC__q23,
      CASE_shift_new043421_0_qtop_ffOD_OUT_BIT_0_1__ETC__q22,
      IF_ffI_first__75_BITS_2_TO_0_76_EQ_4_77_THEN_N_ETC___d498,
      IF_opcode_out_first__239_EQ_0_240_OR_opcode_ou_ETC___d2268;
  wire [295 : 0] rg_quire_12_BIT_287_13_AND_rg_quire_12_BITS_28_ETC___d1842;
  wire [287 : 0] IF_INV_NOT_IF_NOT_fda_adder_fifo_stage0_reg_fi_ETC___d291,
		 IF_INV_NOT_IF_NOT_fma_adder_fifo_stage0_reg_fi_ETC___d107,
		 IF_NOT_rg_quire_12_BIT_287_13_14_AND_NOT_fda_d_ETC___d308,
		 IF_NOT_rg_quire_12_BIT_287_13_14_AND_NOT_fma_m_ETC___d127,
		 SEXT_IF_fda_adder_fifo_stage0_reg_first__48_BI_ETC___d258,
		 SEXT_IF_fma_adder_fifo_stage0_reg_first__4_BIT_ETC___d74,
		 fda_adder_fifo_stage0_reg_first__48_BITS_294_T_ETC___d263,
		 fma_adder_fifo_stage0_reg_first__4_BITS_294_TO_ETC___d79,
		 rg_quire_12_PLUS_fda_divider_fifo_output_reg_f_ETC___d301,
		 rg_quire_12_PLUS_fma_multiplier_fifo_output_re_ETC___d120,
		 twos_complement_carry_int_frac__h29579,
		 twos_complement_carry_int_frac__h437,
		 twos_complement_carry_int_frac__h57992,
		 x__h1253,
		 x__h15826,
		 x__h30367,
		 x__h44918;
  wire [286 : 0] carry_int_frac_shifted__h58831,
		 twos_complement_carry_int_frac__h89668,
		 x__h29920,
		 x__h797;
  wire [263 : 0] IF_fda_divider_fifo_stage0_reg_first__82_BIT_8_ETC___d213,
		 IF_fma_multiplier_fifo_stage0_reg_first_BIT_48_ETC___d33,
		 f_new___1__h29829,
		 f_new___1__h706,
		 f_new__h29623,
		 f_new__h29773,
		 f_new__h487,
		 f_new__h653,
		 f_new__h89519,
		 int_frac__h89502,
		 mask1__h29831,
		 mask1__h708,
		 x__h30006,
		 x__h889;
  wire [79 : 0] _0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d1113;
  wire [57 : 0] y__h29085, y__h29171;
  wire [49 : 0] extracter1_fifo_output_reg_first__078_BIT_27_0_ETC___d1115;
  wire [39 : 0] f__h29618,
		fma_multiplier_fifo_stage0_regD_OUT_BITS_39_TO_0__q7,
		x__h29786,
		x__h666;
  wire [31 : 0] float_no__h60306;
  wire [26 : 0] IF_IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR__ETC___d1032,
		IF_ffI_first__75_BITS_94_TO_72_07_EQ_0_08_AND__ETC___d766;
  wire [23 : 0] frac__h60299, in_posit2___1_posit_inp__h71008, x__h60384;
  wire [22 : 0] IF_IF_NOT_IF_ftop_ffO_first__859_BIT_28_864_TH_ETC___d1986,
		IF_IF_NOT_IF_qtop_ffO_first__035_BIT_28_040_TH_ETC___d2162,
		IF_NOT_IF_ftop_ffO_first__859_BIT_28_864_THEN__ETC___d1982,
		IF_NOT_IF_qtop_ffO_first__035_BIT_28_040_THEN__ETC___d2158,
		IF_fda_divider_fifo_stage0_reg_first__82_BIT_8_ETC___d204,
		IF_fma_multiplier_fifo_stage0_reg_first_BIT_48_ETC___d24,
		IF_ftop_ffO_first__859_BIT_28_864_THEN_1_SL_22_ETC___d1905,
		IF_qtop_ffO_first__035_BIT_28_040_THEN_1_SL_22_ETC___d2081,
		INV_new_inp0952__q8,
		INV_new_inp3144__q2,
		a__h138968,
		a__h143464,
		b__h139201,
		b__h139439,
		b__h140296,
		b__h142293,
		b__h143697,
		b__h143935,
		b__h144791,
		b__h146788,
		frac_f__h60305,
		k__h139499,
		k__h139544,
		k__h143995,
		k__h144039,
		k_expo__h138924,
		k_expo__h143424,
		new_inp0952_AND_INV_0x7FFFFE_SL_x8525_SRL_x8527__q10,
		new_inp3144_AND_INV_0x7FFFFE_SL_x0646_SRL_x0648__q9,
		new_inp__h63144,
		new_inp__h70952,
		stage0_regf_frac__h88566,
		x__h139217,
		x__h139556,
		x__h143713,
		x__h144051,
		y__h139218,
		y__h139219,
		y__h143714,
		y__h143715;
  wire [19 : 0] IF_qtop_quireToPosit1_fifo_stage0_reg_first__3_ETC___d349,
		f1__h87299,
		f2__h87300,
		frac__h59538,
		x__h141692,
		x__h146187,
		x__h59605;
  wire [18 : 0] frac__h63152,
		frac__h70960,
		ftop_ffOD_OUT_BITS_20_TO_2__q17,
		qtop_ffOD_OUT_BITS_20_TO_2__q21,
		stage1_regf_frac__h58613,
		x41692_BITS_18_TO_0__q16,
		x46187_BITS_18_TO_0__q20,
		x_frac__h59552;
  wire [9 : 0] IF_0_CONCAT_IF_IF_rg_quire_12_BIT_287_13_THEN__ETC___d1836,
	       _0_CONCAT_IF_IF_rg_quire_12_BIT_287_13_THEN_0_M_ETC___d1831,
	       _155_MINUS_0_CONCAT_IF_IF_rg_quire_12_BIT_287_1_ETC___d1833,
	       extracter1_fifo_output_reg_first__078_BIT_27_0_ETC___d1158,
	       x__h58919;
  wire [8 : 0] IF_fda_divider_fifo_stage0_reg_first__82_BIT_8_ETC___d188,
	       IF_fda_divider_fifo_stage0_reg_first__82_BIT_8_ETC___d189,
	       IF_fma_multiplier_fifo_stage0_reg_first_BIT_48_ETC___d10,
	       IF_fma_multiplier_fifo_stage0_reg_first_BIT_48_ETC___d11,
	       SEXT_extracter1_fifo_output_reg_first__078_BIT_ETC___d1103,
	       _0_CONCAT_ffI_f_rvport1__read_BITS_30_TO_23_MI_ETC__q28,
	       msbZeros__h89669,
	       x__h29822,
	       x__h29910,
	       x__h29982,
	       x__h60354,
	       x__h699,
	       x__h787,
	       x__h865,
	       x__h89563;
  wire [7 : 0] IF_0_CONCAT_ffI_f_rv_port1__read__183_BITS_30__ETC___d1210,
	       IF_0_CONCAT_ffI_f_rv_port1__read__183_BITS_30__ETC__q29,
	       IF_0_CONCAT_ffI_f_rv_port1__read__183_BITS_30__ETC__q30,
	       IF_extracter1_fifo_output_reg_first__078_BITS__ETC___d1169,
	       IF_extracter1_fifo_output_reg_first__078_BITS__ETC__q25,
	       IF_extracter1_fifo_output_reg_first__078_BITS__ETC__q26,
	       NEG_extracter2_fifo_output_regD_OUT_BITS_26_T_ETC__q24,
	       SEXT_IF_IF_IF_ffI_first__75_BITS_2_TO_0_76_EQ__ETC___d883,
	       SEXT_IF_IF_ffI_first__75_BIT_95_09_THEN_0_MINU_ETC___d617,
	       SEXT_IF_new_inp0952_BIT_22_THEN_b1724_ELSE_b17261__q12,
	       SEXT_IF_new_inp3144_BIT_22_THEN_b3845_ELSE_b38473__q14,
	       _0_CONCAT_ffI_f_rv_port1__read__183_BITS_30_TO__ETC___d1212,
	       _0_CONCAT_ffI_f_rv_port1__read__183_BITS_30_TO__ETC___d1216,
	       extracter1_fifo_output_regD_OUT_BITS_26_TO_19__q15,
	       extracter1_fifo_output_reg_first__078_BITS_26__ETC___d1171,
	       extracter1_fifo_output_reg_first__078_BITS_26__ETC___d1175,
	       extracter2_fifo_output_regD_OUT_BITS_26_TO_19__q27,
	       ptof_ptoF_fifo_stage0_regD_OUT_BITS_38_TO_31__q3,
	       qtop_quireToPosit1_fifo_stage0_regD_OUT_BITS__ETC__q6;
  wire [5 : 0] IF_0_CONCAT_ffI_f_rv_port1__read__183_BITS_30__ETC___d1221,
	       IF_extracter1_fifo_output_reg_first__078_BITS__ETC___d1180,
	       IF_ftop_fToP_fifo_stage0_reg_first__82_BIT_7_8_ETC___d389,
	       IF_new_inp0952_BIT_22_THEN_b1724_ELSE_b1726__q11,
	       IF_new_inp3144_BIT_22_THEN_b3845_ELSE_b3847__q13,
	       IF_ptof_ptoF_fifo_stage0_reg_first__21_BIT_7_3_ETC___d435,
	       _0_MINUS_ftop_ffOD_OUT_BITS_28_TO_23__q4,
	       _0_MINUS_qtop_ffOD_OUT_BITS_28_TO_23__q5,
	       b__h63845,
	       b__h63847,
	       b__h71724,
	       b__h71726,
	       x__h59665,
	       x__h60444,
	       x__h67106,
	       x__h74985;
  wire [4 : 0] IF_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864__ETC___d1898,
	       IF_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040__ETC___d2074,
	       IF_IF_IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84__ETC___d976,
	       IF_IF_ffI_first__75_BIT_95_09_THEN_0_MINUS_ffI_ETC___d710,
	       IF_ftop_ffO_first__859_BIT_27_870_AND_NOT_ftop_ETC___d1876,
	       IF_qtop_ffO_first__035_BIT_27_046_AND_NOT_qtop_ETC___d2052,
	       _19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__859_BI_ETC___d1923,
	       _19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__035_BI_ETC___d2099,
	       _22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_THE_ETC___d1883,
	       _22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_THE_ETC___d2059,
	       ftop_ffO_first__859_BITS_27_TO_23_871_PLUS_1___d1872,
	       qtop_ffO_first__035_BITS_27_TO_23_047_PLUS_1___d2048,
	       x__h139542,
	       x__h140383,
	       x__h141868,
	       x__h142029,
	       x__h144037,
	       x__h144878,
	       x__h146363,
	       x__h146524,
	       x__h63855,
	       x__h67113,
	       x__h70646,
	       x__h70648,
	       x__h70683,
	       x__h71734,
	       x__h74992,
	       x__h78525,
	       x__h78527,
	       x__h78562;
  wire [2 : 0] _theResult___snd_snd__h140474,
	       _theResult___snd_snd__h144969,
	       i1__h141919,
	       i1__h146414,
	       i__h141821,
	       i__h146316,
	       shift_new0__h138921,
	       shift_new0__h143421,
	       shift_new__h140421,
	       shift_new__h144916,
	       x__h140425,
	       x__h144920;
  wire [1 : 0] IF_extracter1_fifo_output_reg_first__078_BITS__ETC___d1097,
	       IF_fda_divider_fifo_stage0_reg_first__82_BIT_8_ETC___d242,
	       IF_rg_quire_12_EQ_0_33_THEN_2_ELSE_0___d134,
	       _theResult___fst__h140328,
	       _theResult___fst__h144823,
	       expo__h63151,
	       expo__h70959,
	       expo_new__h140393,
	       expo_new__h140422,
	       expo_new__h144888,
	       expo_new__h144917,
	       mask_e__h140326,
	       mask_e__h144821,
	       truncated_frac__h1200,
	       truncated_frac__h30314,
	       x__h140299,
	       x__h141712,
	       x__h144794,
	       x__h146207;
  wire IF_IF_22_MINUS_IF_ftop_ffO_first__859_BIT_28_8_ETC___d1958,
       IF_IF_22_MINUS_IF_qtop_ffO_first__035_BIT_28_0_ETC___d2134,
       IF_fma_multiplier_fifo_stage0_reg_first_BIT_48_ETC___d12,
       IF_opcode_norm_first__845_EQ_4_846_THEN_ftop_f_ETC___d1855,
       NOT_19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__85_ETC___d1974,
       NOT_19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__85_ETC___d2018,
       NOT_19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__03_ETC___d2150,
       NOT_19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__03_ETC___d2194,
       NOT_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_ETC___d1926,
       NOT_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_ETC___d1935,
       NOT_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_ETC___d1990,
       NOT_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_ETC___d1996,
       NOT_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_ETC___d2015,
       NOT_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_ETC___d2019,
       NOT_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_ETC___d2102,
       NOT_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_ETC___d2111,
       NOT_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_ETC___d2166,
       NOT_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_ETC___d2172,
       NOT_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_ETC___d2191,
       NOT_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_ETC___d2195,
       NOT_IF_fda_divider_fifo_stage0_reg_first__82_B_ETC___d191,
       NOT_IF_ftop_ffO_first__859_BIT_28_864_THEN_1_S_ETC___d1910,
       NOT_IF_qtop_ffO_first__035_BIT_28_040_THEN_1_S_ETC___d2086,
       NOT_NOT_22_MINUS_IF_ftop_ffO_first__859_BIT_28_ETC___d1948,
       NOT_NOT_22_MINUS_IF_qtop_ffO_first__035_BIT_28_ETC___d2124,
       NOT_verbosity_ULE_1_035___d1036,
       _0_CONCAT_ffI_f_rv_port1__read__183_BITS_30_TO__ETC___d1207,
       _0_CONCAT_ffI_f_rv_port1__read__183_BITS_30_TO__ETC___d1208,
       _19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__859_BI_ETC___d1960,
       _19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__035_BI_ETC___d2136,
       _22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_THE_ETC___d1884,
       _22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_THE_ETC___d2060,
       _theResult____h138931,
       _theResult____h143431,
       add_round__h60307,
       all_bits_0__h1203,
       all_bits_0__h30317,
       extracter1_fifo_output_reg_first__078_BITS_26__ETC___d1166,
       extracter1_fifo_output_reg_first__078_BITS_26__ETC___d1167,
       fda_divider_intDivide_rg_denom2_43_ULE_0_CONCA_ETC___d147,
       fda_divider_intDivide_rg_numer_44_ULT_0_CONCAT_ETC___d156,
       fda_divider_intDivide_rg_numer_44_ULT_fda_divi_ETC___d167,
       fda_divider_intDivide_rg_state_41_EQ_0_118_OR__ETC___d1129,
       flag_prev_truncate__h138930,
       flag_prev_truncate__h143430,
       flag_truncated_frac__h1198,
       flag_truncated_frac__h30312,
       ftop_ffO_first__859_BITS_20_TO_2_914_BIT_IF_22_ETC___d1932,
       ftop_ffO_first__859_BIT_0_938_AND_INV_ftop_ffO_ETC___d1941,
       ftop_ffO_first__859_BIT_0_938_AND_INV_ftop_ffO_ETC___d1945,
       qtop_ffO_first__035_BITS_20_TO_2_090_BIT_IF_22_ETC___d2108,
       qtop_ffO_first__035_BIT_0_114_AND_INV_qtop_ffO_ETC___d2117,
       qtop_ffO_first__035_BIT_0_114_AND_INV_qtop_ffO_ETC___d2121,
       qtop_quireToPosit1_fifo_stage0_reg_first__39_B_ETC___d342,
       truncated_frac_msb___1__h29830,
       truncated_frac_msb__h138926,
       truncated_frac_msb__h143426,
       truncated_frac_msb__h60301,
       truncated_frac_zero___1__h29832,
       truncated_frac_zero__h29627,
       truncated_frac_zero__h59539,
       truncated_frac_zero__h60300,
       x__h1246,
       x__h1248,
       x__h28359,
       x__h28364,
       x__h29445,
       x__h30063,
       x__h30360,
       x__h30362,
       x__h34523,
       x__h5431,
       x__h57447,
       x__h57452,
       x__h58935,
       x__h58978,
       x__h59678,
       x__h59755,
       x__h59767,
       x__h59768,
       x__h60471,
       x__h60472,
       x__h60492,
       x__h828,
       x__h872,
       x__h87207,
       x__h87292,
       x__h87314,
       x__h87316,
       x__h88299,
       x__h89155,
       x__h89326,
       x__h93820,
       y__h1247,
       y__h141909,
       y__h141913,
       y__h146404,
       y__h146408,
       y__h15802,
       y__h28377,
       y__h30361,
       y__h44894,
       y__h57465,
       y__h60493;

  // action method server_core_request_put
  assign RDY_server_core_request_put = ffI$FULL_N ;
  assign CAN_FIRE_server_core_request_put = ffI$FULL_N ;
  assign WILL_FIRE_server_core_request_put = EN_server_core_request_put ;

  // actionvalue method server_core_response_get
  assign server_core_response_get =
	     { CASE_ffOD_OUT_BITS_70_TO_69_0_ffOD_OUT_BITS__ETC__q1,
	       ffO$D_OUT[68:0] } ;
  assign RDY_server_core_response_get = ffO$EMPTY_N ;
  assign CAN_FIRE_server_core_response_get = ffO$EMPTY_N ;
  assign WILL_FIRE_server_core_response_get = EN_server_core_response_get ;

  // submodule extracter1_fifo_output_reg
  FIFO2 #(.width(32'd30),
	  .guarded(32'd1)) extracter1_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_output_reg$D_IN),
						      .ENQ(extracter1_fifo_output_reg$ENQ),
						      .DEQ(extracter1_fifo_output_reg$DEQ),
						      .CLR(extracter1_fifo_output_reg$CLR),
						      .D_OUT(extracter1_fifo_output_reg$D_OUT),
						      .FULL_N(extracter1_fifo_output_reg$FULL_N),
						      .EMPTY_N(extracter1_fifo_output_reg$EMPTY_N));

  // submodule extracter1_fifo_stage0_reg
  FIFO2 #(.width(32'd26),
	  .guarded(32'd1)) extracter1_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage0_reg$D_IN),
						      .ENQ(extracter1_fifo_stage0_reg$ENQ),
						      .DEQ(extracter1_fifo_stage0_reg$DEQ),
						      .CLR(extracter1_fifo_stage0_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter1_fifo_stage1_reg
  FIFO2 #(.width(32'd35),
	  .guarded(32'd1)) extracter1_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage1_reg$D_IN),
						      .ENQ(extracter1_fifo_stage1_reg$ENQ),
						      .DEQ(extracter1_fifo_stage1_reg$DEQ),
						      .CLR(extracter1_fifo_stage1_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter1_fifo_stage2_reg
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) extracter1_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage2_reg$D_IN),
						      .ENQ(extracter1_fifo_stage2_reg$ENQ),
						      .DEQ(extracter1_fifo_stage2_reg$DEQ),
						      .CLR(extracter1_fifo_stage2_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter2_fifo_output_reg
  FIFO2 #(.width(32'd30),
	  .guarded(32'd1)) extracter2_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_output_reg$D_IN),
						      .ENQ(extracter2_fifo_output_reg$ENQ),
						      .DEQ(extracter2_fifo_output_reg$DEQ),
						      .CLR(extracter2_fifo_output_reg$CLR),
						      .D_OUT(extracter2_fifo_output_reg$D_OUT),
						      .FULL_N(extracter2_fifo_output_reg$FULL_N),
						      .EMPTY_N(extracter2_fifo_output_reg$EMPTY_N));

  // submodule extracter2_fifo_stage0_reg
  FIFO2 #(.width(32'd26),
	  .guarded(32'd1)) extracter2_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage0_reg$D_IN),
						      .ENQ(extracter2_fifo_stage0_reg$ENQ),
						      .DEQ(extracter2_fifo_stage0_reg$DEQ),
						      .CLR(extracter2_fifo_stage0_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter2_fifo_stage1_reg
  FIFO2 #(.width(32'd35),
	  .guarded(32'd1)) extracter2_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage1_reg$D_IN),
						      .ENQ(extracter2_fifo_stage1_reg$ENQ),
						      .DEQ(extracter2_fifo_stage1_reg$DEQ),
						      .CLR(extracter2_fifo_stage1_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter2_fifo_stage2_reg
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) extracter2_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage2_reg$D_IN),
						      .ENQ(extracter2_fifo_stage2_reg$ENQ),
						      .DEQ(extracter2_fifo_stage2_reg$DEQ),
						      .CLR(extracter2_fifo_stage2_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule fda_adder_fifo_output_reg
  FIFO20 #(.guarded(32'd1)) fda_adder_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .ENQ(fda_adder_fifo_output_reg$ENQ),
						      .DEQ(fda_adder_fifo_output_reg$DEQ),
						      .CLR(fda_adder_fifo_output_reg$CLR),
						      .FULL_N(fda_adder_fifo_output_reg$FULL_N),
						      .EMPTY_N(fda_adder_fifo_output_reg$EMPTY_N));

  // submodule fda_adder_fifo_stage0_reg
  FIFO2 #(.width(32'd295),
	  .guarded(32'd1)) fda_adder_fifo_stage0_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(fda_adder_fifo_stage0_reg$D_IN),
						     .ENQ(fda_adder_fifo_stage0_reg$ENQ),
						     .DEQ(fda_adder_fifo_stage0_reg$DEQ),
						     .CLR(fda_adder_fifo_stage0_reg$CLR),
						     .D_OUT(fda_adder_fifo_stage0_reg$D_OUT),
						     .FULL_N(fda_adder_fifo_stage0_reg$FULL_N),
						     .EMPTY_N(fda_adder_fifo_stage0_reg$EMPTY_N));

  // submodule fda_divider_fifo_output_reg
  FIFO2 #(.width(32'd293),
	  .guarded(32'd1)) fda_divider_fifo_output_reg(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(fda_divider_fifo_output_reg$D_IN),
						       .ENQ(fda_divider_fifo_output_reg$ENQ),
						       .DEQ(fda_divider_fifo_output_reg$DEQ),
						       .CLR(fda_divider_fifo_output_reg$CLR),
						       .D_OUT(fda_divider_fifo_output_reg$D_OUT),
						       .FULL_N(fda_divider_fifo_output_reg$FULL_N),
						       .EMPTY_N(fda_divider_fifo_output_reg$EMPTY_N));

  // submodule fda_divider_fifo_stage0_reg
  FIFO2 #(.width(32'd13),
	  .guarded(32'd1)) fda_divider_fifo_stage0_reg(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(fda_divider_fifo_stage0_reg$D_IN),
						       .ENQ(fda_divider_fifo_stage0_reg$ENQ),
						       .DEQ(fda_divider_fifo_stage0_reg$DEQ),
						       .CLR(fda_divider_fifo_stage0_reg$CLR),
						       .D_OUT(fda_divider_fifo_stage0_reg$D_OUT),
						       .FULL_N(fda_divider_fifo_stage0_reg$FULL_N),
						       .EMPTY_N(fda_divider_fifo_stage0_reg$EMPTY_N));

  // submodule fda_divider_intDivide_fifo_output_reg
  FIFO2 #(.width(32'd41),
	  .guarded(32'd1)) fda_divider_intDivide_fifo_output_reg(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(fda_divider_intDivide_fifo_output_reg$D_IN),
								 .ENQ(fda_divider_intDivide_fifo_output_reg$ENQ),
								 .DEQ(fda_divider_intDivide_fifo_output_reg$DEQ),
								 .CLR(fda_divider_intDivide_fifo_output_reg$CLR),
								 .D_OUT(fda_divider_intDivide_fifo_output_reg$D_OUT),
								 .FULL_N(fda_divider_intDivide_fifo_output_reg$FULL_N),
								 .EMPTY_N(fda_divider_intDivide_fifo_output_reg$EMPTY_N));

  // submodule fda_ffO
  FIFO20 #(.guarded(32'd1)) fda_ffO(.RST(RST_N),
				    .CLK(CLK),
				    .ENQ(fda_ffO$ENQ),
				    .DEQ(fda_ffO$DEQ),
				    .CLR(fda_ffO$CLR),
				    .FULL_N(fda_ffO$FULL_N),
				    .EMPTY_N(fda_ffO$EMPTY_N));

  // submodule ffI
  FIFO2 #(.width(32'd138), .guarded(32'd1)) ffI(.RST(RST_N),
						.CLK(CLK),
						.D_IN(ffI$D_IN),
						.ENQ(ffI$ENQ),
						.DEQ(ffI$DEQ),
						.CLR(ffI$CLR),
						.D_OUT(ffI$D_OUT),
						.FULL_N(ffI$FULL_N),
						.EMPTY_N(ffI$EMPTY_N));

  // submodule ffO
  FIFO2 #(.width(32'd71), .guarded(32'd1)) ffO(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(ffO$D_IN),
					       .ENQ(ffO$ENQ),
					       .DEQ(ffO$DEQ),
					       .CLR(ffO$CLR),
					       .D_OUT(ffO$D_OUT),
					       .FULL_N(ffO$FULL_N),
					       .EMPTY_N(ffO$EMPTY_N));

  // submodule fma_adder_fifo_output_reg
  FIFO20 #(.guarded(32'd1)) fma_adder_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .ENQ(fma_adder_fifo_output_reg$ENQ),
						      .DEQ(fma_adder_fifo_output_reg$DEQ),
						      .CLR(fma_adder_fifo_output_reg$CLR),
						      .FULL_N(fma_adder_fifo_output_reg$FULL_N),
						      .EMPTY_N(fma_adder_fifo_output_reg$EMPTY_N));

  // submodule fma_adder_fifo_stage0_reg
  FIFO2 #(.width(32'd295),
	  .guarded(32'd1)) fma_adder_fifo_stage0_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(fma_adder_fifo_stage0_reg$D_IN),
						     .ENQ(fma_adder_fifo_stage0_reg$ENQ),
						     .DEQ(fma_adder_fifo_stage0_reg$DEQ),
						     .CLR(fma_adder_fifo_stage0_reg$CLR),
						     .D_OUT(fma_adder_fifo_stage0_reg$D_OUT),
						     .FULL_N(fma_adder_fifo_stage0_reg$FULL_N),
						     .EMPTY_N(fma_adder_fifo_stage0_reg$EMPTY_N));

  // submodule fma_ffO
  FIFO20 #(.guarded(32'd1)) fma_ffO(.RST(RST_N),
				    .CLK(CLK),
				    .ENQ(fma_ffO$ENQ),
				    .DEQ(fma_ffO$DEQ),
				    .CLR(fma_ffO$CLR),
				    .FULL_N(fma_ffO$FULL_N),
				    .EMPTY_N(fma_ffO$EMPTY_N));

  // submodule fma_multiplier_fifo_output_reg
  FIFO2 #(.width(32'd293),
	  .guarded(32'd1)) fma_multiplier_fifo_output_reg(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(fma_multiplier_fifo_output_reg$D_IN),
							  .ENQ(fma_multiplier_fifo_output_reg$ENQ),
							  .DEQ(fma_multiplier_fifo_output_reg$DEQ),
							  .CLR(fma_multiplier_fifo_output_reg$CLR),
							  .D_OUT(fma_multiplier_fifo_output_reg$D_OUT),
							  .FULL_N(fma_multiplier_fifo_output_reg$FULL_N),
							  .EMPTY_N(fma_multiplier_fifo_output_reg$EMPTY_N));

  // submodule fma_multiplier_fifo_stage0_reg
  FIFO2 #(.width(32'd53),
	  .guarded(32'd1)) fma_multiplier_fifo_stage0_reg(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(fma_multiplier_fifo_stage0_reg$D_IN),
							  .ENQ(fma_multiplier_fifo_stage0_reg$ENQ),
							  .DEQ(fma_multiplier_fifo_stage0_reg$DEQ),
							  .CLR(fma_multiplier_fifo_stage0_reg$CLR),
							  .D_OUT(fma_multiplier_fifo_stage0_reg$D_OUT),
							  .FULL_N(fma_multiplier_fifo_stage0_reg$FULL_N),
							  .EMPTY_N(fma_multiplier_fifo_stage0_reg$EMPTY_N));

  // submodule ftop_fToP_fifo_output_reg
  FIFO2 #(.width(32'd33),
	  .guarded(32'd1)) ftop_fToP_fifo_output_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(ftop_fToP_fifo_output_reg$D_IN),
						     .ENQ(ftop_fToP_fifo_output_reg$ENQ),
						     .DEQ(ftop_fToP_fifo_output_reg$DEQ),
						     .CLR(ftop_fToP_fifo_output_reg$CLR),
						     .D_OUT(ftop_fToP_fifo_output_reg$D_OUT),
						     .FULL_N(ftop_fToP_fifo_output_reg$FULL_N),
						     .EMPTY_N(ftop_fToP_fifo_output_reg$EMPTY_N));

  // submodule ftop_fToP_fifo_stage0_reg
  FIFO2 #(.width(32'd39),
	  .guarded(32'd1)) ftop_fToP_fifo_stage0_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(ftop_fToP_fifo_stage0_reg$D_IN),
						     .ENQ(ftop_fToP_fifo_stage0_reg$ENQ),
						     .DEQ(ftop_fToP_fifo_stage0_reg$DEQ),
						     .CLR(ftop_fToP_fifo_stage0_reg$CLR),
						     .D_OUT(ftop_fToP_fifo_stage0_reg$D_OUT),
						     .FULL_N(ftop_fToP_fifo_stage0_reg$FULL_N),
						     .EMPTY_N(ftop_fToP_fifo_stage0_reg$EMPTY_N));

  // submodule ftop_ffO
  FIFO2 #(.width(32'd33), .guarded(32'd1)) ftop_ffO(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ftop_ffO$D_IN),
						    .ENQ(ftop_ffO$ENQ),
						    .DEQ(ftop_ffO$DEQ),
						    .CLR(ftop_ffO$CLR),
						    .D_OUT(ftop_ffO$D_OUT),
						    .FULL_N(ftop_ffO$FULL_N),
						    .EMPTY_N(ftop_ffO$EMPTY_N));

  // submodule need_normalize
  FIFO1 #(.width(32'd1), .guarded(32'd1)) need_normalize(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(need_normalize$D_IN),
							 .ENQ(need_normalize$ENQ),
							 .DEQ(need_normalize$DEQ),
							 .CLR(need_normalize$CLR),
							 .D_OUT(),
							 .FULL_N(),
							 .EMPTY_N());

  // submodule normalizer_fifo_output_reg
  FIFO2 #(.width(32'd28),
	  .guarded(32'd1)) normalizer_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_output_reg$D_IN),
						      .ENQ(normalizer_fifo_output_reg$ENQ),
						      .DEQ(normalizer_fifo_output_reg$DEQ),
						      .CLR(normalizer_fifo_output_reg$CLR),
						      .D_OUT(normalizer_fifo_output_reg$D_OUT),
						      .FULL_N(normalizer_fifo_output_reg$FULL_N),
						      .EMPTY_N(normalizer_fifo_output_reg$EMPTY_N));

  // submodule normalizer_fifo_stage0_reg
  FIFO2 #(.width(32'd50),
	  .guarded(32'd1)) normalizer_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage0_reg$D_IN),
						      .ENQ(normalizer_fifo_stage0_reg$ENQ),
						      .DEQ(normalizer_fifo_stage0_reg$DEQ),
						      .CLR(normalizer_fifo_stage0_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule normalizer_fifo_stage1_reg
  FIFO2 #(.width(32'd54),
	  .guarded(32'd1)) normalizer_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage1_reg$D_IN),
						      .ENQ(normalizer_fifo_stage1_reg$ENQ),
						      .DEQ(normalizer_fifo_stage1_reg$DEQ),
						      .CLR(normalizer_fifo_stage1_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule normalizer_fifo_stage2_reg
  FIFO2 #(.width(32'd28),
	  .guarded(32'd1)) normalizer_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage2_reg$D_IN),
						      .ENQ(normalizer_fifo_stage2_reg$ENQ),
						      .DEQ(normalizer_fifo_stage2_reg$DEQ),
						      .CLR(normalizer_fifo_stage2_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule opcode_norm
  FIFO1 #(.width(32'd3), .guarded(32'd1)) opcode_norm(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(opcode_norm$D_IN),
						      .ENQ(opcode_norm$ENQ),
						      .DEQ(opcode_norm$DEQ),
						      .CLR(opcode_norm$CLR),
						      .D_OUT(opcode_norm$D_OUT),
						      .FULL_N(opcode_norm$FULL_N),
						      .EMPTY_N(opcode_norm$EMPTY_N));

  // submodule opcode_out
  FIFO1 #(.width(32'd3), .guarded(32'd1)) opcode_out(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(opcode_out$D_IN),
						     .ENQ(opcode_out$ENQ),
						     .DEQ(opcode_out$DEQ),
						     .CLR(opcode_out$CLR),
						     .D_OUT(opcode_out$D_OUT),
						     .FULL_N(opcode_out$FULL_N),
						     .EMPTY_N(opcode_out$EMPTY_N));

  // submodule ptof_ffO
  FIFO2 #(.width(32'd32), .guarded(32'd1)) ptof_ffO(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ptof_ffO$D_IN),
						    .ENQ(ptof_ffO$ENQ),
						    .DEQ(ptof_ffO$DEQ),
						    .CLR(ptof_ffO$CLR),
						    .D_OUT(ptof_ffO$D_OUT),
						    .FULL_N(ptof_ffO$FULL_N),
						    .EMPTY_N(ptof_ffO$EMPTY_N));

  // submodule ptof_ptoF_fifo_output_reg
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) ptof_ptoF_fifo_output_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(ptof_ptoF_fifo_output_reg$D_IN),
						     .ENQ(ptof_ptoF_fifo_output_reg$ENQ),
						     .DEQ(ptof_ptoF_fifo_output_reg$DEQ),
						     .CLR(ptof_ptoF_fifo_output_reg$CLR),
						     .D_OUT(ptof_ptoF_fifo_output_reg$D_OUT),
						     .FULL_N(ptof_ptoF_fifo_output_reg$FULL_N),
						     .EMPTY_N(ptof_ptoF_fifo_output_reg$EMPTY_N));

  // submodule ptof_ptoF_fifo_stage0_reg
  FIFO2 #(.width(32'd42),
	  .guarded(32'd1)) ptof_ptoF_fifo_stage0_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(ptof_ptoF_fifo_stage0_reg$D_IN),
						     .ENQ(ptof_ptoF_fifo_stage0_reg$ENQ),
						     .DEQ(ptof_ptoF_fifo_stage0_reg$DEQ),
						     .CLR(ptof_ptoF_fifo_stage0_reg$CLR),
						     .D_OUT(ptof_ptoF_fifo_stage0_reg$D_OUT),
						     .FULL_N(ptof_ptoF_fifo_stage0_reg$FULL_N),
						     .EMPTY_N(ptof_ptoF_fifo_stage0_reg$EMPTY_N));

  // submodule ptoq_ffO
  FIFO20 #(.guarded(32'd1)) ptoq_ffO(.RST(RST_N),
				     .CLK(CLK),
				     .ENQ(ptoq_ffO$ENQ),
				     .DEQ(ptoq_ffO$DEQ),
				     .CLR(ptoq_ffO$CLR),
				     .FULL_N(ptoq_ffO$FULL_N),
				     .EMPTY_N(ptoq_ffO$EMPTY_N));

  // submodule ptoq_positToquire_fifo_output_reg
  FIFO20 #(.guarded(32'd1)) ptoq_positToquire_fifo_output_reg(.RST(RST_N),
							      .CLK(CLK),
							      .ENQ(ptoq_positToquire_fifo_output_reg$ENQ),
							      .DEQ(ptoq_positToquire_fifo_output_reg$DEQ),
							      .CLR(ptoq_positToquire_fifo_output_reg$CLR),
							      .FULL_N(ptoq_positToquire_fifo_output_reg$FULL_N),
							      .EMPTY_N(ptoq_positToquire_fifo_output_reg$EMPTY_N));

  // submodule ptoq_positToquire_fifo_stage0_reg
  FIFO2 #(.width(32'd30),
	  .guarded(32'd1)) ptoq_positToquire_fifo_stage0_reg(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ptoq_positToquire_fifo_stage0_reg$D_IN),
							     .ENQ(ptoq_positToquire_fifo_stage0_reg$ENQ),
							     .DEQ(ptoq_positToquire_fifo_stage0_reg$DEQ),
							     .CLR(ptoq_positToquire_fifo_stage0_reg$CLR),
							     .D_OUT(),
							     .FULL_N(),
							     .EMPTY_N());

  // submodule ptoq_positToquire_fifo_stage1_reg
  FIFO2 #(.width(32'd267),
	  .guarded(32'd1)) ptoq_positToquire_fifo_stage1_reg(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ptoq_positToquire_fifo_stage1_reg$D_IN),
							     .ENQ(ptoq_positToquire_fifo_stage1_reg$ENQ),
							     .DEQ(ptoq_positToquire_fifo_stage1_reg$DEQ),
							     .CLR(ptoq_positToquire_fifo_stage1_reg$CLR),
							     .D_OUT(ptoq_positToquire_fifo_stage1_reg$D_OUT),
							     .FULL_N(ptoq_positToquire_fifo_stage1_reg$FULL_N),
							     .EMPTY_N(ptoq_positToquire_fifo_stage1_reg$EMPTY_N));

  // submodule qtop_ffO
  FIFO2 #(.width(32'd33), .guarded(32'd1)) qtop_ffO(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(qtop_ffO$D_IN),
						    .ENQ(qtop_ffO$ENQ),
						    .DEQ(qtop_ffO$DEQ),
						    .CLR(qtop_ffO$CLR),
						    .D_OUT(qtop_ffO$D_OUT),
						    .FULL_N(qtop_ffO$FULL_N),
						    .EMPTY_N(qtop_ffO$EMPTY_N));

  // submodule qtop_quireToPosit1_fifo_output_reg
  FIFO2 #(.width(32'd33),
	  .guarded(32'd1)) qtop_quireToPosit1_fifo_output_reg(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(qtop_quireToPosit1_fifo_output_reg$D_IN),
							      .ENQ(qtop_quireToPosit1_fifo_output_reg$ENQ),
							      .DEQ(qtop_quireToPosit1_fifo_output_reg$DEQ),
							      .CLR(qtop_quireToPosit1_fifo_output_reg$CLR),
							      .D_OUT(qtop_quireToPosit1_fifo_output_reg$D_OUT),
							      .FULL_N(qtop_quireToPosit1_fifo_output_reg$FULL_N),
							      .EMPTY_N(qtop_quireToPosit1_fifo_output_reg$EMPTY_N));

  // submodule qtop_quireToPosit1_fifo_stage0_reg
  FIFO2 #(.width(32'd299),
	  .guarded(32'd1)) qtop_quireToPosit1_fifo_stage0_reg(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(qtop_quireToPosit1_fifo_stage0_reg$D_IN),
							      .ENQ(qtop_quireToPosit1_fifo_stage0_reg$ENQ),
							      .DEQ(qtop_quireToPosit1_fifo_stage0_reg$DEQ),
							      .CLR(qtop_quireToPosit1_fifo_stage0_reg$CLR),
							      .D_OUT(qtop_quireToPosit1_fifo_stage0_reg$D_OUT),
							      .FULL_N(qtop_quireToPosit1_fifo_stage0_reg$FULL_N),
							      .EMPTY_N(qtop_quireToPosit1_fifo_stage0_reg$EMPTY_N));

  // submodule qtop_quireToPosit1_fifo_stage1_reg
  FIFO2 #(.width(32'd33),
	  .guarded(32'd1)) qtop_quireToPosit1_fifo_stage1_reg(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(qtop_quireToPosit1_fifo_stage1_reg$D_IN),
							      .ENQ(qtop_quireToPosit1_fifo_stage1_reg$ENQ),
							      .DEQ(qtop_quireToPosit1_fifo_stage1_reg$DEQ),
							      .CLR(qtop_quireToPosit1_fifo_stage1_reg$CLR),
							      .D_OUT(qtop_quireToPosit1_fifo_stage1_reg$D_OUT),
							      .FULL_N(qtop_quireToPosit1_fifo_stage1_reg$FULL_N),
							      .EMPTY_N(qtop_quireToPosit1_fifo_stage1_reg$EMPTY_N));

  // rule RL_extract_in
  assign CAN_FIRE_RL_extract_in =
	     ffI$EMPTY_N && !opcode_in_rv[3] &&
	     IF_ffI_first__75_BITS_2_TO_0_76_EQ_4_77_THEN_N_ETC___d498 ;
  assign WILL_FIRE_RL_extract_in = CAN_FIRE_RL_extract_in ;

  // rule RL_rl_fma
  assign CAN_FIRE_RL_rl_fma =
	     opcode_in_rv$port1__read[3] &&
	     extracter1_fifo_output_reg$EMPTY_N &&
	     extracter2_fifo_output_reg$EMPTY_N &&
	     fma_multiplier_fifo_stage0_reg$FULL_N &&
	     opcode_out$FULL_N &&
	     (opcode_in_rv$port1__read[2:0] == 3'd0 ||
	      opcode_in_rv$port1__read[2:0] == 3'd2) &&
	     !rg_quire_busy ;
  assign WILL_FIRE_RL_rl_fma = CAN_FIRE_RL_rl_fma ;

  // rule RL_rl_fda
  assign CAN_FIRE_RL_rl_fda =
	     opcode_in_rv$port1__read[3] &&
	     fda_divider_intDivide_rg_state_41_EQ_0_118_OR__ETC___d1129 &&
	     (opcode_in_rv$port1__read[2:0] == 3'd1 ||
	      opcode_in_rv$port1__read[2:0] == 3'd3) &&
	     !rg_quire_busy ;
  assign WILL_FIRE_RL_rl_fda = CAN_FIRE_RL_rl_fda ;

  // rule RL_rl_ptof
  assign CAN_FIRE_RL_rl_ptof =
	     opcode_in_rv$port1__read[3] &&
	     extracter1_fifo_output_reg$EMPTY_N &&
	     opcode_out$FULL_N &&
	     ptof_ptoF_fifo_stage0_reg$FULL_N &&
	     opcode_in_rv$port1__read[2:0] == 3'd5 ;
  assign WILL_FIRE_RL_rl_ptof = CAN_FIRE_RL_rl_ptof ;

  // rule RL_rl_ftop
  assign CAN_FIRE_RL_rl_ftop =
	     opcode_in_rv$port1__read[3] && ffI_f_rv$port1__read[32] &&
	     ftop_fToP_fifo_stage0_reg$FULL_N &&
	     opcode_norm$FULL_N &&
	     opcode_in_rv$port1__read[2:0] == 3'd4 ;
  assign WILL_FIRE_RL_rl_ftop = CAN_FIRE_RL_rl_ftop ;

  // rule RL_rl_ptoq
  assign CAN_FIRE_RL_rl_ptoq =
	     opcode_in_rv$port1__read[3] &&
	     extracter1_fifo_output_reg$EMPTY_N &&
	     opcode_out$FULL_N &&
	     ptoq_positToquire_fifo_stage1_reg$FULL_N &&
	     opcode_in_rv$port1__read[2:0] == 3'd7 &&
	     !rg_quire_busy ;
  assign WILL_FIRE_RL_rl_ptoq = CAN_FIRE_RL_rl_ptoq ;

  // rule RL_rl_qtop
  assign CAN_FIRE_RL_rl_qtop =
	     opcode_in_rv$port1__read[3] && opcode_norm$FULL_N &&
	     qtop_quireToPosit1_fifo_stage0_reg$FULL_N &&
	     opcode_in_rv$port1__read[2:0] == 3'd6 &&
	     !rg_quire_busy ;
  assign WILL_FIRE_RL_rl_qtop = CAN_FIRE_RL_rl_qtop ;

  // rule RL_rl_norm
  assign CAN_FIRE_RL_rl_norm =
	     opcode_out$FULL_N && opcode_norm$EMPTY_N &&
	     IF_opcode_norm_first__845_EQ_4_846_THEN_ftop_f_ETC___d1855 ;
  assign WILL_FIRE_RL_rl_norm =
	     CAN_FIRE_RL_rl_norm && !WILL_FIRE_RL_rl_ptoq &&
	     !WILL_FIRE_RL_rl_ptof &&
	     !WILL_FIRE_RL_rl_fda &&
	     !WILL_FIRE_RL_rl_fma ;

  // rule RL_rl_out
  assign CAN_FIRE_RL_rl_out =
	     opcode_out$EMPTY_N &&
	     IF_opcode_out_first__239_EQ_0_240_OR_opcode_ou_ETC___d2268 ;
  assign WILL_FIRE_RL_rl_out = CAN_FIRE_RL_rl_out ;

  // rule RL_fma_rl_connect1
  assign CAN_FIRE_RL_fma_rl_connect1 =
	     fma_multiplier_fifo_output_reg$EMPTY_N &&
	     fma_adder_fifo_stage0_reg$FULL_N ;
  assign WILL_FIRE_RL_fma_rl_connect1 = CAN_FIRE_RL_fma_rl_connect1 ;

  // rule RL_fma_rl_out
  assign CAN_FIRE_RL_fma_rl_out =
	     fma_adder_fifo_output_reg$EMPTY_N && fma_ffO$FULL_N ;
  assign WILL_FIRE_RL_fma_rl_out = CAN_FIRE_RL_fma_rl_out ;

  // rule RL_fma_multiplier_stage_1
  assign CAN_FIRE_RL_fma_multiplier_stage_1 =
	     fma_multiplier_fifo_stage0_reg$EMPTY_N &&
	     fma_multiplier_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_fma_multiplier_stage_1 =
	     CAN_FIRE_RL_fma_multiplier_stage_1 ;

  // rule RL_fda_rl_connect1
  assign CAN_FIRE_RL_fda_rl_connect1 =
	     fda_divider_fifo_output_reg$EMPTY_N &&
	     fda_adder_fifo_stage0_reg$FULL_N ;
  assign WILL_FIRE_RL_fda_rl_connect1 = CAN_FIRE_RL_fda_rl_connect1 ;

  // rule RL_fma_adder_stage_1
  assign CAN_FIRE_RL_fma_adder_stage_1 =
	     fma_adder_fifo_stage0_reg$EMPTY_N &&
	     fma_adder_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_fma_adder_stage_1 = CAN_FIRE_RL_fma_adder_stage_1 ;

  // rule RL_fda_rl_out
  assign CAN_FIRE_RL_fda_rl_out =
	     fda_adder_fifo_output_reg$EMPTY_N && fda_ffO$FULL_N ;
  assign WILL_FIRE_RL_fda_rl_out = CAN_FIRE_RL_fda_rl_out ;

  // rule RL_fda_divider_stage_1
  assign CAN_FIRE_RL_fda_divider_stage_1 =
	     fda_divider_fifo_stage0_reg$EMPTY_N &&
	     fda_divider_intDivide_fifo_output_reg$EMPTY_N &&
	     fda_divider_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_fda_divider_stage_1 = CAN_FIRE_RL_fda_divider_stage_1 ;

  // rule RL_fda_divider_intDivide_rl_loop1
  assign CAN_FIRE_RL_fda_divider_intDivide_rl_loop1 =
	     fda_divider_intDivide_rg_state == 2'd1 ;
  assign WILL_FIRE_RL_fda_divider_intDivide_rl_loop1 =
	     CAN_FIRE_RL_fda_divider_intDivide_rl_loop1 ;

  // rule RL_fda_divider_intDivide_rl_loop2
  assign CAN_FIRE_RL_fda_divider_intDivide_rl_loop2 =
	     (!fda_divider_intDivide_rg_numer_44_ULT_0_CONCAT_ETC___d156 ||
	      fda_divider_intDivide_fifo_output_reg$FULL_N) &&
	     fda_divider_intDivide_rg_state == 2'd2 ;
  assign WILL_FIRE_RL_fda_divider_intDivide_rl_loop2 =
	     CAN_FIRE_RL_fda_divider_intDivide_rl_loop2 ;

  // rule RL_fda_adder_stage_1
  assign CAN_FIRE_RL_fda_adder_stage_1 =
	     fda_adder_fifo_stage0_reg$EMPTY_N &&
	     fda_adder_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_fda_adder_stage_1 = CAN_FIRE_RL_fda_adder_stage_1 ;

  // rule RL_ptoq_rl_out
  assign CAN_FIRE_RL_ptoq_rl_out =
	     ptoq_positToquire_fifo_output_reg$EMPTY_N && ptoq_ffO$FULL_N ;
  assign WILL_FIRE_RL_ptoq_rl_out = CAN_FIRE_RL_ptoq_rl_out ;

  // rule RL_ptoq_positToquire_stage_2
  assign CAN_FIRE_RL_ptoq_positToquire_stage_2 =
	     ptoq_positToquire_fifo_stage1_reg$EMPTY_N &&
	     ptoq_positToquire_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_ptoq_positToquire_stage_2 =
	     CAN_FIRE_RL_ptoq_positToquire_stage_2 ;

  // rule RL_qtop_rl_out
  assign CAN_FIRE_RL_qtop_rl_out =
	     qtop_quireToPosit1_fifo_output_reg$EMPTY_N && qtop_ffO$FULL_N ;
  assign WILL_FIRE_RL_qtop_rl_out = CAN_FIRE_RL_qtop_rl_out ;

  // rule RL_qtop_quireToPosit1_stage_1
  assign CAN_FIRE_RL_qtop_quireToPosit1_stage_1 =
	     qtop_quireToPosit1_fifo_stage0_reg$EMPTY_N &&
	     qtop_quireToPosit1_fifo_stage1_reg$FULL_N ;
  assign WILL_FIRE_RL_qtop_quireToPosit1_stage_1 =
	     CAN_FIRE_RL_qtop_quireToPosit1_stage_1 ;

  // rule RL_qtop_quireToPosit1_stage_2
  assign CAN_FIRE_RL_qtop_quireToPosit1_stage_2 =
	     qtop_quireToPosit1_fifo_stage1_reg$EMPTY_N &&
	     qtop_quireToPosit1_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_qtop_quireToPosit1_stage_2 =
	     CAN_FIRE_RL_qtop_quireToPosit1_stage_2 ;

  // rule RL_ftop_rl_out
  assign CAN_FIRE_RL_ftop_rl_out =
	     ftop_fToP_fifo_output_reg$EMPTY_N && ftop_ffO$FULL_N ;
  assign WILL_FIRE_RL_ftop_rl_out = CAN_FIRE_RL_ftop_rl_out ;

  // rule RL_ftop_fToP_stage_1
  assign CAN_FIRE_RL_ftop_fToP_stage_1 =
	     ftop_fToP_fifo_stage0_reg$EMPTY_N &&
	     ftop_fToP_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_ftop_fToP_stage_1 = CAN_FIRE_RL_ftop_fToP_stage_1 ;

  // rule RL_ptof_rl_out
  assign CAN_FIRE_RL_ptof_rl_out =
	     ptof_ptoF_fifo_output_reg$EMPTY_N && ptof_ffO$FULL_N ;
  assign WILL_FIRE_RL_ptof_rl_out = CAN_FIRE_RL_ptof_rl_out ;

  // rule RL_ptof_ptoF_stage_2
  assign CAN_FIRE_RL_ptof_ptoF_stage_2 =
	     ptof_ptoF_fifo_stage0_reg$EMPTY_N &&
	     ptof_ptoF_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_ptof_ptoF_stage_2 = CAN_FIRE_RL_ptof_ptoF_stage_2 ;

  // inputs to muxes for submodule ports
  assign MUX_fda_divider_intDivide_fifo_output_reg$enq_1__SEL_1 =
	     WILL_FIRE_RL_fda_divider_intDivide_rl_loop2 &&
	     fda_divider_intDivide_rg_numer_44_ULT_0_CONCAT_ETC___d156 ;
  assign MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_1 =
	     WILL_FIRE_RL_fda_divider_intDivide_rl_loop1 &&
	     fda_divider_intDivide_rg_denom2_43_ULE_0_CONCA_ETC___d147 ;
  assign MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_fda && f2__h87300 != 20'd0 ;
  assign MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_3 =
	     WILL_FIRE_RL_fda_divider_intDivide_rl_loop2 &&
	     !fda_divider_intDivide_rg_numer_44_ULT_0_CONCAT_ETC___d156 &&
	     fda_divider_intDivide_rg_numer_44_ULT_fda_divi_ETC___d167 ;
  assign MUX_fda_divider_intDivide_rg_numer$write_1__SEL_2 =
	     WILL_FIRE_RL_fda_divider_intDivide_rl_loop2 &&
	     !fda_divider_intDivide_rg_numer_44_ULT_0_CONCAT_ETC___d156 &&
	     !fda_divider_intDivide_rg_numer_44_ULT_fda_divi_ETC___d167 ;
  assign MUX_fda_divider_intDivide_rg_state$write_1__SEL_2 =
	     WILL_FIRE_RL_fda_divider_intDivide_rl_loop1 &&
	     !fda_divider_intDivide_rg_denom2_43_ULE_0_CONCA_ETC___d147 ;
  assign MUX_opcode_out$enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_ptoq || WILL_FIRE_RL_rl_ptof ||
	     WILL_FIRE_RL_rl_fda ||
	     WILL_FIRE_RL_rl_fma ;
  assign MUX_rg_quire_busy$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_out &&
	     (opcode_out$D_OUT == 3'd0 || opcode_out$D_OUT == 3'd2 ||
	      opcode_out$D_OUT == 3'd1 ||
	      opcode_out$D_OUT == 3'd3 ||
	      opcode_out$D_OUT == 3'd7) ;
  assign MUX_rg_quire_busy$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd6 ;
  assign MUX_fda_divider_intDivide_fifo_output_reg$enq_1__VAL_1 =
	     { fda_divider_intDivide_rg_quo,
	       fda_divider_intDivide_rg_numer[19],
	       x__h29445 } ;
  assign MUX_fda_divider_intDivide_fifo_output_reg$enq_1__VAL_2 =
	     { fda_divider_intDivide_rg_quo, 2'd1 } ;
  assign MUX_fda_divider_intDivide_rg_denom2$write_1__VAL_1 =
	     { fda_divider_intDivide_rg_denom2[56:0], 1'd0 } ;
  assign MUX_fda_divider_intDivide_rg_denom2$write_1__VAL_2 =
	     { 38'd0, f2__h87300 } ;
  assign MUX_fda_divider_intDivide_rg_denom2$write_1__VAL_3 =
	     { 1'd0, fda_divider_intDivide_rg_denom2[57:1] } ;
  assign MUX_fda_divider_intDivide_rg_n$write_1__VAL_1 =
	     { fda_divider_intDivide_rg_n[37:0], 1'd0 } ;
  assign MUX_fda_divider_intDivide_rg_n$write_1__VAL_3 =
	     { 1'd0, fda_divider_intDivide_rg_n[38:1] } ;
  assign MUX_fda_divider_intDivide_rg_numer$write_1__VAL_1 =
	     { f1__h87299, 38'd0 } ;
  assign MUX_fda_divider_intDivide_rg_numer$write_1__VAL_2 =
	     fda_divider_intDivide_rg_numer -
	     fda_divider_intDivide_rg_denom2 ;
  assign MUX_fda_divider_intDivide_rg_quo$write_1__VAL_1 =
	     fda_divider_intDivide_rg_quo + fda_divider_intDivide_rg_n ;
  assign MUX_fda_divider_intDivide_rg_quo$write_1__VAL_2 =
	     (f2__h87300 == 20'd0) ? 39'h7FFFFFFFFF : 39'd0 ;
  assign MUX_fda_divider_intDivide_rg_state$write_1__VAL_3 =
	     (f2__h87300 == 20'd0) ? 2'd3 : 2'd1 ;
  assign MUX_rg_quire$write_1__VAL_1 =
	     (ptoq_positToquire_fifo_stage1_reg$D_OUT[1:0] == 2'd2) ?
	       288'd0 :
	       twos_complement_carry_int_frac__h57992 ;
  assign MUX_rg_quire$write_1__VAL_2 =
	     (x__h30360 | y__h30361) ?
	       288'h800000000000000000000000000000000000000000000000000000000000000000000000 :
	       IF_INV_NOT_IF_NOT_fda_adder_fifo_stage0_reg_fi_ETC___d291 ;
  assign MUX_rg_quire$write_1__VAL_3 =
	     (x__h1246 | y__h1247) ?
	       288'h800000000000000000000000000000000000000000000000000000000000000000000000 :
	       IF_INV_NOT_IF_NOT_fma_adder_fifo_stage0_reg_fi_ETC___d107 ;

  // inlined wires
  assign opcode_in_rv$port0__write_1 = { 1'd1, ffI$D_OUT[2:0] } ;
  assign opcode_in_rv$port1__read =
	     CAN_FIRE_RL_extract_in ?
	       opcode_in_rv$port0__write_1 :
	       opcode_in_rv ;
  assign opcode_in_rv$EN_port1__write =
	     WILL_FIRE_RL_rl_qtop || WILL_FIRE_RL_rl_ptoq ||
	     WILL_FIRE_RL_rl_ftop ||
	     WILL_FIRE_RL_rl_ptof ||
	     WILL_FIRE_RL_rl_fda ||
	     WILL_FIRE_RL_rl_fma ;
  assign opcode_in_rv$port2__read =
	     opcode_in_rv$EN_port1__write ? 4'd2 : opcode_in_rv$port1__read ;
  assign ffI_f_rv$EN_port0__write =
	     WILL_FIRE_RL_extract_in && ffI$D_OUT[2:0] == 3'd4 ;
  assign ffI_f_rv$port0__write_1 = { 1'd1, ffI$D_OUT[103:72] } ;
  assign ffI_f_rv$port1__read =
	     ffI_f_rv$EN_port0__write ? ffI_f_rv$port0__write_1 : ffI_f_rv ;
  assign ffI_f_rv$port2__read =
	     CAN_FIRE_RL_rl_ftop ? 33'h0AAAAAAAA : ffI_f_rv$port1__read ;

  // register fda_check_quire
  assign fda_check_quire$D_IN = 1'b0 ;
  assign fda_check_quire$EN = 1'b0 ;

  // register fda_divider_intDivide_rg_denom
  assign fda_divider_intDivide_rg_denom$D_IN = f2__h87300 ;
  assign fda_divider_intDivide_rg_denom$EN =
	     MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_2 ;

  // register fda_divider_intDivide_rg_denom2
  always@(MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_1 or
	  MUX_fda_divider_intDivide_rg_denom2$write_1__VAL_1 or
	  MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_2 or
	  MUX_fda_divider_intDivide_rg_denom2$write_1__VAL_2 or
	  MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_3 or
	  MUX_fda_divider_intDivide_rg_denom2$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_1:
	  fda_divider_intDivide_rg_denom2$D_IN =
	      MUX_fda_divider_intDivide_rg_denom2$write_1__VAL_1;
      MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_2:
	  fda_divider_intDivide_rg_denom2$D_IN =
	      MUX_fda_divider_intDivide_rg_denom2$write_1__VAL_2;
      MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_3:
	  fda_divider_intDivide_rg_denom2$D_IN =
	      MUX_fda_divider_intDivide_rg_denom2$write_1__VAL_3;
      default: fda_divider_intDivide_rg_denom2$D_IN =
		   58'h2AAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign fda_divider_intDivide_rg_denom2$EN =
	     WILL_FIRE_RL_fda_divider_intDivide_rl_loop1 &&
	     fda_divider_intDivide_rg_denom2_43_ULE_0_CONCA_ETC___d147 ||
	     WILL_FIRE_RL_rl_fda && f2__h87300 != 20'd0 ||
	     WILL_FIRE_RL_fda_divider_intDivide_rl_loop2 &&
	     !fda_divider_intDivide_rg_numer_44_ULT_0_CONCAT_ETC___d156 &&
	     fda_divider_intDivide_rg_numer_44_ULT_fda_divi_ETC___d167 ;

  // register fda_divider_intDivide_rg_n
  always@(MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_1 or
	  MUX_fda_divider_intDivide_rg_n$write_1__VAL_1 or
	  MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_2 or
	  MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_3 or
	  MUX_fda_divider_intDivide_rg_n$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_1:
	  fda_divider_intDivide_rg_n$D_IN =
	      MUX_fda_divider_intDivide_rg_n$write_1__VAL_1;
      MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_2:
	  fda_divider_intDivide_rg_n$D_IN = 39'd1;
      MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_3:
	  fda_divider_intDivide_rg_n$D_IN =
	      MUX_fda_divider_intDivide_rg_n$write_1__VAL_3;
      default: fda_divider_intDivide_rg_n$D_IN =
		   39'h2AAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign fda_divider_intDivide_rg_n$EN =
	     WILL_FIRE_RL_fda_divider_intDivide_rl_loop1 &&
	     fda_divider_intDivide_rg_denom2_43_ULE_0_CONCA_ETC___d147 ||
	     WILL_FIRE_RL_rl_fda && f2__h87300 != 20'd0 ||
	     WILL_FIRE_RL_fda_divider_intDivide_rl_loop2 &&
	     !fda_divider_intDivide_rg_numer_44_ULT_0_CONCAT_ETC___d156 &&
	     fda_divider_intDivide_rg_numer_44_ULT_fda_divi_ETC___d167 ;

  // register fda_divider_intDivide_rg_numer
  assign fda_divider_intDivide_rg_numer$D_IN =
	     MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_2 ?
	       MUX_fda_divider_intDivide_rg_numer$write_1__VAL_1 :
	       MUX_fda_divider_intDivide_rg_numer$write_1__VAL_2 ;
  assign fda_divider_intDivide_rg_numer$EN =
	     WILL_FIRE_RL_rl_fda && f2__h87300 != 20'd0 ||
	     WILL_FIRE_RL_fda_divider_intDivide_rl_loop2 &&
	     !fda_divider_intDivide_rg_numer_44_ULT_0_CONCAT_ETC___d156 &&
	     !fda_divider_intDivide_rg_numer_44_ULT_fda_divi_ETC___d167 ;

  // register fda_divider_intDivide_rg_quo
  assign fda_divider_intDivide_rg_quo$D_IN =
	     MUX_fda_divider_intDivide_rg_numer$write_1__SEL_2 ?
	       MUX_fda_divider_intDivide_rg_quo$write_1__VAL_1 :
	       MUX_fda_divider_intDivide_rg_quo$write_1__VAL_2 ;
  assign fda_divider_intDivide_rg_quo$EN =
	     WILL_FIRE_RL_fda_divider_intDivide_rl_loop2 &&
	     !fda_divider_intDivide_rg_numer_44_ULT_0_CONCAT_ETC___d156 &&
	     !fda_divider_intDivide_rg_numer_44_ULT_fda_divi_ETC___d167 ||
	     WILL_FIRE_RL_rl_fda ;

  // register fda_divider_intDivide_rg_state
  always@(MUX_fda_divider_intDivide_fifo_output_reg$enq_1__SEL_1 or
	  MUX_fda_divider_intDivide_rg_state$write_1__SEL_2 or
	  WILL_FIRE_RL_rl_fda or
	  MUX_fda_divider_intDivide_rg_state$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_fda_divider_intDivide_fifo_output_reg$enq_1__SEL_1:
	  fda_divider_intDivide_rg_state$D_IN = 2'd3;
      MUX_fda_divider_intDivide_rg_state$write_1__SEL_2:
	  fda_divider_intDivide_rg_state$D_IN = 2'd2;
      WILL_FIRE_RL_rl_fda:
	  fda_divider_intDivide_rg_state$D_IN =
	      MUX_fda_divider_intDivide_rg_state$write_1__VAL_3;
      default: fda_divider_intDivide_rg_state$D_IN =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  assign fda_divider_intDivide_rg_state$EN =
	     WILL_FIRE_RL_fda_divider_intDivide_rl_loop2 &&
	     fda_divider_intDivide_rg_numer_44_ULT_0_CONCAT_ETC___d156 ||
	     WILL_FIRE_RL_fda_divider_intDivide_rl_loop1 &&
	     !fda_divider_intDivide_rg_denom2_43_ULE_0_CONCA_ETC___d147 ||
	     WILL_FIRE_RL_rl_fda ;

  // register ffI_f_rv
  assign ffI_f_rv$D_IN = ffI_f_rv$port2__read ;
  assign ffI_f_rv$EN = 1'b1 ;

  // register fma_check_quire
  assign fma_check_quire$D_IN = 1'b0 ;
  assign fma_check_quire$EN = 1'b0 ;

  // register opcode_in_rv
  assign opcode_in_rv$D_IN = opcode_in_rv$port2__read ;
  assign opcode_in_rv$EN = 1'b1 ;

  // register rg_quire
  always@(WILL_FIRE_RL_ptoq_positToquire_stage_2 or
	  MUX_rg_quire$write_1__VAL_1 or
	  WILL_FIRE_RL_fda_adder_stage_1 or
	  MUX_rg_quire$write_1__VAL_2 or
	  WILL_FIRE_RL_fma_adder_stage_1 or MUX_rg_quire$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_ptoq_positToquire_stage_2:
	rg_quire$D_IN = MUX_rg_quire$write_1__VAL_1;
    WILL_FIRE_RL_fda_adder_stage_1:
	rg_quire$D_IN = MUX_rg_quire$write_1__VAL_2;
    WILL_FIRE_RL_fma_adder_stage_1:
	rg_quire$D_IN = MUX_rg_quire$write_1__VAL_3;
    default: rg_quire$D_IN =
		 288'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign rg_quire$EN =
	     WILL_FIRE_RL_fma_adder_stage_1 ||
	     WILL_FIRE_RL_fda_adder_stage_1 ||
	     WILL_FIRE_RL_ptoq_positToquire_stage_2 ;

  // register rg_quire_busy
  assign rg_quire_busy$D_IN =
	     !MUX_rg_quire_busy$write_1__SEL_1 &&
	     !MUX_rg_quire_busy$write_1__SEL_2 ;
  assign rg_quire_busy$EN =
	     WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd6 ||
	     WILL_FIRE_RL_rl_out &&
	     (opcode_out$D_OUT == 3'd0 || opcode_out$D_OUT == 3'd2 ||
	      opcode_out$D_OUT == 3'd1 ||
	      opcode_out$D_OUT == 3'd3 ||
	      opcode_out$D_OUT == 3'd7) ||
	     WILL_FIRE_RL_rl_qtop ||
	     WILL_FIRE_RL_rl_ptoq ||
	     WILL_FIRE_RL_rl_fda ||
	     WILL_FIRE_RL_rl_fma ;

  // submodule extracter1_fifo_output_reg
  assign extracter1_fifo_output_reg$D_IN =
	     { (ffI$D_OUT[94:72] == 23'd0 && !ffI$D_OUT[95]) ?
		 2'd2 :
		 ((ffI$D_OUT[94:72] == 23'd0 && ffI$D_OUT[95]) ? 2'd1 : 2'd0),
	       ffI$D_OUT[95],
	       IF_ffI_first__75_BITS_94_TO_72_07_EQ_0_08_AND__ETC___d766 } ;
  assign extracter1_fifo_output_reg$ENQ =
	     WILL_FIRE_RL_extract_in &&
	     (ffI$D_OUT[2:0] == 3'd1 || ffI$D_OUT[2:0] == 3'd3 ||
	      ffI$D_OUT[2:0] == 3'd2 ||
	      ffI$D_OUT[2:0] == 3'd0 ||
	      ffI$D_OUT[2:0] == 3'd5 ||
	      ffI$D_OUT[2:0] == 3'd7) ;
  assign extracter1_fifo_output_reg$DEQ = MUX_opcode_out$enq_1__SEL_1 ;
  assign extracter1_fifo_output_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage0_reg
  assign extracter1_fifo_stage0_reg$D_IN = 26'h0 ;
  assign extracter1_fifo_stage0_reg$ENQ = 1'b0 ;
  assign extracter1_fifo_stage0_reg$DEQ = 1'b0 ;
  assign extracter1_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage1_reg
  assign extracter1_fifo_stage1_reg$D_IN = 35'h0 ;
  assign extracter1_fifo_stage1_reg$ENQ = 1'b0 ;
  assign extracter1_fifo_stage1_reg$DEQ = 1'b0 ;
  assign extracter1_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage2_reg
  assign extracter1_fifo_stage2_reg$D_IN = 32'h0 ;
  assign extracter1_fifo_stage2_reg$ENQ = 1'b0 ;
  assign extracter1_fifo_stage2_reg$DEQ = 1'b0 ;
  assign extracter1_fifo_stage2_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_output_reg
  assign extracter2_fifo_output_reg$D_IN =
	     { (IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR_ffI_ETC___d772[22:0] ==
		23'd0 &&
		!IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR_ffI_ETC___d772[23]) ?
		 2'd2 :
		 ((IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR_ffI_ETC___d772[22:0] ==
		   23'd0 &&
		   IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR_ffI_ETC___d772[23]) ?
		    2'd1 :
		    2'd0),
	       IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR_ffI_ETC___d772[23],
	       IF_IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR__ETC___d1032 } ;
  assign extracter2_fifo_output_reg$ENQ =
	     WILL_FIRE_RL_extract_in &&
	     (ffI$D_OUT[2:0] == 3'd1 || ffI$D_OUT[2:0] == 3'd3 ||
	      ffI$D_OUT[2:0] == 3'd2 ||
	      ffI$D_OUT[2:0] == 3'd0) ;
  assign extracter2_fifo_output_reg$DEQ =
	     WILL_FIRE_RL_rl_fda || WILL_FIRE_RL_rl_fma ;
  assign extracter2_fifo_output_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage0_reg
  assign extracter2_fifo_stage0_reg$D_IN = 26'h0 ;
  assign extracter2_fifo_stage0_reg$ENQ = 1'b0 ;
  assign extracter2_fifo_stage0_reg$DEQ = 1'b0 ;
  assign extracter2_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage1_reg
  assign extracter2_fifo_stage1_reg$D_IN = 35'h0 ;
  assign extracter2_fifo_stage1_reg$ENQ = 1'b0 ;
  assign extracter2_fifo_stage1_reg$DEQ = 1'b0 ;
  assign extracter2_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage2_reg
  assign extracter2_fifo_stage2_reg$D_IN = 32'h0 ;
  assign extracter2_fifo_stage2_reg$ENQ = 1'b0 ;
  assign extracter2_fifo_stage2_reg$DEQ = 1'b0 ;
  assign extracter2_fifo_stage2_reg$CLR = 1'b0 ;

  // submodule fda_adder_fifo_output_reg
  assign fda_adder_fifo_output_reg$ENQ = CAN_FIRE_RL_fda_adder_stage_1 ;
  assign fda_adder_fifo_output_reg$DEQ = CAN_FIRE_RL_fda_rl_out ;
  assign fda_adder_fifo_output_reg$CLR = 1'b0 ;

  // submodule fda_adder_fifo_stage0_reg
  assign fda_adder_fifo_stage0_reg$D_IN =
	     { IF_NOT_rg_quire_12_BIT_287_13_14_AND_NOT_fda_d_ETC___d308,
	       x__h57447,
	       x__h57452,
	       IF_rg_quire_12_EQ_0_33_THEN_2_ELSE_0___d134,
	       fda_divider_fifo_output_reg$D_OUT[292:290] } ;
  assign fda_adder_fifo_stage0_reg$ENQ = CAN_FIRE_RL_fda_rl_connect1 ;
  assign fda_adder_fifo_stage0_reg$DEQ = CAN_FIRE_RL_fda_adder_stage_1 ;
  assign fda_adder_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule fda_divider_fifo_output_reg
  assign fda_divider_fifo_output_reg$D_IN =
	     { (twos_complement_carry_int_frac__h29579 == 288'd0 &&
		fda_divider_fifo_stage0_reg$D_OUT[11:10] == 2'd0) ?
		 2'd2 :
		 fda_divider_fifo_stage0_reg$D_OUT[11:10],
	       fda_divider_fifo_stage0_reg$D_OUT[12],
	       twos_complement_carry_int_frac__h29579,
	       IF_fda_divider_fifo_stage0_reg_first__82_BIT_8_ETC___d242 } ;
  assign fda_divider_fifo_output_reg$ENQ = CAN_FIRE_RL_fda_divider_stage_1 ;
  assign fda_divider_fifo_output_reg$DEQ = CAN_FIRE_RL_fda_rl_connect1 ;
  assign fda_divider_fifo_output_reg$CLR = 1'b0 ;

  // submodule fda_divider_fifo_stage0_reg
  assign fda_divider_fifo_stage0_reg$D_IN =
	     { x__h88299,
	       (extracter1_fifo_output_reg$D_OUT[29:28] == 2'd2 &&
		extracter2_fifo_output_reg$D_OUT[29:28] != 2'd2 ||
		extracter1_fifo_output_reg$D_OUT[29:28] != 2'd1 &&
		extracter2_fifo_output_reg$D_OUT[29:28] == 2'd1) ?
		 2'd2 :
		 ((extracter1_fifo_output_reg$D_OUT[29:28] == 2'd1 &&
		   extracter2_fifo_output_reg$D_OUT[29:28] != 2'd1 ||
		   extracter1_fifo_output_reg$D_OUT[29:28] != 2'd2 &&
		   extracter2_fifo_output_reg$D_OUT[29:28] == 2'd2) ?
		    2'd1 :
		    2'd0),
	       extracter1_fifo_output_reg_first__078_BIT_27_0_ETC___d1158 } ;
  assign fda_divider_fifo_stage0_reg$ENQ = CAN_FIRE_RL_rl_fda ;
  assign fda_divider_fifo_stage0_reg$DEQ = CAN_FIRE_RL_fda_divider_stage_1 ;
  assign fda_divider_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule fda_divider_intDivide_fifo_output_reg
  assign fda_divider_intDivide_fifo_output_reg$D_IN =
	     MUX_fda_divider_intDivide_fifo_output_reg$enq_1__SEL_1 ?
	       MUX_fda_divider_intDivide_fifo_output_reg$enq_1__VAL_1 :
	       MUX_fda_divider_intDivide_fifo_output_reg$enq_1__VAL_2 ;
  assign fda_divider_intDivide_fifo_output_reg$ENQ =
	     WILL_FIRE_RL_fda_divider_intDivide_rl_loop2 &&
	     fda_divider_intDivide_rg_numer_44_ULT_0_CONCAT_ETC___d156 ||
	     WILL_FIRE_RL_rl_fda && f2__h87300 == 20'd0 ;
  assign fda_divider_intDivide_fifo_output_reg$DEQ =
	     CAN_FIRE_RL_fda_divider_stage_1 ;
  assign fda_divider_intDivide_fifo_output_reg$CLR = 1'b0 ;

  // submodule fda_ffO
  assign fda_ffO$ENQ = CAN_FIRE_RL_fda_rl_out ;
  assign fda_ffO$DEQ =
	     WILL_FIRE_RL_rl_out &&
	     (opcode_out$D_OUT == 3'd1 || opcode_out$D_OUT == 3'd3) ;
  assign fda_ffO$CLR = 1'b0 ;

  // submodule ffI
  assign ffI$D_IN =
	     { CASE_server_core_request_put_BITS_137_TO_136_0_ETC__q31,
	       server_core_request_put[135:72],
	       CASE_server_core_request_put_BITS_71_TO_70_0_s_ETC__q32,
	       server_core_request_put[69:0] } ;
  assign ffI$ENQ = EN_server_core_request_put ;
  assign ffI$DEQ = CAN_FIRE_RL_extract_in ;
  assign ffI$CLR = 1'b0 ;

  // submodule ffO
  always@(opcode_out$D_OUT or
	  normalizer_fifo_output_reg$D_OUT or ptof_ffO$D_OUT)
  begin
    case (opcode_out$D_OUT)
      3'd0, 3'd1, 3'd2, 3'd3, 3'd7: ffO$D_IN = 71'h555555555540000000;
      3'd5: ffO$D_IN = { 34'h1AAAAAAAA, ptof_ffO$D_OUT, 5'd0 };
      default: ffO$D_IN =
		   { 41'h12AAAAAAAAA,
		     normalizer_fifo_output_reg$D_OUT[27:3],
		     normalizer_fifo_output_reg$D_OUT[27],
		     1'd0,
		     normalizer_fifo_output_reg$D_OUT[2:1] == 2'd1,
		     normalizer_fifo_output_reg$D_OUT[2:1] == 2'd2 &&
		     normalizer_fifo_output_reg$D_OUT[0],
		     normalizer_fifo_output_reg$D_OUT[0] };
    endcase
  end
  assign ffO$ENQ = WILL_FIRE_RL_rl_out ;
  assign ffO$DEQ = EN_server_core_response_get ;
  assign ffO$CLR = 1'b0 ;

  // submodule fma_adder_fifo_output_reg
  assign fma_adder_fifo_output_reg$ENQ = CAN_FIRE_RL_fma_adder_stage_1 ;
  assign fma_adder_fifo_output_reg$DEQ = CAN_FIRE_RL_fma_rl_out ;
  assign fma_adder_fifo_output_reg$CLR = 1'b0 ;

  // submodule fma_adder_fifo_stage0_reg
  assign fma_adder_fifo_stage0_reg$D_IN =
	     { IF_NOT_rg_quire_12_BIT_287_13_14_AND_NOT_fma_m_ETC___d127,
	       x__h28359,
	       x__h28364,
	       IF_rg_quire_12_EQ_0_33_THEN_2_ELSE_0___d134,
	       fma_multiplier_fifo_output_reg$D_OUT[292:290] } ;
  assign fma_adder_fifo_stage0_reg$ENQ = CAN_FIRE_RL_fma_rl_connect1 ;
  assign fma_adder_fifo_stage0_reg$DEQ = CAN_FIRE_RL_fma_adder_stage_1 ;
  assign fma_adder_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule fma_ffO
  assign fma_ffO$ENQ = CAN_FIRE_RL_fma_rl_out ;
  assign fma_ffO$DEQ =
	     WILL_FIRE_RL_rl_out &&
	     (opcode_out$D_OUT == 3'd0 || opcode_out$D_OUT == 3'd2) ;
  assign fma_ffO$CLR = 1'b0 ;

  // submodule fma_multiplier_fifo_output_reg
  assign fma_multiplier_fifo_output_reg$D_IN =
	     { (twos_complement_carry_int_frac__h437 == 288'd0 &&
		fma_multiplier_fifo_stage0_reg$D_OUT[51:50] == 2'd0) ?
		 2'd2 :
		 fma_multiplier_fifo_stage0_reg$D_OUT[51:50],
	       fma_multiplier_fifo_stage0_reg$D_OUT[52],
	       twos_complement_carry_int_frac__h437,
	       x__h828,
	       x__h872 } ;
  assign fma_multiplier_fifo_output_reg$ENQ =
	     CAN_FIRE_RL_fma_multiplier_stage_1 ;
  assign fma_multiplier_fifo_output_reg$DEQ = CAN_FIRE_RL_fma_rl_connect1 ;
  assign fma_multiplier_fifo_output_reg$CLR = 1'b0 ;

  // submodule fma_multiplier_fifo_stage0_reg
  assign fma_multiplier_fifo_stage0_reg$D_IN =
	     { x__h87207,
	       (extracter1_fifo_output_reg$D_OUT[29:28] == 2'd2 &&
		extracter2_fifo_output_reg$D_OUT[29:28] == 2'd2) ?
		 2'd2 :
		 ((extracter1_fifo_output_reg$D_OUT[29:28] == 2'd1 ||
		   extracter2_fifo_output_reg$D_OUT[29:28] == 2'd1) ?
		    2'd1 :
		    2'd0),
	       extracter1_fifo_output_reg_first__078_BIT_27_0_ETC___d1115 } ;
  assign fma_multiplier_fifo_stage0_reg$ENQ = CAN_FIRE_RL_rl_fma ;
  assign fma_multiplier_fifo_stage0_reg$DEQ =
	     CAN_FIRE_RL_fma_multiplier_stage_1 ;
  assign fma_multiplier_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule ftop_fToP_fifo_output_reg
  assign ftop_fToP_fifo_output_reg$D_IN =
	     { ftop_fToP_fifo_stage0_reg$D_OUT[38:27],
	       x_frac__h59552,
	       x__h59678,
	       x__h59755 } ;
  assign ftop_fToP_fifo_output_reg$ENQ = CAN_FIRE_RL_ftop_fToP_stage_1 ;
  assign ftop_fToP_fifo_output_reg$DEQ = CAN_FIRE_RL_ftop_rl_out ;
  assign ftop_fToP_fifo_output_reg$CLR = 1'b0 ;

  // submodule ftop_fToP_fifo_stage0_reg
  assign ftop_fToP_fifo_stage0_reg$D_IN =
	     { ffI_f_rv$port1__read[31],
	       (ffI_f_rv$port1__read[30:23] == 8'd255 &&
		ffI_f_rv$port1__read[22:0] == 23'd0) ?
		 2'd1 :
		 ((ffI_f_rv$port1__read[30:23] == 8'd0 &&
		   ffI_f_rv$port1__read[22:0] == 23'd0) ?
		    2'd2 :
		    2'd0),
	       x__h89155,
	       IF_0_CONCAT_ffI_f_rv_port1__read__183_BITS_30__ETC___d1210,
	       ffI_f_rv$port1__read[22:4],
	       IF_0_CONCAT_ffI_f_rv_port1__read__183_BITS_30__ETC___d1221,
	       ffI_f_rv$port1__read[3],
	       x__h89326 } ;
  assign ftop_fToP_fifo_stage0_reg$ENQ = CAN_FIRE_RL_rl_ftop ;
  assign ftop_fToP_fifo_stage0_reg$DEQ = CAN_FIRE_RL_ftop_fToP_stage_1 ;
  assign ftop_fToP_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule ftop_ffO
  assign ftop_ffO$D_IN = ftop_fToP_fifo_output_reg$D_OUT ;
  assign ftop_ffO$ENQ = CAN_FIRE_RL_ftop_rl_out ;
  assign ftop_ffO$DEQ = WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd4 ;
  assign ftop_ffO$CLR = 1'b0 ;

  // submodule need_normalize
  assign need_normalize$D_IN = 1'b0 ;
  assign need_normalize$ENQ = 1'b0 ;
  assign need_normalize$DEQ = 1'b0 ;
  assign need_normalize$CLR = 1'b0 ;

  // submodule normalizer_fifo_output_reg
  assign normalizer_fifo_output_reg$D_IN =
	     (opcode_norm$D_OUT == 3'd4) ?
	       { ftop_ffO$D_OUT[29],
		 output_regf_out_posit__h138952,
		 ftop_ffO$D_OUT[31:30],
		 flag_prev_truncate__h138930 - _theResult____h138931 ||
		 a__h138968 == 23'd0 &&
		 NOT_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_ETC___d2019 } :
	       { qtop_ffO$D_OUT[29],
		 output_regf_out_posit__h143448,
		 qtop_ffO$D_OUT[31:30],
		 flag_prev_truncate__h143430 - _theResult____h143431 ||
		 a__h143464 == 23'd0 &&
		 NOT_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_ETC___d2195 } ;
  assign normalizer_fifo_output_reg$ENQ =
	     WILL_FIRE_RL_rl_norm &&
	     (opcode_norm$D_OUT == 3'd4 || opcode_norm$D_OUT == 3'd6) ;
  assign normalizer_fifo_output_reg$DEQ =
	     WILL_FIRE_RL_rl_out &&
	     (opcode_out$D_OUT == 3'd4 || opcode_out$D_OUT == 3'd6) ;
  assign normalizer_fifo_output_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage0_reg
  assign normalizer_fifo_stage0_reg$D_IN = 50'h0 ;
  assign normalizer_fifo_stage0_reg$ENQ = 1'b0 ;
  assign normalizer_fifo_stage0_reg$DEQ = 1'b0 ;
  assign normalizer_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage1_reg
  assign normalizer_fifo_stage1_reg$D_IN = 54'h0 ;
  assign normalizer_fifo_stage1_reg$ENQ = 1'b0 ;
  assign normalizer_fifo_stage1_reg$DEQ = 1'b0 ;
  assign normalizer_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage2_reg
  assign normalizer_fifo_stage2_reg$D_IN = 28'h0 ;
  assign normalizer_fifo_stage2_reg$ENQ = 1'b0 ;
  assign normalizer_fifo_stage2_reg$DEQ = 1'b0 ;
  assign normalizer_fifo_stage2_reg$CLR = 1'b0 ;

  // submodule opcode_norm
  assign opcode_norm$D_IN = opcode_in_rv$port1__read[2:0] ;
  assign opcode_norm$ENQ = WILL_FIRE_RL_rl_qtop || WILL_FIRE_RL_rl_ftop ;
  assign opcode_norm$DEQ = WILL_FIRE_RL_rl_norm ;
  assign opcode_norm$CLR = 1'b0 ;

  // submodule opcode_out
  assign opcode_out$D_IN =
	     MUX_opcode_out$enq_1__SEL_1 ?
	       opcode_in_rv$port1__read[2:0] :
	       opcode_norm$D_OUT ;
  assign opcode_out$ENQ =
	     WILL_FIRE_RL_rl_ptoq || WILL_FIRE_RL_rl_ptof ||
	     WILL_FIRE_RL_rl_fda ||
	     WILL_FIRE_RL_rl_fma ||
	     WILL_FIRE_RL_rl_norm ;
  assign opcode_out$DEQ = CAN_FIRE_RL_rl_out ;
  assign opcode_out$CLR = 1'b0 ;

  // submodule ptof_ffO
  assign ptof_ffO$D_IN = ptof_ptoF_fifo_output_reg$D_OUT ;
  assign ptof_ffO$ENQ = CAN_FIRE_RL_ptof_rl_out ;
  assign ptof_ffO$DEQ = WILL_FIRE_RL_rl_out && opcode_out$D_OUT == 3'd5 ;
  assign ptof_ffO$CLR = 1'b0 ;

  // submodule ptof_ptoF_fifo_output_reg
  always@(ptof_ptoF_fifo_stage0_reg$D_OUT or
	  float_no__h60306 or add_round__h60307)
  begin
    case (ptof_ptoF_fifo_stage0_reg$D_OUT[40:39])
      2'd1: ptof_ptoF_fifo_output_reg$D_IN = 32'hFF800000;
      2'd2: ptof_ptoF_fifo_output_reg$D_IN = 32'd0;
      default: ptof_ptoF_fifo_output_reg$D_IN =
		   float_no__h60306 + { 31'd0, add_round__h60307 };
    endcase
  end
  assign ptof_ptoF_fifo_output_reg$ENQ = CAN_FIRE_RL_ptof_ptoF_stage_2 ;
  assign ptof_ptoF_fifo_output_reg$DEQ = CAN_FIRE_RL_ptof_rl_out ;
  assign ptof_ptoF_fifo_output_reg$CLR = 1'b0 ;

  // submodule ptof_ptoF_fifo_stage0_reg
  assign ptof_ptoF_fifo_stage0_reg$D_IN =
	     { extracter1_fifo_output_reg$D_OUT[27],
	       extracter1_fifo_output_reg$D_OUT[29:28],
	       IF_extracter1_fifo_output_reg_first__078_BITS__ETC___d1169,
	       stage0_regf_frac__h88566,
	       IF_extracter1_fifo_output_reg_first__078_BITS__ETC___d1180,
	       2'd1 } ;
  assign ptof_ptoF_fifo_stage0_reg$ENQ = CAN_FIRE_RL_rl_ptof ;
  assign ptof_ptoF_fifo_stage0_reg$DEQ = CAN_FIRE_RL_ptof_ptoF_stage_2 ;
  assign ptof_ptoF_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule ptoq_ffO
  assign ptoq_ffO$ENQ = CAN_FIRE_RL_ptoq_rl_out ;
  assign ptoq_ffO$DEQ = WILL_FIRE_RL_rl_out && opcode_out$D_OUT == 3'd7 ;
  assign ptoq_ffO$CLR = 1'b0 ;

  // submodule ptoq_positToquire_fifo_output_reg
  assign ptoq_positToquire_fifo_output_reg$ENQ =
	     CAN_FIRE_RL_ptoq_positToquire_stage_2 ;
  assign ptoq_positToquire_fifo_output_reg$DEQ = CAN_FIRE_RL_ptoq_rl_out ;
  assign ptoq_positToquire_fifo_output_reg$CLR = 1'b0 ;

  // submodule ptoq_positToquire_fifo_stage0_reg
  assign ptoq_positToquire_fifo_stage0_reg$D_IN = 30'h0 ;
  assign ptoq_positToquire_fifo_stage0_reg$ENQ = 1'b0 ;
  assign ptoq_positToquire_fifo_stage0_reg$DEQ = 1'b0 ;
  assign ptoq_positToquire_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule ptoq_positToquire_fifo_stage1_reg
  assign ptoq_positToquire_fifo_stage1_reg$D_IN =
	     { extracter1_fifo_output_reg$D_OUT[27],
	       int_frac__h89502,
	       extracter1_fifo_output_reg$D_OUT[29:28] } ;
  assign ptoq_positToquire_fifo_stage1_reg$ENQ = CAN_FIRE_RL_rl_ptoq ;
  assign ptoq_positToquire_fifo_stage1_reg$DEQ =
	     CAN_FIRE_RL_ptoq_positToquire_stage_2 ;
  assign ptoq_positToquire_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule qtop_ffO
  assign qtop_ffO$D_IN = qtop_quireToPosit1_fifo_output_reg$D_OUT ;
  assign qtop_ffO$ENQ = CAN_FIRE_RL_qtop_rl_out ;
  assign qtop_ffO$DEQ = MUX_rg_quire_busy$write_1__SEL_2 ;
  assign qtop_ffO$CLR = 1'b0 ;

  // submodule qtop_quireToPosit1_fifo_output_reg
  assign qtop_quireToPosit1_fifo_output_reg$D_IN =
	     qtop_quireToPosit1_fifo_stage1_reg$D_OUT ;
  assign qtop_quireToPosit1_fifo_output_reg$ENQ =
	     CAN_FIRE_RL_qtop_quireToPosit1_stage_2 ;
  assign qtop_quireToPosit1_fifo_output_reg$DEQ = CAN_FIRE_RL_qtop_rl_out ;
  assign qtop_quireToPosit1_fifo_output_reg$CLR = 1'b0 ;

  // submodule qtop_quireToPosit1_fifo_stage0_reg
  assign qtop_quireToPosit1_fifo_stage0_reg$D_IN =
	     { rg_quire[287],
	       (!rg_quire[287] && rg_quire[286:0] == 287'd0) ? 2'd2 : 2'd0,
	       rg_quire_12_BIT_287_13_AND_rg_quire_12_BITS_28_ETC___d1842 } ;
  assign qtop_quireToPosit1_fifo_stage0_reg$ENQ = CAN_FIRE_RL_rl_qtop ;
  assign qtop_quireToPosit1_fifo_stage0_reg$DEQ =
	     CAN_FIRE_RL_qtop_quireToPosit1_stage_1 ;
  assign qtop_quireToPosit1_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule qtop_quireToPosit1_fifo_stage1_reg
  assign qtop_quireToPosit1_fifo_stage1_reg$D_IN =
	     { qtop_quireToPosit1_fifo_stage0_reg$D_OUT[298:287],
	       stage1_regf_frac__h58613,
	       x__h58935,
	       x__h58978 } ;
  assign qtop_quireToPosit1_fifo_stage1_reg$ENQ =
	     CAN_FIRE_RL_qtop_quireToPosit1_stage_1 ;
  assign qtop_quireToPosit1_fifo_stage1_reg$DEQ =
	     CAN_FIRE_RL_qtop_quireToPosit1_stage_2 ;
  assign qtop_quireToPosit1_fifo_stage1_reg$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_0_CONCAT_IF_IF_rg_quire_12_BIT_287_13_THEN__ETC___d1836 =
	     (_0_CONCAT_IF_IF_rg_quire_12_BIT_287_13_THEN_0_M_ETC___d1831[9] &&
	      _155_MINUS_0_CONCAT_IF_IF_rg_quire_12_BIT_287_1_ETC___d1833[9]) ?
	       10'd511 :
	       _155_MINUS_0_CONCAT_IF_IF_rg_quire_12_BIT_287_1_ETC___d1833 ;
  assign IF_0_CONCAT_ffI_f_rv_port1__read__183_BITS_30__ETC___d1210 =
	     _0_CONCAT_ffI_f_rv_port1__read__183_BITS_30_TO__ETC___d1207 ?
	       8'd168 :
	       (_0_CONCAT_ffI_f_rv_port1__read__183_BITS_30_TO__ETC___d1208 ?
		  _0_CONCAT_ffI_f_rvport1__read_BITS_30_TO_23_MI_ETC__q28[7:0] :
		  8'd88) ;
  assign IF_0_CONCAT_ffI_f_rv_port1__read__183_BITS_30__ETC___d1221 =
	     _0_CONCAT_ffI_f_rv_port1__read__183_BITS_30_TO__ETC___d1207 ?
	       IF_0_CONCAT_ffI_f_rv_port1__read__183_BITS_30__ETC__q29[5:0] :
	       (_0_CONCAT_ffI_f_rv_port1__read__183_BITS_30_TO__ETC___d1208 ?
		  6'd0 :
		  IF_0_CONCAT_ffI_f_rv_port1__read__183_BITS_30__ETC__q30[5:0]) ;
  assign IF_0_CONCAT_ffI_f_rv_port1__read__183_BITS_30__ETC__q29 =
	     ((_0_CONCAT_ffI_f_rv_port1__read__183_BITS_30_TO__ETC___d1212 ^
	       8'h80) <=
	      8'd97) ?
	       8'd225 :
	       _0_CONCAT_ffI_f_rv_port1__read__183_BITS_30_TO__ETC___d1212 ;
  assign IF_0_CONCAT_ffI_f_rv_port1__read__183_BITS_30__ETC__q30 =
	     ((_0_CONCAT_ffI_f_rv_port1__read__183_BITS_30_TO__ETC___d1216 ^
	       8'h80) <=
	      8'd159) ?
	       _0_CONCAT_ffI_f_rv_port1__read__183_BITS_30_TO__ETC___d1216 :
	       8'd31 ;
  assign IF_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864__ETC___d1898 =
	     _22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_THE_ETC___d1884 ?
	       5'd0 :
	       _22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_THE_ETC___d1883 -
	       5'd2 ;
  assign IF_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040__ETC___d2074 =
	     _22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_THE_ETC___d2060 ?
	       5'd0 :
	       _22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_THE_ETC___d2059 -
	       5'd2 ;
  assign IF_IF_22_MINUS_IF_ftop_ffO_first__859_BIT_28_8_ETC___d1958 =
	     (shift_new0__h138921 == 3'd0) ?
	       !ftop_ffO$D_OUT[1] :
	       !ftop_ffO_first__859_BITS_20_TO_2_914_BIT_IF_22_ETC___d1932 ;
  assign IF_IF_22_MINUS_IF_qtop_ffO_first__035_BIT_28_0_ETC___d2134 =
	     (shift_new0__h143421 == 3'd0) ?
	       !qtop_ffO$D_OUT[1] :
	       !qtop_ffO_first__035_BITS_20_TO_2_090_BIT_IF_22_ETC___d2108 ;
  assign IF_IF_IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84__ETC___d976 =
	     new_inp__h70952[22] ?
	       ((!INV_new_inp0952__q8[22] && !INV_new_inp0952__q8[21] &&
		 !INV_new_inp0952__q8[20] &&
		 !INV_new_inp0952__q8[19] &&
		 !INV_new_inp0952__q8[18] &&
		 !INV_new_inp0952__q8[17] &&
		 !INV_new_inp0952__q8[16] &&
		 !INV_new_inp0952__q8[15] &&
		 !INV_new_inp0952__q8[14] &&
		 !INV_new_inp0952__q8[13] &&
		 !INV_new_inp0952__q8[12] &&
		 !INV_new_inp0952__q8[11] &&
		 !INV_new_inp0952__q8[10] &&
		 !INV_new_inp0952__q8[9] &&
		 !INV_new_inp0952__q8[8] &&
		 !INV_new_inp0952__q8[7] &&
		 !INV_new_inp0952__q8[6] &&
		 !INV_new_inp0952__q8[5] &&
		 !INV_new_inp0952__q8[4] &&
		 !INV_new_inp0952__q8[3] &&
		 !INV_new_inp0952__q8[2] &&
		 !INV_new_inp0952__q8[1] &&
		 !INV_new_inp0952__q8[0]) ?
		  5'd23 :
		  5'd22) -
	       x__h71734 :
	       ((!new_inp__h70952[21] && !new_inp__h70952[20] &&
		 !new_inp__h70952[19] &&
		 !new_inp__h70952[18] &&
		 !new_inp__h70952[17] &&
		 !new_inp__h70952[16] &&
		 !new_inp__h70952[15] &&
		 !new_inp__h70952[14] &&
		 !new_inp__h70952[13] &&
		 !new_inp__h70952[12] &&
		 !new_inp__h70952[11] &&
		 !new_inp__h70952[10] &&
		 !new_inp__h70952[9] &&
		 !new_inp__h70952[8] &&
		 !new_inp__h70952[7] &&
		 !new_inp__h70952[6] &&
		 !new_inp__h70952[5] &&
		 !new_inp__h70952[4] &&
		 !new_inp__h70952[3] &&
		 !new_inp__h70952[2] &&
		 !new_inp__h70952[1] &&
		 !new_inp__h70952[0]) ?
		  5'd23 :
		  5'd22) -
	       x__h74992 ;
  assign IF_IF_NOT_IF_ftop_ffO_first__859_BIT_28_864_TH_ETC___d1986 =
	     (b__h139201[22] &&
	      !IF_NOT_IF_ftop_ffO_first__859_BIT_28_864_THEN__ETC___d1982[22]) ?
	       23'd8388607 :
	       IF_NOT_IF_ftop_ffO_first__859_BIT_28_864_THEN__ETC___d1982 ;
  assign IF_IF_NOT_IF_qtop_ffO_first__035_BIT_28_040_TH_ETC___d2162 =
	     (b__h143697[22] &&
	      !IF_NOT_IF_qtop_ffO_first__035_BIT_28_040_THEN__ETC___d2158[22]) ?
	       23'd8388607 :
	       IF_NOT_IF_qtop_ffO_first__035_BIT_28_040_THEN__ETC___d2158 ;
  assign IF_IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR__ETC___d1032 =
	     (IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR_ffI_ETC___d772[22:0] ==
	      23'd0 &&
	      !IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR_ffI_ETC___d772[23]) ?
	       27'd0 :
	       { SEXT_IF_IF_IF_ffI_first__75_BITS_2_TO_0_76_EQ__ETC___d883 +
		 { 6'd0, expo__h70959 },
		 frac__h70960 } ;
  assign IF_IF_ffI_first__75_BIT_95_09_THEN_0_MINUS_ffI_ETC___d710 =
	     new_inp__h63144[22] ?
	       ((!INV_new_inp3144__q2[22] && !INV_new_inp3144__q2[21] &&
		 !INV_new_inp3144__q2[20] &&
		 !INV_new_inp3144__q2[19] &&
		 !INV_new_inp3144__q2[18] &&
		 !INV_new_inp3144__q2[17] &&
		 !INV_new_inp3144__q2[16] &&
		 !INV_new_inp3144__q2[15] &&
		 !INV_new_inp3144__q2[14] &&
		 !INV_new_inp3144__q2[13] &&
		 !INV_new_inp3144__q2[12] &&
		 !INV_new_inp3144__q2[11] &&
		 !INV_new_inp3144__q2[10] &&
		 !INV_new_inp3144__q2[9] &&
		 !INV_new_inp3144__q2[8] &&
		 !INV_new_inp3144__q2[7] &&
		 !INV_new_inp3144__q2[6] &&
		 !INV_new_inp3144__q2[5] &&
		 !INV_new_inp3144__q2[4] &&
		 !INV_new_inp3144__q2[3] &&
		 !INV_new_inp3144__q2[2] &&
		 !INV_new_inp3144__q2[1] &&
		 !INV_new_inp3144__q2[0]) ?
		  5'd23 :
		  5'd22) -
	       x__h63855 :
	       ((!new_inp__h63144[21] && !new_inp__h63144[20] &&
		 !new_inp__h63144[19] &&
		 !new_inp__h63144[18] &&
		 !new_inp__h63144[17] &&
		 !new_inp__h63144[16] &&
		 !new_inp__h63144[15] &&
		 !new_inp__h63144[14] &&
		 !new_inp__h63144[13] &&
		 !new_inp__h63144[12] &&
		 !new_inp__h63144[11] &&
		 !new_inp__h63144[10] &&
		 !new_inp__h63144[9] &&
		 !new_inp__h63144[8] &&
		 !new_inp__h63144[7] &&
		 !new_inp__h63144[6] &&
		 !new_inp__h63144[5] &&
		 !new_inp__h63144[4] &&
		 !new_inp__h63144[3] &&
		 !new_inp__h63144[2] &&
		 !new_inp__h63144[1] &&
		 !new_inp__h63144[0]) ?
		  5'd23 :
		  5'd22) -
	       x__h67113 ;
  assign IF_INV_NOT_IF_NOT_fda_adder_fifo_stage0_reg_fi_ETC___d291 =
	     (all_bits_0__h30317 & y__h44894 &&
	      fda_adder_fifo_stage0_reg$D_OUT[4:3] == 2'd0 &&
	      fda_adder_fifo_stage0_reg$D_OUT[2:1] == 2'd0) ?
	       288'd0 :
	       x__h44918 ;
  assign IF_INV_NOT_IF_NOT_fma_adder_fifo_stage0_reg_fi_ETC___d107 =
	     (all_bits_0__h1203 & y__h15802 &&
	      fma_adder_fifo_stage0_reg$D_OUT[4:3] == 2'd0 &&
	      fma_adder_fifo_stage0_reg$D_OUT[2:1] == 2'd0) ?
	       288'd0 :
	       x__h15826 ;
  assign IF_NOT_IF_ftop_ffO_first__859_BIT_28_864_THEN__ETC___d1982 =
	     b__h139201 + b__h142293 ;
  assign IF_NOT_IF_qtop_ffO_first__035_BIT_28_040_THEN__ETC___d2158 =
	     b__h143697 + b__h146788 ;
  assign IF_NOT_rg_quire_12_BIT_287_13_14_AND_NOT_fda_d_ETC___d308 =
	     (!rg_quire[287] && !fda_divider_fifo_output_reg$D_OUT[289] &&
	      rg_quire_12_PLUS_fda_divider_fifo_output_reg_f_ETC___d301[287]) ?
	       288'h7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF :
	       ((rg_quire[287] && fda_divider_fifo_output_reg$D_OUT[289] &&
		 !rg_quire_12_PLUS_fda_divider_fifo_output_reg_f_ETC___d301[287]) ?
		  288'h800000000000000000000000000000000000000000000000000000000000000000000000 :
		  rg_quire_12_PLUS_fda_divider_fifo_output_reg_f_ETC___d301) ;
  assign IF_NOT_rg_quire_12_BIT_287_13_14_AND_NOT_fma_m_ETC___d127 =
	     (!rg_quire[287] && !fma_multiplier_fifo_output_reg$D_OUT[289] &&
	      rg_quire_12_PLUS_fma_multiplier_fifo_output_re_ETC___d120[287]) ?
	       288'h7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF :
	       ((rg_quire[287] && fma_multiplier_fifo_output_reg$D_OUT[289] &&
		 !rg_quire_12_PLUS_fma_multiplier_fifo_output_re_ETC___d120[287]) ?
		  288'h800000000000000000000000000000000000000000000000000000000000000000000000 :
		  rg_quire_12_PLUS_fma_multiplier_fifo_output_re_ETC___d120) ;
  assign IF_extracter1_fifo_output_reg_first__078_BITS__ETC___d1097 =
	     (extracter1_fifo_output_reg$D_OUT[29:28] == 2'd2) ?
	       2'b01 :
	       ((extracter2_fifo_output_reg$D_OUT[29:28] == 2'd2) ?
		  extracter2_fifo_output_reg$D_OUT[29:28] :
		  2'b11) ;
  assign IF_extracter1_fifo_output_reg_first__078_BITS__ETC___d1169 =
	     extracter1_fifo_output_reg_first__078_BITS_26__ETC___d1166 ?
	       8'd129 :
	       (extracter1_fifo_output_reg_first__078_BITS_26__ETC___d1167 ?
		  extracter1_fifo_output_reg$D_OUT[26:19] :
		  8'd127) ;
  assign IF_extracter1_fifo_output_reg_first__078_BITS__ETC___d1180 =
	     extracter1_fifo_output_reg_first__078_BITS_26__ETC___d1166 ?
	       IF_extracter1_fifo_output_reg_first__078_BITS__ETC__q25[5:0] :
	       (extracter1_fifo_output_reg_first__078_BITS_26__ETC___d1167 ?
		  6'd0 :
		  IF_extracter1_fifo_output_reg_first__078_BITS__ETC__q26[5:0]) ;
  assign IF_extracter1_fifo_output_reg_first__078_BITS__ETC__q25 =
	     ((extracter1_fifo_output_reg_first__078_BITS_26__ETC___d1171 ^
	       8'h80) <=
	      8'd97) ?
	       8'd225 :
	       extracter1_fifo_output_reg_first__078_BITS_26__ETC___d1171 ;
  assign IF_extracter1_fifo_output_reg_first__078_BITS__ETC__q26 =
	     ((extracter1_fifo_output_reg_first__078_BITS_26__ETC___d1175 ^
	       8'h80) <=
	      8'd159) ?
	       extracter1_fifo_output_reg_first__078_BITS_26__ETC___d1175 :
	       8'd31 ;
  assign IF_fda_divider_fifo_stage0_reg_first__82_BIT_8_ETC___d188 =
	     (fda_divider_fifo_stage0_reg$D_OUT[8] ?
		-fda_divider_fifo_stage0_reg$D_OUT[8:0] :
		fda_divider_fifo_stage0_reg$D_OUT[8:0]) -
	     9'd132 ;
  assign IF_fda_divider_fifo_stage0_reg_first__82_BIT_8_ETC___d189 =
	     IF_fda_divider_fifo_stage0_reg_first__82_BIT_8_ETC___d188 +
	     9'd38 ;
  assign IF_fda_divider_fifo_stage0_reg_first__82_BIT_8_ETC___d204 =
	     (fda_divider_fifo_stage0_reg$D_OUT[8] &&
	      NOT_IF_fda_divider_fifo_stage0_reg_first__82_B_ETC___d191 ||
	      (IF_fda_divider_fifo_stage0_reg_first__82_BIT_8_ETC___d188 +
	       9'd2 ^
	       9'h100) <=
	      9'd256) ?
	       23'd0 :
	       x__h29786[22:0] ;
  assign IF_fda_divider_fifo_stage0_reg_first__82_BIT_8_ETC___d213 =
	     (fda_divider_fifo_stage0_reg$D_OUT[8] &&
	      NOT_IF_fda_divider_fifo_stage0_reg_first__82_B_ETC___d191) ?
	       f_new___1__h29829 :
	       f_new__h29773 ;
  assign IF_fda_divider_fifo_stage0_reg_first__82_BIT_8_ETC___d242 =
	     (fda_divider_fifo_stage0_reg$D_OUT[8] &&
	      NOT_IF_fda_divider_fifo_stage0_reg_first__82_B_ETC___d191) ?
	       { truncated_frac_msb___1__h29830,
		 truncated_frac_zero___1__h29832 } :
	       { fda_divider_intDivide_fifo_output_reg$D_OUT[1],
		 truncated_frac_zero__h29627 } ;
  assign IF_ffI_first__75_BITS_94_TO_72_07_EQ_0_08_AND__ETC___d766 =
	     (ffI$D_OUT[94:72] == 23'd0 && !ffI$D_OUT[95]) ?
	       27'd0 :
	       { SEXT_IF_IF_ffI_first__75_BIT_95_09_THEN_0_MINU_ETC___d617 +
		 { 6'd0, expo__h63151 },
		 frac__h63152 } ;
  assign IF_fma_multiplier_fifo_stage0_reg_first_BIT_48_ETC___d10 =
	     (fma_multiplier_fifo_stage0_reg$D_OUT[48] ?
		-fma_multiplier_fifo_stage0_reg$D_OUT[48:40] :
		fma_multiplier_fifo_stage0_reg$D_OUT[48:40]) -
	     9'd132 ;
  assign IF_fma_multiplier_fifo_stage0_reg_first_BIT_48_ETC___d11 =
	     IF_fma_multiplier_fifo_stage0_reg_first_BIT_48_ETC___d10 +
	     9'd38 ;
  assign IF_fma_multiplier_fifo_stage0_reg_first_BIT_48_ETC___d12 =
	     (IF_fma_multiplier_fifo_stage0_reg_first_BIT_48_ETC___d11 ^
	      9'h100) <=
	     9'd256 ;
  assign IF_fma_multiplier_fifo_stage0_reg_first_BIT_48_ETC___d24 =
	     (fma_multiplier_fifo_stage0_reg$D_OUT[48] &&
	      !IF_fma_multiplier_fifo_stage0_reg_first_BIT_48_ETC___d12 ||
	      (IF_fma_multiplier_fifo_stage0_reg_first_BIT_48_ETC___d10 +
	       9'd2 ^
	       9'h100) <=
	      9'd256) ?
	       23'd0 :
	       x__h666[22:0] ;
  assign IF_fma_multiplier_fifo_stage0_reg_first_BIT_48_ETC___d33 =
	     (fma_multiplier_fifo_stage0_reg$D_OUT[48] &&
	      !IF_fma_multiplier_fifo_stage0_reg_first_BIT_48_ETC___d12) ?
	       f_new___1__h706 :
	       f_new__h653 ;
  assign IF_ftop_fToP_fifo_stage0_reg_first__82_BIT_7_8_ETC___d389 =
	     ftop_fToP_fifo_stage0_reg$D_OUT[7] ?
	       -ftop_fToP_fifo_stage0_reg$D_OUT[7:2] :
	       ftop_fToP_fifo_stage0_reg$D_OUT[7:2] ;
  assign IF_ftop_ffO_first__859_BIT_27_870_AND_NOT_ftop_ETC___d1876 =
	     (ftop_ffO$D_OUT[27] &&
	      !ftop_ffO_first__859_BITS_27_TO_23_871_PLUS_1___d1872[4]) ?
	       5'd31 :
	       ftop_ffO_first__859_BITS_27_TO_23_871_PLUS_1___d1872 ;
  assign IF_ftop_ffO_first__859_BIT_28_864_THEN_1_SL_22_ETC___d1905 =
	     b__h139439 + b__h140296 ;
  assign IF_new_inp0952_BIT_22_THEN_b1724_ELSE_b1726__q11 =
	     new_inp__h70952[22] ? b__h71724 : b__h71726 ;
  assign IF_new_inp3144_BIT_22_THEN_b3845_ELSE_b3847__q13 =
	     new_inp__h63144[22] ? b__h63845 : b__h63847 ;
  assign IF_opcode_norm_first__845_EQ_4_846_THEN_ftop_f_ETC___d1855 =
	     (opcode_norm$D_OUT == 3'd4) ?
	       ftop_ffO$EMPTY_N && normalizer_fifo_output_reg$FULL_N :
	       opcode_norm$D_OUT != 3'd6 ||
	       qtop_ffO$EMPTY_N && normalizer_fifo_output_reg$FULL_N ;
  assign IF_ptof_ptoF_fifo_stage0_reg_first__21_BIT_7_3_ETC___d435 =
	     ptof_ptoF_fifo_stage0_reg$D_OUT[7] ?
	       -ptof_ptoF_fifo_stage0_reg$D_OUT[7:2] :
	       ptof_ptoF_fifo_stage0_reg$D_OUT[7:2] ;
  assign IF_qtop_ffO_first__035_BIT_27_046_AND_NOT_qtop_ETC___d2052 =
	     (qtop_ffO$D_OUT[27] &&
	      !qtop_ffO_first__035_BITS_27_TO_23_047_PLUS_1___d2048[4]) ?
	       5'd31 :
	       qtop_ffO_first__035_BITS_27_TO_23_047_PLUS_1___d2048 ;
  assign IF_qtop_ffO_first__035_BIT_28_040_THEN_1_SL_22_ETC___d2081 =
	     b__h143935 + b__h144791 ;
  assign IF_qtop_quireToPosit1_fifo_stage0_reg_first__3_ETC___d349 =
	     qtop_quireToPosit1_fifo_stage0_reg_first__39_B_ETC___d342 ?
	       carry_int_frac_shifted__h58831[286:267] :
	       20'd1048575 ;
  assign IF_rg_quire_12_EQ_0_33_THEN_2_ELSE_0___d134 =
	     (rg_quire == 288'd0) ? 2'd2 : 2'd0 ;
  assign INV_new_inp0952__q8 = ~new_inp__h70952 ;
  assign INV_new_inp3144__q2 = ~new_inp__h63144 ;
  assign NEG_extracter2_fifo_output_regD_OUT_BITS_26_T_ETC__q24 =
	     -extracter2_fifo_output_reg$D_OUT[26:19] ;
  assign NOT_19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__85_ETC___d1974 =
	     !_19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__859_BI_ETC___d1960 &&
	     { 13'd0,
	       (x__h141692[18:0] & ~(19'h7FFFE << x__h142029)) >> 0 } ==
	     32'd0 &&
	     IF_IF_22_MINUS_IF_ftop_ffO_first__859_BIT_28_8_ETC___d1958 ||
	     _22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_THE_ETC___d1883 ==
	     5'd0 &&
	     shift_new0__h138921 == 3'd0 ||
	     k_expo__h138924 == 23'd8388607 &&
	     IF_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864__ETC___d1898 ==
	     5'd0 &&
	     x__h141692[18:0] == 19'd0 &&
	     IF_IF_22_MINUS_IF_ftop_ffO_first__859_BIT_28_8_ETC___d1958 ;
  assign NOT_19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__85_ETC___d2018 =
	     _19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__859_BI_ETC___d1923 !=
	     5'd0 &&
	     (_19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__859_BI_ETC___d1923 !=
	      5'd1 ||
	      truncated_frac_msb__h138926) &&
	     (_19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__859_BI_ETC___d1960 ||
	      { 13'd0,
		(x__h141692[18:0] & ~(19'h7FFFE << x__h142029)) >> 0 } !=
	      32'd0 ||
	      truncated_frac_msb__h138926) &&
	     NOT_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_ETC___d2015 ;
  assign NOT_19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__03_ETC___d2150 =
	     !_19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__035_BI_ETC___d2136 &&
	     { 13'd0,
	       (x__h146187[18:0] & ~(19'h7FFFE << x__h146524)) >> 0 } ==
	     32'd0 &&
	     IF_IF_22_MINUS_IF_qtop_ffO_first__035_BIT_28_0_ETC___d2134 ||
	     _22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_THE_ETC___d2059 ==
	     5'd0 &&
	     shift_new0__h143421 == 3'd0 ||
	     k_expo__h143424 == 23'd8388607 &&
	     IF_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040__ETC___d2074 ==
	     5'd0 &&
	     x__h146187[18:0] == 19'd0 &&
	     IF_IF_22_MINUS_IF_qtop_ffO_first__035_BIT_28_0_ETC___d2134 ;
  assign NOT_19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__03_ETC___d2194 =
	     _19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__035_BI_ETC___d2099 !=
	     5'd0 &&
	     (_19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__035_BI_ETC___d2099 !=
	      5'd1 ||
	      truncated_frac_msb__h143426) &&
	     (_19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__035_BI_ETC___d2136 ||
	      { 13'd0,
		(x__h146187[18:0] & ~(19'h7FFFE << x__h146524)) >> 0 } !=
	      32'd0 ||
	      truncated_frac_msb__h143426) &&
	     NOT_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_ETC___d2191 ;
  assign NOT_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_ETC___d1926 =
	     x41692_BITS_18_TO_0__q16[_19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__859_BI_ETC___d1923] ;
  assign NOT_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_ETC___d1935 =
	     x41692_BITS_18_TO_0__q16[x__h141868] ;
  assign NOT_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_ETC___d1990 =
	     NOT_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_ETC___d1926 ||
	     ((_19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__859_BI_ETC___d1923 ==
	       5'd0) ?
		IF_IF_22_MINUS_IF_ftop_ffO_first__859_BIT_28_8_ETC___d1958 :
		!NOT_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_ETC___d1935) ;
  assign NOT_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_ETC___d1996 =
	     NOT_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_ETC___d1990 ||
	     CASE_shift_new038921_0_NOT_ftop_ffOD_OUT_BIT__ETC__q19 ;
  assign NOT_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_ETC___d2015 =
	     (_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_THE_ETC___d1883 !=
	      5'd0 ||
	      shift_new0__h138921 != 3'd0 ||
	      !NOT_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_ETC___d1935) &&
	     (k_expo__h138924 != 23'd8388607 ||
	      IF_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864__ETC___d1898 !=
	      5'd0 ||
	      x__h141692[18:0] != 19'd0 ||
	      truncated_frac_msb__h138926) ;
  assign NOT_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_ETC___d2019 =
	     NOT_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_ETC___d1996 ||
	     IF_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864__ETC___d1898 ==
	     5'd0 &&
	     !(~k_expo__h138924[0]) ||
	     NOT_19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__85_ETC___d2018 ;
  assign NOT_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_ETC___d2102 =
	     x46187_BITS_18_TO_0__q20[_19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__035_BI_ETC___d2099] ;
  assign NOT_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_ETC___d2111 =
	     x46187_BITS_18_TO_0__q20[x__h146363] ;
  assign NOT_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_ETC___d2166 =
	     NOT_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_ETC___d2102 ||
	     ((_19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__035_BI_ETC___d2099 ==
	       5'd0) ?
		IF_IF_22_MINUS_IF_qtop_ffO_first__035_BIT_28_0_ETC___d2134 :
		!NOT_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_ETC___d2111) ;
  assign NOT_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_ETC___d2172 =
	     NOT_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_ETC___d2166 ||
	     CASE_shift_new043421_0_NOT_qtop_ffOD_OUT_BIT__ETC__q23 ;
  assign NOT_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_ETC___d2191 =
	     (_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_THE_ETC___d2059 !=
	      5'd0 ||
	      shift_new0__h143421 != 3'd0 ||
	      !NOT_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_ETC___d2111) &&
	     (k_expo__h143424 != 23'd8388607 ||
	      IF_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040__ETC___d2074 !=
	      5'd0 ||
	      x__h146187[18:0] != 19'd0 ||
	      truncated_frac_msb__h143426) ;
  assign NOT_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_ETC___d2195 =
	     NOT_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_ETC___d2172 ||
	     IF_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040__ETC___d2074 ==
	     5'd0 &&
	     !(~k_expo__h143424[0]) ||
	     NOT_19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__03_ETC___d2194 ;
  assign NOT_IF_fda_divider_fifo_stage0_reg_first__82_B_ETC___d191 =
	     (IF_fda_divider_fifo_stage0_reg_first__82_BIT_8_ETC___d189 ^
	      9'h100) >
	     9'd256 ;
  assign NOT_IF_ftop_ffO_first__859_BIT_28_864_THEN_1_S_ETC___d1910 =
	     (!b__h139439[22] && b__h140296[22] ||
	      b__h139439[22] && !b__h140296[22]) &&
	     !IF_ftop_ffO_first__859_BIT_28_864_THEN_1_SL_22_ETC___d1905[22] ||
	     b__h139439[22] && b__h140296[22] ;
  assign NOT_IF_qtop_ffO_first__035_BIT_28_040_THEN_1_S_ETC___d2086 =
	     (!b__h143935[22] && b__h144791[22] ||
	      b__h143935[22] && !b__h144791[22]) &&
	     !IF_qtop_ffO_first__035_BIT_28_040_THEN_1_SL_22_ETC___d2081[22] ||
	     b__h143935[22] && b__h144791[22] ;
  assign NOT_NOT_22_MINUS_IF_ftop_ffO_first__859_BIT_28_ETC___d1948 =
	     !NOT_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_ETC___d1926 &&
	     flag_prev_truncate__h138930 &&
	     CASE_shift_new038921_0_ftop_ffOD_OUT_BIT_0_1__ETC__q18 ;
  assign NOT_NOT_22_MINUS_IF_qtop_ffO_first__035_BIT_28_ETC___d2124 =
	     !NOT_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_ETC___d2102 &&
	     flag_prev_truncate__h143430 &&
	     CASE_shift_new043421_0_qtop_ffOD_OUT_BIT_0_1__ETC__q22 ;
  assign NOT_verbosity_ULE_1_035___d1036 = verbosity > 4'd1 ;
  assign SEXT_IF_IF_IF_ffI_first__75_BITS_2_TO_0_76_EQ__ETC___d883 =
	     { SEXT_IF_new_inp0952_BIT_22_THEN_b1724_ELSE_b17261__q12[5:0],
	       2'd0 } ;
  assign SEXT_IF_IF_ffI_first__75_BIT_95_09_THEN_0_MINU_ETC___d617 =
	     { SEXT_IF_new_inp3144_BIT_22_THEN_b3845_ELSE_b38473__q14[5:0],
	       2'd0 } ;
  assign SEXT_IF_fda_adder_fifo_stage0_reg_first__48_BI_ETC___d258 =
	     { {286{truncated_frac__h30314[1]}}, truncated_frac__h30314 } ;
  assign SEXT_IF_fma_adder_fifo_stage0_reg_first__4_BIT_ETC___d74 =
	     { {286{truncated_frac__h1200[1]}}, truncated_frac__h1200 } ;
  assign SEXT_IF_new_inp0952_BIT_22_THEN_b1724_ELSE_b17261__q12 =
	     { {2{IF_new_inp0952_BIT_22_THEN_b1724_ELSE_b1726__q11[5]}},
	       IF_new_inp0952_BIT_22_THEN_b1724_ELSE_b1726__q11 } ;
  assign SEXT_IF_new_inp3144_BIT_22_THEN_b3845_ELSE_b38473__q14 =
	     { {2{IF_new_inp3144_BIT_22_THEN_b3845_ELSE_b3847__q13[5]}},
	       IF_new_inp3144_BIT_22_THEN_b3845_ELSE_b3847__q13 } ;
  assign SEXT_extracter1_fifo_output_reg_first__078_BIT_ETC___d1103 =
	     { extracter1_fifo_output_regD_OUT_BITS_26_TO_19__q15[7],
	       extracter1_fifo_output_regD_OUT_BITS_26_TO_19__q15 } ;
  assign _0_CONCAT_IF_IF_rg_quire_12_BIT_287_13_THEN_0_M_ETC___d1831 =
	     { 1'd0, msbZeros__h89669 } + 10'd1 ;
  assign _0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d1113 =
	     { 20'd0, f1__h87299 } * { 20'd0, f2__h87300 } ;
  assign _0_CONCAT_ffI_f_rv_port1__read__183_BITS_30_TO__ETC___d1207 =
	     (_0_CONCAT_ffI_f_rvport1__read_BITS_30_TO_23_MI_ETC__q28[7:0] ^
	      8'h80) <
	     8'd40 ;
  assign _0_CONCAT_ffI_f_rv_port1__read__183_BITS_30_TO__ETC___d1208 =
	     (_0_CONCAT_ffI_f_rvport1__read_BITS_30_TO_23_MI_ETC__q28[7:0] ^
	      8'h80) <=
	     8'd216 ;
  assign _0_CONCAT_ffI_f_rv_port1__read__183_BITS_30_TO__ETC___d1212 =
	     _0_CONCAT_ffI_f_rvport1__read_BITS_30_TO_23_MI_ETC__q28[7:0] -
	     8'd168 ;
  assign _0_CONCAT_ffI_f_rv_port1__read__183_BITS_30_TO__ETC___d1216 =
	     _0_CONCAT_ffI_f_rvport1__read_BITS_30_TO_23_MI_ETC__q28[7:0] -
	     8'd88 ;
  assign _0_CONCAT_ffI_f_rvport1__read_BITS_30_TO_23_MI_ETC__q28 =
	     { 1'd0, ffI_f_rv$port1__read[30:23] } - 9'd127 ;
  assign _0_MINUS_ftop_ffOD_OUT_BITS_28_TO_23__q4 =
	     6'd0 - ftop_ffO$D_OUT[28:23] ;
  assign _0_MINUS_qtop_ffOD_OUT_BITS_28_TO_23__q5 =
	     6'd0 - qtop_ffO$D_OUT[28:23] ;
  assign _155_MINUS_0_CONCAT_IF_IF_rg_quire_12_BIT_287_1_ETC___d1833 =
	     10'd155 -
	     _0_CONCAT_IF_IF_rg_quire_12_BIT_287_13_THEN_0_M_ETC___d1831 ;
  assign _19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__859_BI_ETC___d1923 =
	     5'd19 -
	     IF_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864__ETC___d1898 ;
  assign _19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__859_BI_ETC___d1960 =
	     _19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__859_BI_ETC___d1923 <
	     5'd2 ;
  assign _19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__035_BI_ETC___d2099 =
	     5'd19 -
	     IF_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040__ETC___d2074 ;
  assign _19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__035_BI_ETC___d2136 =
	     _19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__035_BI_ETC___d2099 <
	     5'd2 ;
  assign _22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_THE_ETC___d1883 =
	     5'd22 -
	     (ftop_ffO$D_OUT[28] ?
		_0_MINUS_ftop_ffOD_OUT_BITS_28_TO_23__q4[4:0] :
		IF_ftop_ffO_first__859_BIT_27_870_AND_NOT_ftop_ETC___d1876) ;
  assign _22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_THE_ETC___d1884 =
	     _22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_THE_ETC___d1883 <
	     5'd2 ;
  assign _22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_THE_ETC___d2059 =
	     5'd22 -
	     (qtop_ffO$D_OUT[28] ?
		_0_MINUS_qtop_ffOD_OUT_BITS_28_TO_23__q5[4:0] :
		IF_qtop_ffO_first__035_BIT_27_046_AND_NOT_qtop_ETC___d2052) ;
  assign _22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_THE_ETC___d2060 =
	     _22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_THE_ETC___d2059 <
	     5'd2 ;
  assign _theResult____h138931 =
	     NOT_NOT_22_MINUS_IF_ftop_ffO_first__859_BIT_28_ETC___d1948 &&
	     (IF_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864__ETC___d1898 !=
	      5'd0 ||
	      ~k_expo__h138924[0]) &&
	     (_19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__859_BI_ETC___d1923 ==
	      5'd0 ||
	      _19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__859_BI_ETC___d1923 ==
	      5'd1 &&
	      IF_IF_22_MINUS_IF_ftop_ffO_first__859_BIT_28_8_ETC___d1958 ||
	      NOT_19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__85_ETC___d1974) ;
  assign _theResult____h143431 =
	     NOT_NOT_22_MINUS_IF_qtop_ffO_first__035_BIT_28_ETC___d2124 &&
	     (IF_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040__ETC___d2074 !=
	      5'd0 ||
	      ~k_expo__h143424[0]) &&
	     (_19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__035_BI_ETC___d2099 ==
	      5'd0 ||
	      _19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__035_BI_ETC___d2099 ==
	      5'd1 &&
	      IF_IF_22_MINUS_IF_qtop_ffO_first__035_BIT_28_0_ETC___d2134 ||
	      NOT_19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__03_ETC___d2150) ;
  assign _theResult___fst__h140328 =
	     ((ftop_ffO$D_OUT[22:21] & mask_e__h140326) == 2'd0) ?
	       expo_new__h140393 :
	       expo_new__h140422 ;
  assign _theResult___fst__h144823 =
	     ((qtop_ffO$D_OUT[22:21] & mask_e__h144821) == 2'd0) ?
	       expo_new__h144888 :
	       expo_new__h144917 ;
  assign _theResult___snd_snd__h140474 =
	     ((ftop_ffO$D_OUT[22:21] & mask_e__h140326) == 2'd0) ?
	       3'd0 :
	       shift_new__h140421 ;
  assign _theResult___snd_snd__h144969 =
	     ((qtop_ffO$D_OUT[22:21] & mask_e__h144821) == 2'd0) ?
	       3'd0 :
	       shift_new__h144916 ;
  assign a__h138968 =
	     IF_IF_NOT_IF_ftop_ffO_first__859_BIT_28_864_TH_ETC___d1986 +
	     { 22'd0,
	       IF_IF_NOT_IF_ftop_ffO_first__859_BIT_28_864_TH_ETC___d1986 ==
	       23'd0 &&
	       NOT_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_ETC___d2019 } ;
  assign a__h143464 =
	     IF_IF_NOT_IF_qtop_ffO_first__035_BIT_28_040_TH_ETC___d2162 +
	     { 22'd0,
	       IF_IF_NOT_IF_qtop_ffO_first__035_BIT_28_040_TH_ETC___d2162 ==
	       23'd0 &&
	       NOT_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_ETC___d2195 } ;
  assign add_round__h60307 = x__h60471 & truncated_frac_msb__h60301 ;
  assign all_bits_0__h1203 = ~(x__h1253[286:0] != 287'd0) ;
  assign all_bits_0__h30317 = ~(x__h30367[286:0] != 287'd0) ;
  assign b__h139201 = x__h139217 - y__h139218 ;
  assign b__h139439 = ftop_ffO$D_OUT[28] ? k__h139499 : k__h139544 ;
  assign b__h140296 =
	     { 21'd0, x__h140299 } <<
	     IF_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864__ETC___d1898 ;
  assign b__h142293 = { 22'd0, flag_prev_truncate__h138930 } ;
  assign b__h143697 = x__h143713 - y__h143714 ;
  assign b__h143935 = qtop_ffO$D_OUT[28] ? k__h143995 : k__h144039 ;
  assign b__h144791 =
	     { 21'd0, x__h144794 } <<
	     IF_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040__ETC___d2074 ;
  assign b__h146788 = { 22'd0, flag_prev_truncate__h143430 } ;
  assign b__h63845 = { 1'd0, x__h63855 } - 6'd1 ;
  assign b__h63847 = 6'd0 - x__h67106 ;
  assign b__h71724 = { 1'd0, x__h71734 } - 6'd1 ;
  assign b__h71726 = 6'd0 - x__h74985 ;
  assign carry_int_frac_shifted__h58831 =
	     qtop_quireToPosit1_fifo_stage0_reg$D_OUT[286:0] << x__h58919 ;
  assign expo__h63151 =
	     (IF_IF_ffI_first__75_BIT_95_09_THEN_0_MINUS_ffI_ETC___d710 <
	      5'd2) ?
	       new_inp__h63144[1:0] << x__h70683 :
	       new_inp3144_AND_INV_0x7FFFFE_SL_x0646_SRL_x0648__q9[1:0] ;
  assign expo__h70959 =
	     (IF_IF_IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84__ETC___d976 <
	      5'd2) ?
	       new_inp__h70952[1:0] << x__h78562 :
	       new_inp0952_AND_INV_0x7FFFFE_SL_x8525_SRL_x8527__q10[1:0] ;
  assign expo_new__h140393 =
	     ftop_ffO$D_OUT[22:21] >>
	     _22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_THE_ETC___d1883 ;
  assign expo_new__h140422 = x__h140425[1:0] & ftop_ffO$D_OUT[22:21] ;
  assign expo_new__h144888 =
	     qtop_ffO$D_OUT[22:21] >>
	     _22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_THE_ETC___d2059 ;
  assign expo_new__h144917 = x__h144920[1:0] & qtop_ffO$D_OUT[22:21] ;
  assign extracter1_fifo_output_regD_OUT_BITS_26_TO_19__q15 =
	     extracter1_fifo_output_reg$D_OUT[26:19] ;
  assign extracter1_fifo_output_reg_first__078_BITS_26__ETC___d1166 =
	     (extracter1_fifo_output_reg$D_OUT[26:19] ^ 8'h80) < 8'd1 ;
  assign extracter1_fifo_output_reg_first__078_BITS_26__ETC___d1167 =
	     (extracter1_fifo_output_reg$D_OUT[26:19] ^ 8'h80) <= 8'd255 ;
  assign extracter1_fifo_output_reg_first__078_BITS_26__ETC___d1171 =
	     extracter1_fifo_output_reg$D_OUT[26:19] - 8'd129 ;
  assign extracter1_fifo_output_reg_first__078_BITS_26__ETC___d1175 =
	     extracter1_fifo_output_reg$D_OUT[26:19] - 8'd127 ;
  assign extracter1_fifo_output_reg_first__078_BIT_27_0_ETC___d1115 =
	     { x__h87292,
	       SEXT_extracter1_fifo_output_reg_first__078_BIT_ETC___d1103 +
	       { extracter2_fifo_output_regD_OUT_BITS_26_TO_19__q27[7],
		 extracter2_fifo_output_regD_OUT_BITS_26_TO_19__q27 },
	       _0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d1113[39:0] } ;
  assign extracter1_fifo_output_reg_first__078_BIT_27_0_ETC___d1158 =
	     { x__h87316,
	       SEXT_extracter1_fifo_output_reg_first__078_BIT_ETC___d1103 +
	       { NEG_extracter2_fifo_output_regD_OUT_BITS_26_T_ETC__q24[7],
		 NEG_extracter2_fifo_output_regD_OUT_BITS_26_T_ETC__q24 } } ;
  assign extracter2_fifo_output_regD_OUT_BITS_26_TO_19__q27 =
	     extracter2_fifo_output_reg$D_OUT[26:19] ;
  assign f1__h87299 =
	     { IF_extracter1_fifo_output_reg_first__078_BITS__ETC___d1097[1],
	       extracter1_fifo_output_reg$D_OUT[18:0] } ;
  assign f2__h87300 =
	     { IF_extracter1_fifo_output_reg_first__078_BITS__ETC___d1097[0],
	       extracter2_fifo_output_reg$D_OUT[18:0] } ;
  assign f__h29618 =
	     { 1'b0, fda_divider_intDivide_fifo_output_reg$D_OUT[40:2] } ;
  assign f_new___1__h29829 =
	     f_new__h29623 >>
	     IF_fda_divider_fifo_stage0_reg_first__82_BIT_8_ETC___d189 ;
  assign f_new___1__h706 =
	     f_new__h487 >>
	     IF_fma_multiplier_fifo_stage0_reg_first_BIT_48_ETC___d11 ;
  assign f_new__h29623 =
	     { 225'd0, fda_divider_intDivide_fifo_output_reg$D_OUT[40:2] } ;
  assign f_new__h29773 = f_new__h29623 << x__h29910 ;
  assign f_new__h487 =
	     { 224'd0, fma_multiplier_fifo_stage0_reg$D_OUT[39:0] } ;
  assign f_new__h653 = f_new__h487 << x__h787 ;
  assign f_new__h89519 = { 245'd1, extracter1_fifo_output_reg$D_OUT[18:0] } ;
  assign fda_adder_fifo_stage0_reg_first__48_BITS_294_T_ETC___d263 =
	     fda_adder_fifo_stage0_reg$D_OUT[294:7] +
	     SEXT_IF_fda_adder_fifo_stage0_reg_first__48_BI_ETC___d258 ;
  assign fda_divider_intDivide_rg_denom2_43_ULE_0_CONCA_ETC___d147 =
	     fda_divider_intDivide_rg_denom2 <= y__h29085 ;
  assign fda_divider_intDivide_rg_numer_44_ULT_0_CONCAT_ETC___d156 =
	     fda_divider_intDivide_rg_numer < y__h29171 ;
  assign fda_divider_intDivide_rg_numer_44_ULT_fda_divi_ETC___d167 =
	     fda_divider_intDivide_rg_numer <
	     fda_divider_intDivide_rg_denom2 ;
  assign fda_divider_intDivide_rg_state_41_EQ_0_118_OR__ETC___d1129 =
	     (fda_divider_intDivide_rg_state == 2'd0 ||
	      fda_divider_intDivide_rg_state == 2'd3) &&
	     extracter1_fifo_output_reg$EMPTY_N &&
	     extracter2_fifo_output_reg$EMPTY_N &&
	     opcode_out$FULL_N &&
	     fda_divider_fifo_stage0_reg$FULL_N &&
	     (f2__h87300 != 20'd0 ||
	      fda_divider_intDivide_fifo_output_reg$FULL_N) ;
  assign flag_prev_truncate__h138930 =
	     (_19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__859_BI_ETC___d1923 ==
	      5'd0) ?
	       truncated_frac_msb__h138926 :
	       NOT_22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_ETC___d1935 ;
  assign flag_prev_truncate__h143430 =
	     (_19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__035_BI_ETC___d2099 ==
	      5'd0) ?
	       truncated_frac_msb__h143426 :
	       NOT_22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_ETC___d2111 ;
  assign flag_truncated_frac__h1198 =
	     x__h5431 | fma_adder_fifo_stage0_reg$D_OUT[5] ;
  assign flag_truncated_frac__h30312 =
	     x__h34523 | fda_adder_fifo_stage0_reg$D_OUT[5] ;
  assign float_no__h60306 =
	     { ptof_ptoF_fifo_stage0_reg$D_OUT[41],
	       x__h60354[7:0],
	       frac_f__h60305 } ;
  assign fma_adder_fifo_stage0_reg_first__4_BITS_294_TO_ETC___d79 =
	     fma_adder_fifo_stage0_reg$D_OUT[294:7] +
	     SEXT_IF_fma_adder_fifo_stage0_reg_first__4_BIT_ETC___d74 ;
  assign fma_multiplier_fifo_stage0_regD_OUT_BITS_39_TO_0__q7 =
	     fma_multiplier_fifo_stage0_reg$D_OUT[39:0] ;
  assign frac__h59538 = { 1'd1, ftop_fToP_fifo_stage0_reg$D_OUT[26:8] } ;
  assign frac__h60299 = { 1'd1, ptof_ptoF_fifo_stage0_reg$D_OUT[30:8] } ;
  assign frac__h63152 = new_inp__h63144[18:0] << x__h70695 ;
  assign frac__h70960 = new_inp__h70952[18:0] << x__h78574 ;
  assign frac_f__h60305 =
	     ptof_ptoF_fifo_stage0_reg$D_OUT[7] ?
	       x__h60384[22:0] :
	       ((ptof_ptoF_fifo_stage0_reg$D_OUT[7:2] == 6'd0) ?
		  ptof_ptoF_fifo_stage0_reg$D_OUT[30:8] :
		  23'd8388607) ;
  assign ftop_ffOD_OUT_BITS_20_TO_2__q17 = ftop_ffO$D_OUT[20:2] ;
  assign ftop_ffO_first__859_BITS_20_TO_2_914_BIT_IF_22_ETC___d1932 =
	     ftop_ffOD_OUT_BITS_20_TO_2__q17[i__h141821] ;
  assign ftop_ffO_first__859_BITS_27_TO_23_871_PLUS_1___d1872 =
	     ftop_ffO$D_OUT[27:23] + 5'd1 ;
  assign ftop_ffO_first__859_BIT_0_938_AND_INV_ftop_ffO_ETC___d1941 =
	     ftop_ffO$D_OUT[0] & y__h141909 ;
  assign ftop_ffO_first__859_BIT_0_938_AND_INV_ftop_ffO_ETC___d1945 =
	     ftop_ffO_first__859_BIT_0_938_AND_INV_ftop_ffO_ETC___d1941 &
	     y__h141913 ;
  assign i1__h141919 = shift_new0__h138921 - 3'd2 ;
  assign i1__h146414 = shift_new0__h143421 - 3'd2 ;
  assign i__h141821 = shift_new0__h138921 - 3'd1 ;
  assign i__h146316 = shift_new0__h143421 - 3'd1 ;
  assign in_posit2___1_posit_inp__h71008 = 24'd0 - ffI$D_OUT[29:6] ;
  assign int_frac__h89502 = f_new__h89519 << x__h89563 ;
  assign k__h139499 = 23'd1 << x__h139542 ;
  assign k__h139544 = ~x__h139556 ;
  assign k__h143995 = 23'd1 << x__h144037 ;
  assign k__h144039 = ~x__h144051 ;
  assign k_expo__h138924 =
	     NOT_IF_ftop_ffO_first__859_BIT_28_864_THEN_1_S_ETC___d1910 ?
	       23'd8388607 :
	       IF_ftop_ffO_first__859_BIT_28_864_THEN_1_SL_22_ETC___d1905 ;
  assign k_expo__h143424 =
	     NOT_IF_qtop_ffO_first__035_BIT_28_040_THEN_1_S_ETC___d2086 ?
	       23'd8388607 :
	       IF_qtop_ffO_first__035_BIT_28_040_THEN_1_SL_22_ETC___d2081 ;
  assign mask1__h29831 = ~x__h30006 ;
  assign mask1__h708 = ~x__h889 ;
  assign mask_e__h140326 = 2'd3 >> x__h140383 ;
  assign mask_e__h144821 = 2'd3 >> x__h144878 ;
  assign msbZeros__h89669 =
	     twos_complement_carry_int_frac__h89668[286] ?
	       9'd0 :
	       (twos_complement_carry_int_frac__h89668[285] ?
		  9'd1 :
		  (twos_complement_carry_int_frac__h89668[284] ?
		     9'd2 :
		     (twos_complement_carry_int_frac__h89668[283] ?
			9'd3 :
			(twos_complement_carry_int_frac__h89668[282] ?
			   9'd4 :
			   (twos_complement_carry_int_frac__h89668[281] ?
			      9'd5 :
			      (twos_complement_carry_int_frac__h89668[280] ?
				 9'd6 :
				 (twos_complement_carry_int_frac__h89668[279] ?
				    9'd7 :
				    (twos_complement_carry_int_frac__h89668[278] ?
				       9'd8 :
				       (twos_complement_carry_int_frac__h89668[277] ?
					  9'd9 :
					  (twos_complement_carry_int_frac__h89668[276] ?
					     9'd10 :
					     (twos_complement_carry_int_frac__h89668[275] ?
						9'd11 :
						(twos_complement_carry_int_frac__h89668[274] ?
						   9'd12 :
						   (twos_complement_carry_int_frac__h89668[273] ?
						      9'd13 :
						      (twos_complement_carry_int_frac__h89668[272] ?
							 9'd14 :
							 (twos_complement_carry_int_frac__h89668[271] ?
							    9'd15 :
							    (twos_complement_carry_int_frac__h89668[270] ?
							       9'd16 :
							       (twos_complement_carry_int_frac__h89668[269] ?
								  9'd17 :
								  (twos_complement_carry_int_frac__h89668[268] ?
								     9'd18 :
								     (twos_complement_carry_int_frac__h89668[267] ?
									9'd19 :
									(twos_complement_carry_int_frac__h89668[266] ?
									   9'd20 :
									   (twos_complement_carry_int_frac__h89668[265] ?
									      9'd21 :
									      (twos_complement_carry_int_frac__h89668[264] ?
										 9'd22 :
										 (twos_complement_carry_int_frac__h89668[263] ?
										    9'd23 :
										    (twos_complement_carry_int_frac__h89668[262] ?
										       9'd24 :
										       (twos_complement_carry_int_frac__h89668[261] ?
											  9'd25 :
											  (twos_complement_carry_int_frac__h89668[260] ?
											     9'd26 :
											     (twos_complement_carry_int_frac__h89668[259] ?
												9'd27 :
												(twos_complement_carry_int_frac__h89668[258] ?
												   9'd28 :
												   (twos_complement_carry_int_frac__h89668[257] ?
												      9'd29 :
												      (twos_complement_carry_int_frac__h89668[256] ?
													 9'd30 :
													 (twos_complement_carry_int_frac__h89668[255] ?
													    9'd31 :
													    (twos_complement_carry_int_frac__h89668[254] ?
													       9'd32 :
													       (twos_complement_carry_int_frac__h89668[253] ?
														  9'd33 :
														  (twos_complement_carry_int_frac__h89668[252] ?
														     9'd34 :
														     (twos_complement_carry_int_frac__h89668[251] ?
															9'd35 :
															(twos_complement_carry_int_frac__h89668[250] ?
															   9'd36 :
															   (twos_complement_carry_int_frac__h89668[249] ?
															      9'd37 :
															      (twos_complement_carry_int_frac__h89668[248] ?
																 9'd38 :
																 (twos_complement_carry_int_frac__h89668[247] ?
																    9'd39 :
																    (twos_complement_carry_int_frac__h89668[246] ?
																       9'd40 :
																       (twos_complement_carry_int_frac__h89668[245] ?
																	  9'd41 :
																	  (twos_complement_carry_int_frac__h89668[244] ?
																	     9'd42 :
																	     (twos_complement_carry_int_frac__h89668[243] ?
																		9'd43 :
																		(twos_complement_carry_int_frac__h89668[242] ?
																		   9'd44 :
																		   (twos_complement_carry_int_frac__h89668[241] ?
																		      9'd45 :
																		      (twos_complement_carry_int_frac__h89668[240] ?
																			 9'd46 :
																			 (twos_complement_carry_int_frac__h89668[239] ?
																			    9'd47 :
																			    (twos_complement_carry_int_frac__h89668[238] ?
																			       9'd48 :
																			       (twos_complement_carry_int_frac__h89668[237] ?
																				  9'd49 :
																				  (twos_complement_carry_int_frac__h89668[236] ?
																				     9'd50 :
																				     (twos_complement_carry_int_frac__h89668[235] ?
																					9'd51 :
																					(twos_complement_carry_int_frac__h89668[234] ?
																					   9'd52 :
																					   (twos_complement_carry_int_frac__h89668[233] ?
																					      9'd53 :
																					      (twos_complement_carry_int_frac__h89668[232] ?
																						 9'd54 :
																						 (twos_complement_carry_int_frac__h89668[231] ?
																						    9'd55 :
																						    (twos_complement_carry_int_frac__h89668[230] ?
																						       9'd56 :
																						       (twos_complement_carry_int_frac__h89668[229] ?
																							  9'd57 :
																							  (twos_complement_carry_int_frac__h89668[228] ?
																							     9'd58 :
																							     (twos_complement_carry_int_frac__h89668[227] ?
																								9'd59 :
																								(twos_complement_carry_int_frac__h89668[226] ?
																								   9'd60 :
																								   (twos_complement_carry_int_frac__h89668[225] ?
																								      9'd61 :
																								      (twos_complement_carry_int_frac__h89668[224] ?
																									 9'd62 :
																									 (twos_complement_carry_int_frac__h89668[223] ?
																									    9'd63 :
																									    (twos_complement_carry_int_frac__h89668[222] ?
																									       9'd64 :
																									       (twos_complement_carry_int_frac__h89668[221] ?
																										  9'd65 :
																										  (twos_complement_carry_int_frac__h89668[220] ?
																										     9'd66 :
																										     (twos_complement_carry_int_frac__h89668[219] ?
																											9'd67 :
																											(twos_complement_carry_int_frac__h89668[218] ?
																											   9'd68 :
																											   (twos_complement_carry_int_frac__h89668[217] ?
																											      9'd69 :
																											      (twos_complement_carry_int_frac__h89668[216] ?
																												 9'd70 :
																												 (twos_complement_carry_int_frac__h89668[215] ?
																												    9'd71 :
																												    (twos_complement_carry_int_frac__h89668[214] ?
																												       9'd72 :
																												       (twos_complement_carry_int_frac__h89668[213] ?
																													  9'd73 :
																													  (twos_complement_carry_int_frac__h89668[212] ?
																													     9'd74 :
																													     (twos_complement_carry_int_frac__h89668[211] ?
																														9'd75 :
																														(twos_complement_carry_int_frac__h89668[210] ?
																														   9'd76 :
																														   (twos_complement_carry_int_frac__h89668[209] ?
																														      9'd77 :
																														      (twos_complement_carry_int_frac__h89668[208] ?
																															 9'd78 :
																															 (twos_complement_carry_int_frac__h89668[207] ?
																															    9'd79 :
																															    (twos_complement_carry_int_frac__h89668[206] ?
																															       9'd80 :
																															       (twos_complement_carry_int_frac__h89668[205] ?
																																  9'd81 :
																																  (twos_complement_carry_int_frac__h89668[204] ?
																																     9'd82 :
																																     (twos_complement_carry_int_frac__h89668[203] ?
																																	9'd83 :
																																	(twos_complement_carry_int_frac__h89668[202] ?
																																	   9'd84 :
																																	   (twos_complement_carry_int_frac__h89668[201] ?
																																	      9'd85 :
																																	      (twos_complement_carry_int_frac__h89668[200] ?
																																		 9'd86 :
																																		 (twos_complement_carry_int_frac__h89668[199] ?
																																		    9'd87 :
																																		    (twos_complement_carry_int_frac__h89668[198] ?
																																		       9'd88 :
																																		       (twos_complement_carry_int_frac__h89668[197] ?
																																			  9'd89 :
																																			  (twos_complement_carry_int_frac__h89668[196] ?
																																			     9'd90 :
																																			     (twos_complement_carry_int_frac__h89668[195] ?
																																				9'd91 :
																																				(twos_complement_carry_int_frac__h89668[194] ?
																																				   9'd92 :
																																				   (twos_complement_carry_int_frac__h89668[193] ?
																																				      9'd93 :
																																				      (twos_complement_carry_int_frac__h89668[192] ?
																																					 9'd94 :
																																					 (twos_complement_carry_int_frac__h89668[191] ?
																																					    9'd95 :
																																					    (twos_complement_carry_int_frac__h89668[190] ?
																																					       9'd96 :
																																					       (twos_complement_carry_int_frac__h89668[189] ?
																																						  9'd97 :
																																						  (twos_complement_carry_int_frac__h89668[188] ?
																																						     9'd98 :
																																						     (twos_complement_carry_int_frac__h89668[187] ?
																																							9'd99 :
																																							(twos_complement_carry_int_frac__h89668[186] ?
																																							   9'd100 :
																																							   (twos_complement_carry_int_frac__h89668[185] ?
																																							      9'd101 :
																																							      (twos_complement_carry_int_frac__h89668[184] ?
																																								 9'd102 :
																																								 (twos_complement_carry_int_frac__h89668[183] ?
																																								    9'd103 :
																																								    (twos_complement_carry_int_frac__h89668[182] ?
																																								       9'd104 :
																																								       (twos_complement_carry_int_frac__h89668[181] ?
																																									  9'd105 :
																																									  (twos_complement_carry_int_frac__h89668[180] ?
																																									     9'd106 :
																																									     (twos_complement_carry_int_frac__h89668[179] ?
																																										9'd107 :
																																										(twos_complement_carry_int_frac__h89668[178] ?
																																										   9'd108 :
																																										   (twos_complement_carry_int_frac__h89668[177] ?
																																										      9'd109 :
																																										      (twos_complement_carry_int_frac__h89668[176] ?
																																											 9'd110 :
																																											 (twos_complement_carry_int_frac__h89668[175] ?
																																											    9'd111 :
																																											    (twos_complement_carry_int_frac__h89668[174] ?
																																											       9'd112 :
																																											       (twos_complement_carry_int_frac__h89668[173] ?
																																												  9'd113 :
																																												  (twos_complement_carry_int_frac__h89668[172] ?
																																												     9'd114 :
																																												     (twos_complement_carry_int_frac__h89668[171] ?
																																													9'd115 :
																																													(twos_complement_carry_int_frac__h89668[170] ?
																																													   9'd116 :
																																													   (twos_complement_carry_int_frac__h89668[169] ?
																																													      9'd117 :
																																													      (twos_complement_carry_int_frac__h89668[168] ?
																																														 9'd118 :
																																														 (twos_complement_carry_int_frac__h89668[167] ?
																																														    9'd119 :
																																														    (twos_complement_carry_int_frac__h89668[166] ?
																																														       9'd120 :
																																														       (twos_complement_carry_int_frac__h89668[165] ?
																																															  9'd121 :
																																															  (twos_complement_carry_int_frac__h89668[164] ?
																																															     9'd122 :
																																															     (twos_complement_carry_int_frac__h89668[163] ?
																																																9'd123 :
																																																(twos_complement_carry_int_frac__h89668[162] ?
																																																   9'd124 :
																																																   (twos_complement_carry_int_frac__h89668[161] ?
																																																      9'd125 :
																																																      (twos_complement_carry_int_frac__h89668[160] ?
																																																	 9'd126 :
																																																	 (twos_complement_carry_int_frac__h89668[159] ?
																																																	    9'd127 :
																																																	    (twos_complement_carry_int_frac__h89668[158] ?
																																																	       9'd128 :
																																																	       (twos_complement_carry_int_frac__h89668[157] ?
																																																		  9'd129 :
																																																		  (twos_complement_carry_int_frac__h89668[156] ?
																																																		     9'd130 :
																																																		     (twos_complement_carry_int_frac__h89668[155] ?
																																																			9'd131 :
																																																			(twos_complement_carry_int_frac__h89668[154] ?
																																																			   9'd132 :
																																																			   (twos_complement_carry_int_frac__h89668[153] ?
																																																			      9'd133 :
																																																			      (twos_complement_carry_int_frac__h89668[152] ?
																																																				 9'd134 :
																																																				 (twos_complement_carry_int_frac__h89668[151] ?
																																																				    9'd135 :
																																																				    (twos_complement_carry_int_frac__h89668[150] ?
																																																				       9'd136 :
																																																				       (twos_complement_carry_int_frac__h89668[149] ?
																																																					  9'd137 :
																																																					  (twos_complement_carry_int_frac__h89668[148] ?
																																																					     9'd138 :
																																																					     (twos_complement_carry_int_frac__h89668[147] ?
																																																						9'd139 :
																																																						(twos_complement_carry_int_frac__h89668[146] ?
																																																						   9'd140 :
																																																						   (twos_complement_carry_int_frac__h89668[145] ?
																																																						      9'd141 :
																																																						      (twos_complement_carry_int_frac__h89668[144] ?
																																																							 9'd142 :
																																																							 (twos_complement_carry_int_frac__h89668[143] ?
																																																							    9'd143 :
																																																							    (twos_complement_carry_int_frac__h89668[142] ?
																																																							       9'd144 :
																																																							       (twos_complement_carry_int_frac__h89668[141] ?
																																																								  9'd145 :
																																																								  (twos_complement_carry_int_frac__h89668[140] ?
																																																								     9'd146 :
																																																								     (twos_complement_carry_int_frac__h89668[139] ?
																																																									9'd147 :
																																																									(twos_complement_carry_int_frac__h89668[138] ?
																																																									   9'd148 :
																																																									   (twos_complement_carry_int_frac__h89668[137] ?
																																																									      9'd149 :
																																																									      (twos_complement_carry_int_frac__h89668[136] ?
																																																										 9'd150 :
																																																										 (twos_complement_carry_int_frac__h89668[135] ?
																																																										    9'd151 :
																																																										    (twos_complement_carry_int_frac__h89668[134] ?
																																																										       9'd152 :
																																																										       (twos_complement_carry_int_frac__h89668[133] ?
																																																											  9'd153 :
																																																											  (twos_complement_carry_int_frac__h89668[132] ?
																																																											     9'd154 :
																																																											     (twos_complement_carry_int_frac__h89668[131] ?
																																																												9'd155 :
																																																												(twos_complement_carry_int_frac__h89668[130] ?
																																																												   9'd156 :
																																																												   (twos_complement_carry_int_frac__h89668[129] ?
																																																												      9'd157 :
																																																												      (twos_complement_carry_int_frac__h89668[128] ?
																																																													 9'd158 :
																																																													 (twos_complement_carry_int_frac__h89668[127] ?
																																																													    9'd159 :
																																																													    (twos_complement_carry_int_frac__h89668[126] ?
																																																													       9'd160 :
																																																													       (twos_complement_carry_int_frac__h89668[125] ?
																																																														  9'd161 :
																																																														  (twos_complement_carry_int_frac__h89668[124] ?
																																																														     9'd162 :
																																																														     (twos_complement_carry_int_frac__h89668[123] ?
																																																															9'd163 :
																																																															(twos_complement_carry_int_frac__h89668[122] ?
																																																															   9'd164 :
																																																															   (twos_complement_carry_int_frac__h89668[121] ?
																																																															      9'd165 :
																																																															      (twos_complement_carry_int_frac__h89668[120] ?
																																																																 9'd166 :
																																																																 (twos_complement_carry_int_frac__h89668[119] ?
																																																																    9'd167 :
																																																																    (twos_complement_carry_int_frac__h89668[118] ?
																																																																       9'd168 :
																																																																       (twos_complement_carry_int_frac__h89668[117] ?
																																																																	  9'd169 :
																																																																	  (twos_complement_carry_int_frac__h89668[116] ?
																																																																	     9'd170 :
																																																																	     (twos_complement_carry_int_frac__h89668[115] ?
																																																																		9'd171 :
																																																																		(twos_complement_carry_int_frac__h89668[114] ?
																																																																		   9'd172 :
																																																																		   (twos_complement_carry_int_frac__h89668[113] ?
																																																																		      9'd173 :
																																																																		      (twos_complement_carry_int_frac__h89668[112] ?
																																																																			 9'd174 :
																																																																			 (twos_complement_carry_int_frac__h89668[111] ?
																																																																			    9'd175 :
																																																																			    (twos_complement_carry_int_frac__h89668[110] ?
																																																																			       9'd176 :
																																																																			       (twos_complement_carry_int_frac__h89668[109] ?
																																																																				  9'd177 :
																																																																				  (twos_complement_carry_int_frac__h89668[108] ?
																																																																				     9'd178 :
																																																																				     (twos_complement_carry_int_frac__h89668[107] ?
																																																																					9'd179 :
																																																																					(twos_complement_carry_int_frac__h89668[106] ?
																																																																					   9'd180 :
																																																																					   (twos_complement_carry_int_frac__h89668[105] ?
																																																																					      9'd181 :
																																																																					      (twos_complement_carry_int_frac__h89668[104] ?
																																																																						 9'd182 :
																																																																						 (twos_complement_carry_int_frac__h89668[103] ?
																																																																						    9'd183 :
																																																																						    (twos_complement_carry_int_frac__h89668[102] ?
																																																																						       9'd184 :
																																																																						       (twos_complement_carry_int_frac__h89668[101] ?
																																																																							  9'd185 :
																																																																							  (twos_complement_carry_int_frac__h89668[100] ?
																																																																							     9'd186 :
																																																																							     (twos_complement_carry_int_frac__h89668[99] ?
																																																																								9'd187 :
																																																																								(twos_complement_carry_int_frac__h89668[98] ?
																																																																								   9'd188 :
																																																																								   (twos_complement_carry_int_frac__h89668[97] ?
																																																																								      9'd189 :
																																																																								      (twos_complement_carry_int_frac__h89668[96] ?
																																																																									 9'd190 :
																																																																									 (twos_complement_carry_int_frac__h89668[95] ?
																																																																									    9'd191 :
																																																																									    (twos_complement_carry_int_frac__h89668[94] ?
																																																																									       9'd192 :
																																																																									       (twos_complement_carry_int_frac__h89668[93] ?
																																																																										  9'd193 :
																																																																										  (twos_complement_carry_int_frac__h89668[92] ?
																																																																										     9'd194 :
																																																																										     (twos_complement_carry_int_frac__h89668[91] ?
																																																																											9'd195 :
																																																																											(twos_complement_carry_int_frac__h89668[90] ?
																																																																											   9'd196 :
																																																																											   (twos_complement_carry_int_frac__h89668[89] ?
																																																																											      9'd197 :
																																																																											      (twos_complement_carry_int_frac__h89668[88] ?
																																																																												 9'd198 :
																																																																												 (twos_complement_carry_int_frac__h89668[87] ?
																																																																												    9'd199 :
																																																																												    (twos_complement_carry_int_frac__h89668[86] ?
																																																																												       9'd200 :
																																																																												       (twos_complement_carry_int_frac__h89668[85] ?
																																																																													  9'd201 :
																																																																													  (twos_complement_carry_int_frac__h89668[84] ?
																																																																													     9'd202 :
																																																																													     (twos_complement_carry_int_frac__h89668[83] ?
																																																																														9'd203 :
																																																																														(twos_complement_carry_int_frac__h89668[82] ?
																																																																														   9'd204 :
																																																																														   (twos_complement_carry_int_frac__h89668[81] ?
																																																																														      9'd205 :
																																																																														      (twos_complement_carry_int_frac__h89668[80] ?
																																																																															 9'd206 :
																																																																															 (twos_complement_carry_int_frac__h89668[79] ?
																																																																															    9'd207 :
																																																																															    (twos_complement_carry_int_frac__h89668[78] ?
																																																																															       9'd208 :
																																																																															       (twos_complement_carry_int_frac__h89668[77] ?
																																																																																  9'd209 :
																																																																																  (twos_complement_carry_int_frac__h89668[76] ?
																																																																																     9'd210 :
																																																																																     (twos_complement_carry_int_frac__h89668[75] ?
																																																																																	9'd211 :
																																																																																	(twos_complement_carry_int_frac__h89668[74] ?
																																																																																	   9'd212 :
																																																																																	   (twos_complement_carry_int_frac__h89668[73] ?
																																																																																	      9'd213 :
																																																																																	      (twos_complement_carry_int_frac__h89668[72] ?
																																																																																		 9'd214 :
																																																																																		 (twos_complement_carry_int_frac__h89668[71] ?
																																																																																		    9'd215 :
																																																																																		    (twos_complement_carry_int_frac__h89668[70] ?
																																																																																		       9'd216 :
																																																																																		       (twos_complement_carry_int_frac__h89668[69] ?
																																																																																			  9'd217 :
																																																																																			  (twos_complement_carry_int_frac__h89668[68] ?
																																																																																			     9'd218 :
																																																																																			     (twos_complement_carry_int_frac__h89668[67] ?
																																																																																				9'd219 :
																																																																																				(twos_complement_carry_int_frac__h89668[66] ?
																																																																																				   9'd220 :
																																																																																				   (twos_complement_carry_int_frac__h89668[65] ?
																																																																																				      9'd221 :
																																																																																				      (twos_complement_carry_int_frac__h89668[64] ?
																																																																																					 9'd222 :
																																																																																					 (twos_complement_carry_int_frac__h89668[63] ?
																																																																																					    9'd223 :
																																																																																					    (twos_complement_carry_int_frac__h89668[62] ?
																																																																																					       9'd224 :
																																																																																					       (twos_complement_carry_int_frac__h89668[61] ?
																																																																																						  9'd225 :
																																																																																						  (twos_complement_carry_int_frac__h89668[60] ?
																																																																																						     9'd226 :
																																																																																						     (twos_complement_carry_int_frac__h89668[59] ?
																																																																																							9'd227 :
																																																																																							(twos_complement_carry_int_frac__h89668[58] ?
																																																																																							   9'd228 :
																																																																																							   (twos_complement_carry_int_frac__h89668[57] ?
																																																																																							      9'd229 :
																																																																																							      (twos_complement_carry_int_frac__h89668[56] ?
																																																																																								 9'd230 :
																																																																																								 (twos_complement_carry_int_frac__h89668[55] ?
																																																																																								    9'd231 :
																																																																																								    (twos_complement_carry_int_frac__h89668[54] ?
																																																																																								       9'd232 :
																																																																																								       (twos_complement_carry_int_frac__h89668[53] ?
																																																																																									  9'd233 :
																																																																																									  (twos_complement_carry_int_frac__h89668[52] ?
																																																																																									     9'd234 :
																																																																																									     (twos_complement_carry_int_frac__h89668[51] ?
																																																																																										9'd235 :
																																																																																										(twos_complement_carry_int_frac__h89668[50] ?
																																																																																										   9'd236 :
																																																																																										   (twos_complement_carry_int_frac__h89668[49] ?
																																																																																										      9'd237 :
																																																																																										      (twos_complement_carry_int_frac__h89668[48] ?
																																																																																											 9'd238 :
																																																																																											 (twos_complement_carry_int_frac__h89668[47] ?
																																																																																											    9'd239 :
																																																																																											    (twos_complement_carry_int_frac__h89668[46] ?
																																																																																											       9'd240 :
																																																																																											       (twos_complement_carry_int_frac__h89668[45] ?
																																																																																												  9'd241 :
																																																																																												  (twos_complement_carry_int_frac__h89668[44] ?
																																																																																												     9'd242 :
																																																																																												     (twos_complement_carry_int_frac__h89668[43] ?
																																																																																													9'd243 :
																																																																																													(twos_complement_carry_int_frac__h89668[42] ?
																																																																																													   9'd244 :
																																																																																													   (twos_complement_carry_int_frac__h89668[41] ?
																																																																																													      9'd245 :
																																																																																													      (twos_complement_carry_int_frac__h89668[40] ?
																																																																																														 9'd246 :
																																																																																														 (twos_complement_carry_int_frac__h89668[39] ?
																																																																																														    9'd247 :
																																																																																														    (twos_complement_carry_int_frac__h89668[38] ?
																																																																																														       9'd248 :
																																																																																														       (twos_complement_carry_int_frac__h89668[37] ?
																																																																																															  9'd249 :
																																																																																															  (twos_complement_carry_int_frac__h89668[36] ?
																																																																																															     9'd250 :
																																																																																															     (twos_complement_carry_int_frac__h89668[35] ?
																																																																																																9'd251 :
																																																																																																(twos_complement_carry_int_frac__h89668[34] ?
																																																																																																   9'd252 :
																																																																																																   (twos_complement_carry_int_frac__h89668[33] ?
																																																																																																      9'd253 :
																																																																																																      (twos_complement_carry_int_frac__h89668[32] ?
																																																																																																	 9'd254 :
																																																																																																	 (twos_complement_carry_int_frac__h89668[31] ?
																																																																																																	    9'd255 :
																																																																																																	    (twos_complement_carry_int_frac__h89668[30] ?
																																																																																																	       9'd256 :
																																																																																																	       (twos_complement_carry_int_frac__h89668[29] ?
																																																																																																		  9'd257 :
																																																																																																		  (twos_complement_carry_int_frac__h89668[28] ?
																																																																																																		     9'd258 :
																																																																																																		     (twos_complement_carry_int_frac__h89668[27] ?
																																																																																																			9'd259 :
																																																																																																			(twos_complement_carry_int_frac__h89668[26] ?
																																																																																																			   9'd260 :
																																																																																																			   (twos_complement_carry_int_frac__h89668[25] ?
																																																																																																			      9'd261 :
																																																																																																			      (twos_complement_carry_int_frac__h89668[24] ?
																																																																																																				 9'd262 :
																																																																																																				 (twos_complement_carry_int_frac__h89668[23] ?
																																																																																																				    9'd263 :
																																																																																																				    (twos_complement_carry_int_frac__h89668[22] ?
																																																																																																				       9'd264 :
																																																																																																				       (twos_complement_carry_int_frac__h89668[21] ?
																																																																																																					  9'd265 :
																																																																																																					  (twos_complement_carry_int_frac__h89668[20] ?
																																																																																																					     9'd266 :
																																																																																																					     (twos_complement_carry_int_frac__h89668[19] ?
																																																																																																						9'd267 :
																																																																																																						(twos_complement_carry_int_frac__h89668[18] ?
																																																																																																						   9'd268 :
																																																																																																						   (twos_complement_carry_int_frac__h89668[17] ?
																																																																																																						      9'd269 :
																																																																																																						      (twos_complement_carry_int_frac__h89668[16] ?
																																																																																																							 9'd270 :
																																																																																																							 (twos_complement_carry_int_frac__h89668[15] ?
																																																																																																							    9'd271 :
																																																																																																							    (twos_complement_carry_int_frac__h89668[14] ?
																																																																																																							       9'd272 :
																																																																																																							       (twos_complement_carry_int_frac__h89668[13] ?
																																																																																																								  9'd273 :
																																																																																																								  (twos_complement_carry_int_frac__h89668[12] ?
																																																																																																								     9'd274 :
																																																																																																								     (twos_complement_carry_int_frac__h89668[11] ?
																																																																																																									9'd275 :
																																																																																																									(twos_complement_carry_int_frac__h89668[10] ?
																																																																																																									   9'd276 :
																																																																																																									   (twos_complement_carry_int_frac__h89668[9] ?
																																																																																																									      9'd277 :
																																																																																																									      (twos_complement_carry_int_frac__h89668[8] ?
																																																																																																										 9'd278 :
																																																																																																										 (twos_complement_carry_int_frac__h89668[7] ?
																																																																																																										    9'd279 :
																																																																																																										    (twos_complement_carry_int_frac__h89668[6] ?
																																																																																																										       9'd280 :
																																																																																																										       (twos_complement_carry_int_frac__h89668[5] ?
																																																																																																											  9'd281 :
																																																																																																											  (twos_complement_carry_int_frac__h89668[4] ?
																																																																																																											     9'd282 :
																																																																																																											     (twos_complement_carry_int_frac__h89668[3] ?
																																																																																																												9'd283 :
																																																																																																												(twos_complement_carry_int_frac__h89668[2] ?
																																																																																																												   9'd284 :
																																																																																																												   (twos_complement_carry_int_frac__h89668[1] ?
																																																																																																												      9'd285 :
																																																																																																												      (twos_complement_carry_int_frac__h89668[0] ?
																																																																																																													 9'd286 :
																																																																																																													 9'd287)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign new_inp0952_AND_INV_0x7FFFFE_SL_x8525_SRL_x8527__q10 =
	     (new_inp__h70952 & ~(23'h7FFFFE << x__h78525)) >> x__h78527 ;
  assign new_inp3144_AND_INV_0x7FFFFE_SL_x0646_SRL_x0648__q9 =
	     (new_inp__h63144 & ~(23'h7FFFFE << x__h70646)) >> x__h70648 ;
  assign new_inp__h63144 =
	     ffI$D_OUT[95] ? 23'd0 - ffI$D_OUT[94:72] : ffI$D_OUT[94:72] ;
  assign new_inp__h70952 =
	     IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR_ffI_ETC___d772[23] ?
	       23'd0 -
	       IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR_ffI_ETC___d772[22:0] :
	       IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR_ffI_ETC___d772[22:0] ;
  assign ptof_ptoF_fifo_stage0_regD_OUT_BITS_38_TO_31__q3 =
	     ptof_ptoF_fifo_stage0_reg$D_OUT[38:31] ;
  assign qtop_ffOD_OUT_BITS_20_TO_2__q21 = qtop_ffO$D_OUT[20:2] ;
  assign qtop_ffO_first__035_BITS_20_TO_2_090_BIT_IF_22_ETC___d2108 =
	     qtop_ffOD_OUT_BITS_20_TO_2__q21[i__h146316] ;
  assign qtop_ffO_first__035_BITS_27_TO_23_047_PLUS_1___d2048 =
	     qtop_ffO$D_OUT[27:23] + 5'd1 ;
  assign qtop_ffO_first__035_BIT_0_114_AND_INV_qtop_ffO_ETC___d2117 =
	     qtop_ffO$D_OUT[0] & y__h146404 ;
  assign qtop_ffO_first__035_BIT_0_114_AND_INV_qtop_ffO_ETC___d2121 =
	     qtop_ffO_first__035_BIT_0_114_AND_INV_qtop_ffO_ETC___d2117 &
	     y__h146408 ;
  assign qtop_quireToPosit1_fifo_stage0_regD_OUT_BITS__ETC__q6 =
	     qtop_quireToPosit1_fifo_stage0_reg$D_OUT[294:287] ;
  assign qtop_quireToPosit1_fifo_stage0_reg_first__39_B_ETC___d342 =
	     (qtop_quireToPosit1_fifo_stage0_reg$D_OUT[294:287] ^ 8'h80) <
	     8'd216 ;
  assign rg_quire_12_BIT_287_13_AND_rg_quire_12_BITS_28_ETC___d1842 =
	     { x__h93820,
	       ((IF_0_CONCAT_IF_IF_rg_quire_12_BIT_287_13_THEN__ETC___d1836 ^
		 10'h200) <
		10'd424) ?
		 8'd168 :
		 (((IF_0_CONCAT_IF_IF_rg_quire_12_BIT_287_13_THEN__ETC___d1836 ^
		    10'h200) <=
		   10'd600) ?
		    IF_0_CONCAT_IF_IF_rg_quire_12_BIT_287_13_THEN__ETC___d1836[7:0] :
		    8'd88),
	       twos_complement_carry_int_frac__h89668 } ;
  assign rg_quire_12_PLUS_fda_divider_fifo_output_reg_f_ETC___d301 =
	     rg_quire + fda_divider_fifo_output_reg$D_OUT[289:2] ;
  assign rg_quire_12_PLUS_fma_multiplier_fifo_output_re_ETC___d120 =
	     rg_quire + fma_multiplier_fifo_output_reg$D_OUT[289:2] ;
  assign shift_new0__h138921 =
	     _22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_THE_ETC___d1884 ?
	       _theResult___snd_snd__h140474 :
	       3'd0 ;
  assign shift_new0__h143421 =
	     _22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_THE_ETC___d2060 ?
	       _theResult___snd_snd__h144969 :
	       3'd0 ;
  assign shift_new__h140421 = { 1'd0, x__h141712 } ;
  assign shift_new__h144916 = { 1'd0, x__h146207 } ;
  assign stage0_regf_frac__h88566 =
	     { extracter1_fifo_output_reg$D_OUT[18:0], 4'd0 } ;
  assign stage1_regf_frac__h58613 =
	     IF_qtop_quireToPosit1_fifo_stage0_reg_first__3_ETC___d349[19] ?
	       IF_qtop_quireToPosit1_fifo_stage0_reg_first__3_ETC___d349[18:0] :
	       IF_qtop_quireToPosit1_fifo_stage0_reg_first__3_ETC___d349[19:1] ;
  assign truncated_frac__h1200 =
	     flag_truncated_frac__h1198 ?
	       { fma_adder_fifo_stage0_reg$D_OUT[294],
		 flag_truncated_frac__h1198 } :
	       2'b0 ;
  assign truncated_frac__h30314 =
	     flag_truncated_frac__h30312 ?
	       { fda_adder_fifo_stage0_reg$D_OUT[294],
		 flag_truncated_frac__h30312 } :
	       2'b0 ;
  assign truncated_frac_msb___1__h29830 =
	     NOT_IF_fda_divider_fifo_stage0_reg_first__82_B_ETC___d191 &&
	     f__h29618[x__h29982[5:0]] ;
  assign truncated_frac_msb__h138926 =
	     (shift_new0__h138921 == 3'd0) ?
	       ftop_ffO$D_OUT[1] :
	       ftop_ffO_first__859_BITS_20_TO_2_914_BIT_IF_22_ETC___d1932 ;
  assign truncated_frac_msb__h143426 =
	     (shift_new0__h143421 == 3'd0) ?
	       qtop_ffO$D_OUT[1] :
	       qtop_ffO_first__035_BITS_20_TO_2_090_BIT_IF_22_ETC___d2108 ;
  assign truncated_frac_msb__h60301 =
	     ptof_ptoF_fifo_stage0_reg$D_OUT[7] ?
	       frac__h60299[x__h60444[4:0]] :
	       ptof_ptoF_fifo_stage0_reg$D_OUT[7:2] != 6'd0 ||
	       ptof_ptoF_fifo_stage0_reg$D_OUT[1] ;
  assign truncated_frac_zero___1__h29832 =
	     (IF_fda_divider_fifo_stage0_reg_first__82_BIT_8_ETC___d189 ^
	      9'h100) <=
	     9'd257 ||
	     (f_new__h29623 & mask1__h29831) == 264'd0 ;
  assign truncated_frac_zero__h29627 =
	     x__h30063 & fda_divider_intDivide_fifo_output_reg$D_OUT[0] ;
  assign truncated_frac_zero__h59539 =
	     ftop_fToP_fifo_stage0_reg$D_OUT[7] ?
	       { 12'd0,
		 (frac__h59538 &
		  ~(20'hFFFFE <<
		    IF_ftop_fToP_fifo_stage0_reg_first__82_BIT_7_8_ETC___d389[4:0])) >>
		 0 } ==
	       32'd0 :
	       ftop_fToP_fifo_stage0_reg$D_OUT[7:2] == 6'd0 ;
  assign truncated_frac_zero__h60300 =
	     ptof_ptoF_fifo_stage0_reg$D_OUT[7] ?
	       x__h60492 & y__h60493 :
	       ptof_ptoF_fifo_stage0_reg$D_OUT[7:2] == 6'd0 &&
	       ptof_ptoF_fifo_stage0_reg$D_OUT[0] ;
  assign twos_complement_carry_int_frac__h29579 =
	     { fda_divider_fifo_stage0_reg$D_OUT[9],
	       fda_divider_fifo_stage0_reg$D_OUT[9] ?
		 287'd0 - x__h29920 :
		 x__h29920 } ;
  assign twos_complement_carry_int_frac__h437 =
	     { fma_multiplier_fifo_stage0_reg$D_OUT[49],
	       fma_multiplier_fifo_stage0_reg$D_OUT[49] ?
		 287'd0 - x__h797 :
		 x__h797 } ;
  assign twos_complement_carry_int_frac__h57992 =
	     { ptoq_positToquire_fifo_stage1_reg$D_OUT[266],
	       ptoq_positToquire_fifo_stage1_reg$D_OUT[266] ?
		 287'd0 -
		 { 23'd0, ptoq_positToquire_fifo_stage1_reg$D_OUT[265:2] } :
		 { 23'd0, ptoq_positToquire_fifo_stage1_reg$D_OUT[265:2] } } ;
  assign twos_complement_carry_int_frac__h89668 =
	     rg_quire[287] ? 287'd0 - rg_quire[286:0] : rg_quire[286:0] ;
  assign x41692_BITS_18_TO_0__q16 = x__h141692[18:0] ;
  assign x46187_BITS_18_TO_0__q20 = x__h146187[18:0] ;
  assign x__h1246 = x__h1248 | fma_adder_fifo_stage0_reg$D_OUT[0] ;
  assign x__h1248 = all_bits_0__h1203 & fma_adder_fifo_stage0_reg$D_OUT[294] ;
  assign x__h1253 =
	     (!fma_adder_fifo_stage0_reg$D_OUT[294] &&
	      !SEXT_IF_fma_adder_fifo_stage0_reg_first__4_BIT_ETC___d74[287] &&
	      fma_adder_fifo_stage0_reg_first__4_BITS_294_TO_ETC___d79[287]) ?
	       288'h7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF :
	       ((fma_adder_fifo_stage0_reg$D_OUT[294] &&
		 SEXT_IF_fma_adder_fifo_stage0_reg_first__4_BIT_ETC___d74[287] &&
		 !fma_adder_fifo_stage0_reg_first__4_BITS_294_TO_ETC___d79[287]) ?
		  288'h800000000000000000000000000000000000000000000000000000000000000000000000 :
		  fma_adder_fifo_stage0_reg_first__4_BITS_294_TO_ETC___d79) ;
  assign x__h139217 = k_expo__h138924 + y__h139219 ;
  assign x__h139542 = 5'd22 - _0_MINUS_ftop_ffOD_OUT_BITS_28_TO_23__q4[4:0] ;
  assign x__h139556 =
	     23'd8388607 >>
	     IF_ftop_ffO_first__859_BIT_27_870_AND_NOT_ftop_ETC___d1876 ;
  assign x__h140299 =
	     _22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_THE_ETC___d1884 ?
	       _theResult___fst__h140328 :
	       ftop_ffO$D_OUT[22:21] ;
  assign x__h140383 =
	     5'd2 -
	     _22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_THE_ETC___d1883 ;
  assign x__h140425 =
	     3'd1 <<
	     _22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_THE_ETC___d1883 ;
  assign x__h141692 =
	     { _22_MINUS_IF_ftop_ffO_first__859_BIT_28_864_THE_ETC___d1883 !=
	       5'd0,
	       ftop_ffO$D_OUT[20:2] } >>
	     shift_new0__h138921 ;
  assign x__h141712 = 2'd0 - ftop_ffO$D_OUT[22:21] ;
  assign x__h141868 =
	     _19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__859_BI_ETC___d1923 -
	     5'd1 ;
  assign x__h142029 =
	     _19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__859_BI_ETC___d1923 -
	     5'd2 ;
  assign x__h143713 = k_expo__h143424 + y__h143715 ;
  assign x__h144037 = 5'd22 - _0_MINUS_qtop_ffOD_OUT_BITS_28_TO_23__q5[4:0] ;
  assign x__h144051 =
	     23'd8388607 >>
	     IF_qtop_ffO_first__035_BIT_27_046_AND_NOT_qtop_ETC___d2052 ;
  assign x__h144794 =
	     _22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_THE_ETC___d2060 ?
	       _theResult___fst__h144823 :
	       qtop_ffO$D_OUT[22:21] ;
  assign x__h144878 =
	     5'd2 -
	     _22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_THE_ETC___d2059 ;
  assign x__h144920 =
	     3'd1 <<
	     _22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_THE_ETC___d2059 ;
  assign x__h146187 =
	     { _22_MINUS_IF_qtop_ffO_first__035_BIT_28_040_THE_ETC___d2059 !=
	       5'd0,
	       qtop_ffO$D_OUT[20:2] } >>
	     shift_new0__h143421 ;
  assign x__h146207 = 2'd0 - qtop_ffO$D_OUT[22:21] ;
  assign x__h146363 =
	     _19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__035_BI_ETC___d2099 -
	     5'd1 ;
  assign x__h146524 =
	     _19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__035_BI_ETC___d2099 -
	     5'd2 ;
  assign x__h15826 =
	     { fma_adder_fifo_stage0_reg$D_OUT[294], x__h1253[286:0] } ;
  assign x__h28359 =
	     fma_multiplier_fifo_output_reg$D_OUT[1] &
	     fma_multiplier_fifo_output_reg$D_OUT[0] ;
  assign x__h28364 = fma_multiplier_fifo_output_reg$D_OUT[1] & y__h28377 ;
  assign x__h29445 = fda_divider_intDivide_rg_numer[18:0] == 19'd0 ;
  assign x__h29786 = f__h29618 >> x__h29822 ;
  assign x__h29822 =
	     9'd38 -
	     IF_fda_divider_fifo_stage0_reg_first__82_BIT_8_ETC___d188 ;
  assign x__h29910 = fda_divider_fifo_stage0_reg$D_OUT[8:0] + 9'd94 ;
  assign x__h29920 =
	     { IF_fda_divider_fifo_stage0_reg_first__82_BIT_8_ETC___d204,
	       IF_fda_divider_fifo_stage0_reg_first__82_BIT_8_ETC___d213 } ;
  assign x__h29982 =
	     IF_fda_divider_fifo_stage0_reg_first__82_BIT_8_ETC___d189 -
	     9'd1 ;
  assign x__h30006 =
	     264'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF >>
	     x__h29982 ;
  assign x__h30063 = ~fda_divider_intDivide_fifo_output_reg$D_OUT[1] ;
  assign x__h30360 = x__h30362 | fda_adder_fifo_stage0_reg$D_OUT[0] ;
  assign x__h30362 =
	     all_bits_0__h30317 & fda_adder_fifo_stage0_reg$D_OUT[294] ;
  assign x__h30367 =
	     (!fda_adder_fifo_stage0_reg$D_OUT[294] &&
	      !SEXT_IF_fda_adder_fifo_stage0_reg_first__48_BI_ETC___d258[287] &&
	      fda_adder_fifo_stage0_reg_first__48_BITS_294_T_ETC___d263[287]) ?
	       288'h7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF :
	       ((fda_adder_fifo_stage0_reg$D_OUT[294] &&
		 SEXT_IF_fda_adder_fifo_stage0_reg_first__48_BI_ETC___d258[287] &&
		 !fda_adder_fifo_stage0_reg_first__48_BITS_294_T_ETC___d263[287]) ?
		  288'h800000000000000000000000000000000000000000000000000000000000000000000000 :
		  fda_adder_fifo_stage0_reg_first__48_BITS_294_T_ETC___d263) ;
  assign x__h34523 =
	     fda_adder_fifo_stage0_reg$D_OUT[7] &
	     fda_adder_fifo_stage0_reg$D_OUT[6] ;
  assign x__h44918 =
	     { fda_adder_fifo_stage0_reg$D_OUT[294], x__h30367[286:0] } ;
  assign x__h5431 =
	     fma_adder_fifo_stage0_reg$D_OUT[7] &
	     fma_adder_fifo_stage0_reg$D_OUT[6] ;
  assign x__h57447 =
	     fda_divider_fifo_output_reg$D_OUT[1] &
	     fda_divider_fifo_output_reg$D_OUT[0] ;
  assign x__h57452 = fda_divider_fifo_output_reg$D_OUT[1] & y__h57465 ;
  assign x__h58919 =
	     (10'd155 -
	      { {2{qtop_quireToPosit1_fifo_stage0_regD_OUT_BITS__ETC__q6[7]}},
		qtop_quireToPosit1_fifo_stage0_regD_OUT_BITS__ETC__q6 }) -
	     10'd1 ;
  assign x__h58935 =
	     ((qtop_quireToPosit1_fifo_stage0_reg$D_OUT[286:0] == 287'd0 &&
	       qtop_quireToPosit1_fifo_stage0_reg$D_OUT[297:296] == 2'd0) ?
		2'd2 :
		qtop_quireToPosit1_fifo_stage0_reg$D_OUT[297:296]) !=
	     2'd2 &&
	     (!qtop_quireToPosit1_fifo_stage0_reg_first__39_B_ETC___d342 ||
	      carry_int_frac_shifted__h58831[266]) ;
  assign x__h58978 =
	     ((qtop_quireToPosit1_fifo_stage0_reg$D_OUT[286:0] == 287'd0 &&
	       qtop_quireToPosit1_fifo_stage0_reg$D_OUT[297:296] == 2'd0) ?
		2'd2 :
		qtop_quireToPosit1_fifo_stage0_reg$D_OUT[297:296]) ==
	     2'd2 ||
	     qtop_quireToPosit1_fifo_stage0_reg_first__39_B_ETC___d342 &&
	     carry_int_frac_shifted__h58831[265:0] == 266'd0 ;
  assign x__h59605 = frac__h59538 >> x__h59665 ;
  assign x__h59665 =
	     IF_ftop_fToP_fifo_stage0_reg_first__82_BIT_7_8_ETC___d389 +
	     6'd1 ;
  assign x__h59678 =
	     ftop_fToP_fifo_stage0_reg$D_OUT[7] ?
	       frac__h59538[x__h59665[4:0]] :
	       ftop_fToP_fifo_stage0_reg$D_OUT[7:2] != 6'd0 ||
	       ftop_fToP_fifo_stage0_reg$D_OUT[1] ;
  assign x__h59755 = x__h59767 & truncated_frac_zero__h59539 ;
  assign x__h59767 = x__h59768 & ftop_fToP_fifo_stage0_reg$D_OUT[0] ;
  assign x__h59768 = ~ftop_fToP_fifo_stage0_reg$D_OUT[1] ;
  assign x__h60354 =
	     { ptof_ptoF_fifo_stage0_regD_OUT_BITS_38_TO_31__q3[7],
	       ptof_ptoF_fifo_stage0_regD_OUT_BITS_38_TO_31__q3 } +
	     9'd127 ;
  assign x__h60384 = frac__h60299 >> x__h60444 ;
  assign x__h60444 =
	     IF_ptof_ptoF_fifo_stage0_reg_first__21_BIT_7_3_ETC___d435 +
	     6'd1 ;
  assign x__h60471 = x__h60472 | frac_f__h60305[0] ;
  assign x__h60472 = ~truncated_frac_zero__h60300 ;
  assign x__h60492 = ~ptof_ptoF_fifo_stage0_reg$D_OUT[1] ;
  assign x__h63855 =
	     INV_new_inp3144__q2[22] ?
	       5'd0 :
	       (INV_new_inp3144__q2[21] ?
		  5'd1 :
		  (INV_new_inp3144__q2[20] ?
		     5'd2 :
		     (INV_new_inp3144__q2[19] ?
			5'd3 :
			(INV_new_inp3144__q2[18] ?
			   5'd4 :
			   (INV_new_inp3144__q2[17] ?
			      5'd5 :
			      (INV_new_inp3144__q2[16] ?
				 5'd6 :
				 (INV_new_inp3144__q2[15] ?
				    5'd7 :
				    (INV_new_inp3144__q2[14] ?
				       5'd8 :
				       (INV_new_inp3144__q2[13] ?
					  5'd9 :
					  (INV_new_inp3144__q2[12] ?
					     5'd10 :
					     (INV_new_inp3144__q2[11] ?
						5'd11 :
						(INV_new_inp3144__q2[10] ?
						   5'd12 :
						   (INV_new_inp3144__q2[9] ?
						      5'd13 :
						      (INV_new_inp3144__q2[8] ?
							 5'd14 :
							 (INV_new_inp3144__q2[7] ?
							    5'd15 :
							    (INV_new_inp3144__q2[6] ?
							       5'd16 :
							       (INV_new_inp3144__q2[5] ?
								  5'd17 :
								  (INV_new_inp3144__q2[4] ?
								     5'd18 :
								     (INV_new_inp3144__q2[3] ?
									5'd19 :
									(INV_new_inp3144__q2[2] ?
									   5'd20 :
									   (INV_new_inp3144__q2[1] ?
									      5'd21 :
									      (INV_new_inp3144__q2[0] ?
										 5'd22 :
										 5'd23)))))))))))))))))))))) ;
  assign x__h666 = fma_multiplier_fifo_stage0_reg$D_OUT[39:0] >> x__h699 ;
  assign x__h67106 = { 1'd0, x__h67113 } ;
  assign x__h67113 =
	     new_inp__h63144[22] ?
	       5'd0 :
	       (new_inp__h63144[21] ?
		  5'd1 :
		  (new_inp__h63144[20] ?
		     5'd2 :
		     (new_inp__h63144[19] ?
			5'd3 :
			(new_inp__h63144[18] ?
			   5'd4 :
			   (new_inp__h63144[17] ?
			      5'd5 :
			      (new_inp__h63144[16] ?
				 5'd6 :
				 (new_inp__h63144[15] ?
				    5'd7 :
				    (new_inp__h63144[14] ?
				       5'd8 :
				       (new_inp__h63144[13] ?
					  5'd9 :
					  (new_inp__h63144[12] ?
					     5'd10 :
					     (new_inp__h63144[11] ?
						5'd11 :
						(new_inp__h63144[10] ?
						   5'd12 :
						   (new_inp__h63144[9] ?
						      5'd13 :
						      (new_inp__h63144[8] ?
							 5'd14 :
							 (new_inp__h63144[7] ?
							    5'd15 :
							    (new_inp__h63144[6] ?
							       5'd16 :
							       (new_inp__h63144[5] ?
								  5'd17 :
								  (new_inp__h63144[4] ?
								     5'd18 :
								     (new_inp__h63144[3] ?
									5'd19 :
									(new_inp__h63144[2] ?
									   5'd20 :
									   (new_inp__h63144[1] ?
									      5'd21 :
									      (new_inp__h63144[0] ?
										 5'd22 :
										 5'd23)))))))))))))))))))))) ;
  assign x__h699 =
	     9'd38 -
	     IF_fma_multiplier_fifo_stage0_reg_first_BIT_48_ETC___d10 ;
  assign x__h70646 =
	     IF_IF_ffI_first__75_BIT_95_09_THEN_0_MINUS_ffI_ETC___d710 -
	     5'd1 ;
  assign x__h70648 =
	     IF_IF_ffI_first__75_BIT_95_09_THEN_0_MINUS_ffI_ETC___d710 -
	     5'd2 ;
  assign x__h70683 =
	     5'd2 -
	     IF_IF_ffI_first__75_BIT_95_09_THEN_0_MINUS_ffI_ETC___d710 ;
  assign x__h71734 =
	     INV_new_inp0952__q8[22] ?
	       5'd0 :
	       (INV_new_inp0952__q8[21] ?
		  5'd1 :
		  (INV_new_inp0952__q8[20] ?
		     5'd2 :
		     (INV_new_inp0952__q8[19] ?
			5'd3 :
			(INV_new_inp0952__q8[18] ?
			   5'd4 :
			   (INV_new_inp0952__q8[17] ?
			      5'd5 :
			      (INV_new_inp0952__q8[16] ?
				 5'd6 :
				 (INV_new_inp0952__q8[15] ?
				    5'd7 :
				    (INV_new_inp0952__q8[14] ?
				       5'd8 :
				       (INV_new_inp0952__q8[13] ?
					  5'd9 :
					  (INV_new_inp0952__q8[12] ?
					     5'd10 :
					     (INV_new_inp0952__q8[11] ?
						5'd11 :
						(INV_new_inp0952__q8[10] ?
						   5'd12 :
						   (INV_new_inp0952__q8[9] ?
						      5'd13 :
						      (INV_new_inp0952__q8[8] ?
							 5'd14 :
							 (INV_new_inp0952__q8[7] ?
							    5'd15 :
							    (INV_new_inp0952__q8[6] ?
							       5'd16 :
							       (INV_new_inp0952__q8[5] ?
								  5'd17 :
								  (INV_new_inp0952__q8[4] ?
								     5'd18 :
								     (INV_new_inp0952__q8[3] ?
									5'd19 :
									(INV_new_inp0952__q8[2] ?
									   5'd20 :
									   (INV_new_inp0952__q8[1] ?
									      5'd21 :
									      (INV_new_inp0952__q8[0] ?
										 5'd22 :
										 5'd23)))))))))))))))))))))) ;
  assign x__h74985 = { 1'd0, x__h74992 } ;
  assign x__h74992 =
	     new_inp__h70952[22] ?
	       5'd0 :
	       (new_inp__h70952[21] ?
		  5'd1 :
		  (new_inp__h70952[20] ?
		     5'd2 :
		     (new_inp__h70952[19] ?
			5'd3 :
			(new_inp__h70952[18] ?
			   5'd4 :
			   (new_inp__h70952[17] ?
			      5'd5 :
			      (new_inp__h70952[16] ?
				 5'd6 :
				 (new_inp__h70952[15] ?
				    5'd7 :
				    (new_inp__h70952[14] ?
				       5'd8 :
				       (new_inp__h70952[13] ?
					  5'd9 :
					  (new_inp__h70952[12] ?
					     5'd10 :
					     (new_inp__h70952[11] ?
						5'd11 :
						(new_inp__h70952[10] ?
						   5'd12 :
						   (new_inp__h70952[9] ?
						      5'd13 :
						      (new_inp__h70952[8] ?
							 5'd14 :
							 (new_inp__h70952[7] ?
							    5'd15 :
							    (new_inp__h70952[6] ?
							       5'd16 :
							       (new_inp__h70952[5] ?
								  5'd17 :
								  (new_inp__h70952[4] ?
								     5'd18 :
								     (new_inp__h70952[3] ?
									5'd19 :
									(new_inp__h70952[2] ?
									   5'd20 :
									   (new_inp__h70952[1] ?
									      5'd21 :
									      (new_inp__h70952[0] ?
										 5'd22 :
										 5'd23)))))))))))))))))))))) ;
  assign x__h78525 =
	     IF_IF_IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84__ETC___d976 -
	     5'd1 ;
  assign x__h78527 =
	     IF_IF_IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84__ETC___d976 -
	     5'd2 ;
  assign x__h78562 =
	     5'd2 -
	     IF_IF_IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84__ETC___d976 ;
  assign x__h787 = fma_multiplier_fifo_stage0_reg$D_OUT[48:40] + 9'd94 ;
  assign x__h797 =
	     { IF_fma_multiplier_fifo_stage0_reg_first_BIT_48_ETC___d24,
	       IF_fma_multiplier_fifo_stage0_reg_first_BIT_48_ETC___d33 } ;
  assign x__h828 =
	     fma_multiplier_fifo_stage0_reg$D_OUT[48] &&
	     !IF_fma_multiplier_fifo_stage0_reg_first_BIT_48_ETC___d12 &&
	     fma_multiplier_fifo_stage0_regD_OUT_BITS_39_TO_0__q7[x__h865[5:0]] ;
  assign x__h865 =
	     IF_fma_multiplier_fifo_stage0_reg_first_BIT_48_ETC___d11 - 9'd1 ;
  assign x__h872 =
	     !fma_multiplier_fifo_stage0_reg$D_OUT[48] ||
	     IF_fma_multiplier_fifo_stage0_reg_first_BIT_48_ETC___d12 ||
	     (IF_fma_multiplier_fifo_stage0_reg_first_BIT_48_ETC___d11 ^
	      9'h100) <=
	     9'd257 ||
	     (f_new__h487 & mask1__h708) == 264'd0 ;
  assign x__h87207 =
	     extracter1_fifo_output_reg$D_OUT[29:28] == 2'd1 &&
	     extracter2_fifo_output_reg$D_OUT[29:28] == 2'd2 ||
	     extracter2_fifo_output_reg$D_OUT[29:28] == 2'd1 &&
	     extracter1_fifo_output_reg$D_OUT[29:28] == 2'd2 ;
  assign x__h87292 =
	     x__h87314 &
	     IF_extracter1_fifo_output_reg_first__078_BITS__ETC___d1097[0] ;
  assign x__h87314 =
	     x__h87316 &
	     IF_extracter1_fifo_output_reg_first__078_BITS__ETC___d1097[1] ;
  assign x__h87316 =
	     extracter1_fifo_output_reg$D_OUT[27] ^
	     extracter2_fifo_output_reg$D_OUT[27] ;
  assign x__h88299 =
	     extracter1_fifo_output_reg$D_OUT[29:28] == 2'd1 &&
	     extracter2_fifo_output_reg$D_OUT[29:28] == 2'd2 ||
	     extracter2_fifo_output_reg$D_OUT[29:28] == 2'd1 &&
	     extracter1_fifo_output_reg$D_OUT[29:28] == 2'd1 ;
  assign x__h889 =
	     264'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF >>
	     x__h865 ;
  assign x__h89155 =
	     ffI_f_rv$port1__read[30:23] == 8'd255 &&
	     ffI_f_rv$port1__read[22:0] != 23'd0 ;
  assign x__h89326 = ffI_f_rv$port1__read[2:0] == 3'd0 ;
  assign x__h89563 =
	     SEXT_extracter1_fifo_output_reg_first__078_BIT_ETC___d1103 +
	     9'd113 ;
  assign x__h93820 = rg_quire[287] && rg_quire[286:0] == 287'd0 ;
  assign x_frac__h59552 =
	     ftop_fToP_fifo_stage0_reg$D_OUT[7] ?
	       x__h59605[18:0] :
	       ((ftop_fToP_fifo_stage0_reg$D_OUT[7:2] == 6'd0) ?
		  ftop_fToP_fifo_stage0_reg$D_OUT[26:8] :
		  19'd524287) ;
  assign y__h1247 =
	     fma_adder_fifo_stage0_reg$D_OUT[4:3] == 2'd1 ||
	     fma_adder_fifo_stage0_reg$D_OUT[2:1] == 2'd1 ;
  assign y__h139218 = { 22'd0, _theResult____h138931 } ;
  assign y__h139219 =
	     { 4'd0, x__h141692[18:0] } >>
	     _19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__859_BI_ETC___d1923 ;
  assign y__h141909 = ~ftop_ffO$D_OUT[1] ;
  assign y__h141913 =
	     { 13'd0,
	       (ftop_ffO$D_OUT[20:2] & ~(19'h7FFFE << i1__h141919)) >> 0 } ==
	     32'd0 ;
  assign y__h143714 = { 22'd0, _theResult____h143431 } ;
  assign y__h143715 =
	     { 4'd0, x__h146187[18:0] } >>
	     _19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__035_BI_ETC___d2099 ;
  assign y__h146404 = ~qtop_ffO$D_OUT[1] ;
  assign y__h146408 =
	     { 13'd0,
	       (qtop_ffO$D_OUT[20:2] & ~(19'h7FFFE << i1__h146414)) >> 0 } ==
	     32'd0 ;
  assign y__h15802 = ~fma_adder_fifo_stage0_reg$D_OUT[294] ;
  assign y__h28377 = ~fma_multiplier_fifo_output_reg$D_OUT[0] ;
  assign y__h29085 = { 1'd0, fda_divider_intDivide_rg_numer[57:1] } ;
  assign y__h29171 = { 38'd0, fda_divider_intDivide_rg_denom } ;
  assign y__h30361 =
	     fda_adder_fifo_stage0_reg$D_OUT[4:3] == 2'd1 ||
	     fda_adder_fifo_stage0_reg$D_OUT[2:1] == 2'd1 ;
  assign y__h44894 = ~fda_adder_fifo_stage0_reg$D_OUT[294] ;
  assign y__h57465 = ~fda_divider_fifo_output_reg$D_OUT[0] ;
  assign y__h60493 =
	     { 8'd0,
	       (frac__h60299 &
		~(24'hFFFFFE <<
		  IF_ptof_ptoF_fifo_stage0_reg_first__21_BIT_7_3_ETC___d435[4:0])) >>
	       0 } ==
	     32'd0 ;
  always@(ffO$D_OUT)
  begin
    case (ffO$D_OUT[70:69])
      2'd0, 2'd1:
	  CASE_ffOD_OUT_BITS_70_TO_69_0_ffOD_OUT_BITS__ETC__q1 =
	      ffO$D_OUT[70:69];
      default: CASE_ffOD_OUT_BITS_70_TO_69_0_ffOD_OUT_BITS__ETC__q1 = 2'd2;
    endcase
  end
  always@(ffI$D_OUT or in_posit2___1_posit_inp__h71008)
  begin
    case (ffI$D_OUT[2:0])
      3'd2, 3'd3:
	  IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR_ffI_ETC___d772 =
	      in_posit2___1_posit_inp__h71008;
      default: IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR_ffI_ETC___d772 =
		   ffI$D_OUT[29:6];
    endcase
  end
  always@(IF_IF_ffI_first__75_BIT_95_09_THEN_0_MINUS_ffI_ETC___d710)
  begin
    case (IF_IF_ffI_first__75_BIT_95_09_THEN_0_MINUS_ffI_ETC___d710)
      5'd3: x__h70695 = 19'd18;
      5'd4: x__h70695 = 19'd17;
      5'd5: x__h70695 = 19'd16;
      5'd6: x__h70695 = 19'd15;
      5'd7: x__h70695 = 19'd14;
      5'd8: x__h70695 = 19'd13;
      5'd9: x__h70695 = 19'd12;
      5'd10: x__h70695 = 19'd11;
      5'd11: x__h70695 = 19'd10;
      5'd12: x__h70695 = 19'd9;
      5'd13: x__h70695 = 19'd8;
      5'd14: x__h70695 = 19'd7;
      5'd15: x__h70695 = 19'd6;
      5'd16: x__h70695 = 19'd5;
      5'd17: x__h70695 = 19'd4;
      5'd18: x__h70695 = 19'd3;
      5'd19: x__h70695 = 19'd2;
      5'd20: x__h70695 = 19'd1;
      5'd21: x__h70695 = 19'd0;
      default: x__h70695 =
		   (IF_IF_ffI_first__75_BIT_95_09_THEN_0_MINUS_ffI_ETC___d710 <=
		    5'd2) ?
		     19'd19 :
		     19'd0;
    endcase
  end
  always@(IF_IF_IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84__ETC___d976)
  begin
    case (IF_IF_IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84__ETC___d976)
      5'd3: x__h78574 = 19'd18;
      5'd4: x__h78574 = 19'd17;
      5'd5: x__h78574 = 19'd16;
      5'd6: x__h78574 = 19'd15;
      5'd7: x__h78574 = 19'd14;
      5'd8: x__h78574 = 19'd13;
      5'd9: x__h78574 = 19'd12;
      5'd10: x__h78574 = 19'd11;
      5'd11: x__h78574 = 19'd10;
      5'd12: x__h78574 = 19'd9;
      5'd13: x__h78574 = 19'd8;
      5'd14: x__h78574 = 19'd7;
      5'd15: x__h78574 = 19'd6;
      5'd16: x__h78574 = 19'd5;
      5'd17: x__h78574 = 19'd4;
      5'd18: x__h78574 = 19'd3;
      5'd19: x__h78574 = 19'd2;
      5'd20: x__h78574 = 19'd1;
      5'd21: x__h78574 = 19'd0;
      default: x__h78574 =
		   (IF_IF_IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84__ETC___d976 <=
		    5'd2) ?
		     19'd19 :
		     19'd0;
    endcase
  end
  always@(shift_new0__h138921 or
	  ftop_ffO_first__859_BIT_0_938_AND_INV_ftop_ffO_ETC___d1945 or
	  ftop_ffO$D_OUT or
	  ftop_ffO_first__859_BIT_0_938_AND_INV_ftop_ffO_ETC___d1941)
  begin
    case (shift_new0__h138921)
      3'd0:
	  CASE_shift_new038921_0_ftop_ffOD_OUT_BIT_0_1__ETC__q18 =
	      ftop_ffO$D_OUT[0];
      3'd1:
	  CASE_shift_new038921_0_ftop_ffOD_OUT_BIT_0_1__ETC__q18 =
	      ftop_ffO_first__859_BIT_0_938_AND_INV_ftop_ffO_ETC___d1941;
      default: CASE_shift_new038921_0_ftop_ffOD_OUT_BIT_0_1__ETC__q18 =
		   ftop_ffO_first__859_BIT_0_938_AND_INV_ftop_ffO_ETC___d1945;
    endcase
  end
  always@(shift_new0__h138921 or
	  ftop_ffO_first__859_BIT_0_938_AND_INV_ftop_ffO_ETC___d1945 or
	  ftop_ffO$D_OUT or
	  ftop_ffO_first__859_BIT_0_938_AND_INV_ftop_ffO_ETC___d1941)
  begin
    case (shift_new0__h138921)
      3'd0:
	  CASE_shift_new038921_0_NOT_ftop_ffOD_OUT_BIT__ETC__q19 =
	      !ftop_ffO$D_OUT[0];
      3'd1:
	  CASE_shift_new038921_0_NOT_ftop_ffOD_OUT_BIT__ETC__q19 =
	      !ftop_ffO_first__859_BIT_0_938_AND_INV_ftop_ffO_ETC___d1941;
      default: CASE_shift_new038921_0_NOT_ftop_ffOD_OUT_BIT__ETC__q19 =
		   !ftop_ffO_first__859_BIT_0_938_AND_INV_ftop_ffO_ETC___d1945;
    endcase
  end
  always@(ftop_ffO$D_OUT or a__h138968)
  begin
    case (ftop_ffO$D_OUT[31:30])
      2'd0:
	  output_regf_out_posit__h138952 =
	      { ftop_ffO$D_OUT[32],
		ftop_ffO$D_OUT[32] ? 23'd0 - a__h138968 : a__h138968 };
      2'd1: output_regf_out_posit__h138952 = 24'd8388608;
      default: output_regf_out_posit__h138952 = 24'd0;
    endcase
  end
  always@(shift_new0__h143421 or
	  qtop_ffO_first__035_BIT_0_114_AND_INV_qtop_ffO_ETC___d2121 or
	  qtop_ffO$D_OUT or
	  qtop_ffO_first__035_BIT_0_114_AND_INV_qtop_ffO_ETC___d2117)
  begin
    case (shift_new0__h143421)
      3'd0:
	  CASE_shift_new043421_0_qtop_ffOD_OUT_BIT_0_1__ETC__q22 =
	      qtop_ffO$D_OUT[0];
      3'd1:
	  CASE_shift_new043421_0_qtop_ffOD_OUT_BIT_0_1__ETC__q22 =
	      qtop_ffO_first__035_BIT_0_114_AND_INV_qtop_ffO_ETC___d2117;
      default: CASE_shift_new043421_0_qtop_ffOD_OUT_BIT_0_1__ETC__q22 =
		   qtop_ffO_first__035_BIT_0_114_AND_INV_qtop_ffO_ETC___d2121;
    endcase
  end
  always@(shift_new0__h143421 or
	  qtop_ffO_first__035_BIT_0_114_AND_INV_qtop_ffO_ETC___d2121 or
	  qtop_ffO$D_OUT or
	  qtop_ffO_first__035_BIT_0_114_AND_INV_qtop_ffO_ETC___d2117)
  begin
    case (shift_new0__h143421)
      3'd0:
	  CASE_shift_new043421_0_NOT_qtop_ffOD_OUT_BIT__ETC__q23 =
	      !qtop_ffO$D_OUT[0];
      3'd1:
	  CASE_shift_new043421_0_NOT_qtop_ffOD_OUT_BIT__ETC__q23 =
	      !qtop_ffO_first__035_BIT_0_114_AND_INV_qtop_ffO_ETC___d2117;
      default: CASE_shift_new043421_0_NOT_qtop_ffOD_OUT_BIT__ETC__q23 =
		   !qtop_ffO_first__035_BIT_0_114_AND_INV_qtop_ffO_ETC___d2121;
    endcase
  end
  always@(qtop_ffO$D_OUT or a__h143464)
  begin
    case (qtop_ffO$D_OUT[31:30])
      2'd0:
	  output_regf_out_posit__h143448 =
	      { qtop_ffO$D_OUT[32],
		qtop_ffO$D_OUT[32] ? 23'd0 - a__h143464 : a__h143464 };
      2'd1: output_regf_out_posit__h143448 = 24'd8388608;
      default: output_regf_out_posit__h143448 = 24'd0;
    endcase
  end
  always@(opcode_out$D_OUT or
	  ffO$FULL_N or
	  normalizer_fifo_output_reg$EMPTY_N or
	  fma_ffO$EMPTY_N or
	  fda_ffO$EMPTY_N or ptof_ffO$EMPTY_N or ptoq_ffO$EMPTY_N)
  begin
    case (opcode_out$D_OUT)
      3'd0, 3'd2:
	  IF_opcode_out_first__239_EQ_0_240_OR_opcode_ou_ETC___d2268 =
	      fma_ffO$EMPTY_N && ffO$FULL_N;
      3'd1, 3'd3:
	  IF_opcode_out_first__239_EQ_0_240_OR_opcode_ou_ETC___d2268 =
	      ffO$FULL_N && fda_ffO$EMPTY_N;
      3'd5:
	  IF_opcode_out_first__239_EQ_0_240_OR_opcode_ou_ETC___d2268 =
	      ffO$FULL_N && ptof_ffO$EMPTY_N;
      3'd7:
	  IF_opcode_out_first__239_EQ_0_240_OR_opcode_ou_ETC___d2268 =
	      ffO$FULL_N && ptoq_ffO$EMPTY_N;
      default: IF_opcode_out_first__239_EQ_0_240_OR_opcode_ou_ETC___d2268 =
		   opcode_out$D_OUT != 3'd4 && opcode_out$D_OUT != 3'd6 ||
		   ffO$FULL_N && normalizer_fifo_output_reg$EMPTY_N;
    endcase
  end
  always@(ffI$D_OUT or
	  extracter1_fifo_output_reg$FULL_N or
	  extracter2_fifo_output_reg$FULL_N or ffI_f_rv)
  begin
    case (ffI$D_OUT[2:0])
      3'd0, 3'd1, 3'd2, 3'd3:
	  IF_ffI_first__75_BITS_2_TO_0_76_EQ_4_77_THEN_N_ETC___d498 =
	      extracter1_fifo_output_reg$FULL_N &&
	      extracter2_fifo_output_reg$FULL_N;
      3'd4:
	  IF_ffI_first__75_BITS_2_TO_0_76_EQ_4_77_THEN_N_ETC___d498 =
	      !ffI_f_rv[32];
      default: IF_ffI_first__75_BITS_2_TO_0_76_EQ_4_77_THEN_N_ETC___d498 =
		   ffI$D_OUT[2:0] != 3'd5 && ffI$D_OUT[2:0] != 3'd7 ||
		   extracter1_fifo_output_reg$FULL_N;
    endcase
  end
  always@(server_core_request_put)
  begin
    case (server_core_request_put[137:136])
      2'd0, 2'd1:
	  CASE_server_core_request_put_BITS_137_TO_136_0_ETC__q31 =
	      server_core_request_put[137:136];
      default: CASE_server_core_request_put_BITS_137_TO_136_0_ETC__q31 = 2'd2;
    endcase
  end
  always@(server_core_request_put)
  begin
    case (server_core_request_put[71:70])
      2'd0, 2'd1:
	  CASE_server_core_request_put_BITS_71_TO_70_0_s_ETC__q32 =
	      server_core_request_put[71:70];
      default: CASE_server_core_request_put_BITS_71_TO_70_0_s_ETC__q32 = 2'd2;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        fda_check_quire <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fda_divider_intDivide_rg_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ffI_f_rv <= `BSV_ASSIGNMENT_DELAY 33'h0AAAAAAAA;
	fma_check_quire <= `BSV_ASSIGNMENT_DELAY 1'd0;
	opcode_in_rv <= `BSV_ASSIGNMENT_DELAY 4'd2;
	rg_quire <= `BSV_ASSIGNMENT_DELAY 288'd0;
	rg_quire_busy <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (fda_check_quire$EN)
	  fda_check_quire <= `BSV_ASSIGNMENT_DELAY fda_check_quire$D_IN;
	if (fda_divider_intDivide_rg_state$EN)
	  fda_divider_intDivide_rg_state <= `BSV_ASSIGNMENT_DELAY
	      fda_divider_intDivide_rg_state$D_IN;
	if (ffI_f_rv$EN) ffI_f_rv <= `BSV_ASSIGNMENT_DELAY ffI_f_rv$D_IN;
	if (fma_check_quire$EN)
	  fma_check_quire <= `BSV_ASSIGNMENT_DELAY fma_check_quire$D_IN;
	if (opcode_in_rv$EN)
	  opcode_in_rv <= `BSV_ASSIGNMENT_DELAY opcode_in_rv$D_IN;
	if (rg_quire$EN) rg_quire <= `BSV_ASSIGNMENT_DELAY rg_quire$D_IN;
	if (rg_quire_busy$EN)
	  rg_quire_busy <= `BSV_ASSIGNMENT_DELAY rg_quire_busy$D_IN;
      end
    if (fda_divider_intDivide_rg_denom$EN)
      fda_divider_intDivide_rg_denom <= `BSV_ASSIGNMENT_DELAY
	  fda_divider_intDivide_rg_denom$D_IN;
    if (fda_divider_intDivide_rg_denom2$EN)
      fda_divider_intDivide_rg_denom2 <= `BSV_ASSIGNMENT_DELAY
	  fda_divider_intDivide_rg_denom2$D_IN;
    if (fda_divider_intDivide_rg_n$EN)
      fda_divider_intDivide_rg_n <= `BSV_ASSIGNMENT_DELAY
	  fda_divider_intDivide_rg_n$D_IN;
    if (fda_divider_intDivide_rg_numer$EN)
      fda_divider_intDivide_rg_numer <= `BSV_ASSIGNMENT_DELAY
	  fda_divider_intDivide_rg_numer$D_IN;
    if (fda_divider_intDivide_rg_quo$EN)
      fda_divider_intDivide_rg_quo <= `BSV_ASSIGNMENT_DELAY
	  fda_divider_intDivide_rg_quo$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    fda_check_quire = 1'h0;
    fda_divider_intDivide_rg_denom = 20'hAAAAA;
    fda_divider_intDivide_rg_denom2 = 58'h2AAAAAAAAAAAAAA;
    fda_divider_intDivide_rg_n = 39'h2AAAAAAAAA;
    fda_divider_intDivide_rg_numer = 58'h2AAAAAAAAAAAAAA;
    fda_divider_intDivide_rg_quo = 39'h2AAAAAAAAA;
    fda_divider_intDivide_rg_state = 2'h2;
    ffI_f_rv = 33'h0AAAAAAAA;
    fma_check_quire = 1'h0;
    opcode_in_rv = 4'hA;
    rg_quire =
	288'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_quire_busy = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_035___d1036)
	begin
	  v__h86879 = $stime;
	  #0;
	end
    v__h86873 = v__h86879 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_035___d1036)
	$write("%0d: %m: rl_extract_in: ", v__h86873);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_035___d1036 &&
	  ffI$D_OUT[2:0] == 3'd0)
	$write("FMA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_035___d1036 &&
	  ffI$D_OUT[2:0] == 3'd1)
	$write("FDA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_035___d1036 &&
	  ffI$D_OUT[2:0] == 3'd2)
	$write("FMS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_035___d1036 &&
	  ffI$D_OUT[2:0] == 3'd3)
	$write("FDS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_035___d1036 &&
	  ffI$D_OUT[2:0] == 3'd4)
	$write("FCVT_P_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_035___d1036 &&
	  ffI$D_OUT[2:0] == 3'd5)
	$write("FCVT_S_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_035___d1036 &&
	  ffI$D_OUT[2:0] == 3'd6)
	$write("FCVT_P_R");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_035___d1036 &&
	  ffI$D_OUT[2:0] != 3'd0 &&
	  ffI$D_OUT[2:0] != 3'd1 &&
	  ffI$D_OUT[2:0] != 3'd2 &&
	  ffI$D_OUT[2:0] != 3'd3 &&
	  ffI$D_OUT[2:0] != 3'd4 &&
	  ffI$D_OUT[2:0] != 3'd5 &&
	  ffI$D_OUT[2:0] != 3'd6)
	$write("FCVT_R_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_035___d1036)
	$write("'h%h", ffI$D_OUT[95:72]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_035___d1036)
	$write("'h%h", ffI$D_OUT[29:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_035___d1036)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd4 &&
	  NOT_verbosity_ULE_1_035___d1036)
	begin
	  v__h143348 = $stime;
	  #0;
	end
    v__h143342 = v__h143348 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd4 &&
	  NOT_verbosity_ULE_1_035___d1036)
	$write("%0d: %m: rl_norm: ", v__h143342);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd4 &&
	  NOT_verbosity_ULE_1_035___d1036)
	$write("FCVT_P_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd4 &&
	  NOT_verbosity_ULE_1_035___d1036)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd6 &&
	  NOT_verbosity_ULE_1_035___d1036)
	begin
	  v__h147866 = $stime;
	  #0;
	end
    v__h147860 = v__h147866 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd6 &&
	  NOT_verbosity_ULE_1_035___d1036)
	$write("%0d: %m: rl_norm: ", v__h147860);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd6 &&
	  NOT_verbosity_ULE_1_035___d1036)
	$write("FCVT_P_R");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd6 &&
	  NOT_verbosity_ULE_1_035___d1036)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT != 3'd4 &&
	  opcode_norm$D_OUT != 3'd6)
	begin
	  v__h138880 = $stime;
	  #0;
	end
    v__h138874 = v__h138880 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT != 3'd4 &&
	  opcode_norm$D_OUT != 3'd6)
	$write("%0d: %m: rl_norm: Error Illegal Opcode", v__h138874);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd0) $write("FMA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd1) $write("FDA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd2) $write("FMS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd3) $write("FDS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd5)
	$write("FCVT_S_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT != 3'd4 &&
	  opcode_norm$D_OUT != 3'd6 &&
	  opcode_norm$D_OUT != 3'd0 &&
	  opcode_norm$D_OUT != 3'd1 &&
	  opcode_norm$D_OUT != 3'd2 &&
	  opcode_norm$D_OUT != 3'd3 &&
	  opcode_norm$D_OUT != 3'd5)
	$write("FCVT_R_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT != 3'd4 &&
	  opcode_norm$D_OUT != 3'd6)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_035___d1036)
	begin
	  v__h149258 = $stime;
	  #0;
	end
    v__h149252 = v__h149258 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_035___d1036)
	$write("%0d: %m: rl_out: ", v__h149252);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_035___d1036 &&
	  opcode_out$D_OUT == 3'd0)
	$write("FMA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_035___d1036 &&
	  opcode_out$D_OUT == 3'd1)
	$write("FDA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_035___d1036 &&
	  opcode_out$D_OUT == 3'd2)
	$write("FMS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_035___d1036 &&
	  opcode_out$D_OUT == 3'd3)
	$write("FDS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_035___d1036 &&
	  opcode_out$D_OUT == 3'd4)
	$write("FCVT_P_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_035___d1036 &&
	  opcode_out$D_OUT == 3'd5)
	$write("FCVT_S_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_035___d1036 &&
	  opcode_out$D_OUT == 3'd6)
	$write("FCVT_P_R");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_035___d1036 &&
	  opcode_out$D_OUT != 3'd0 &&
	  opcode_out$D_OUT != 3'd1 &&
	  opcode_out$D_OUT != 3'd2 &&
	  opcode_out$D_OUT != 3'd3 &&
	  opcode_out$D_OUT != 3'd4 &&
	  opcode_out$D_OUT != 3'd5 &&
	  opcode_out$D_OUT != 3'd6)
	$write("FCVT_R_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_035___d1036)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_035___d1036)
	$display("  QUIRE: %h", rg_quire);
  end
  // synopsys translate_on
endmodule  // mkPositCore

