//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_core_request_put    O     1 reg
// server_core_response_get       O    71
// RDY_server_core_response_get   O     1 reg
// verbosity                      I     4
// CLK                            I     1 clock
// RST_N                          I     1 reset
// server_core_request_put        I   138
// EN_server_core_request_put     I     1
// EN_server_core_response_get    I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPositCore(verbosity,
		   CLK,
		   RST_N,

		   server_core_request_put,
		   EN_server_core_request_put,
		   RDY_server_core_request_put,

		   EN_server_core_response_get,
		   server_core_response_get,
		   RDY_server_core_response_get);
  input  [3 : 0] verbosity;
  input  CLK;
  input  RST_N;

  // action method server_core_request_put
  input  [137 : 0] server_core_request_put;
  input  EN_server_core_request_put;
  output RDY_server_core_request_put;

  // actionvalue method server_core_response_get
  input  EN_server_core_response_get;
  output [70 : 0] server_core_response_get;
  output RDY_server_core_response_get;

  // signals for module outputs
  wire [70 : 0] server_core_response_get;
  wire RDY_server_core_request_put, RDY_server_core_response_get;

  // inlined wires
  wire [32 : 0] ffI_f_rv$port0__write_1,
		ffI_f_rv$port1__read,
		ffI_f_rv$port2__read;
  wire [3 : 0] opcode_in_rv$port0__write_1,
	       opcode_in_rv$port1__read,
	       opcode_in_rv$port2__read;
  wire ffI_f_rv$EN_port0__write, opcode_in_rv$EN_port1__write;

  // register fda_check_quire
  reg fda_check_quire;
  wire fda_check_quire$D_IN, fda_check_quire$EN;

  // register fda_divider_intDivide_rg_denom
  reg [12 : 0] fda_divider_intDivide_rg_denom;
  wire [12 : 0] fda_divider_intDivide_rg_denom$D_IN;
  wire fda_divider_intDivide_rg_denom$EN;

  // register fda_divider_intDivide_rg_denom2
  reg [36 : 0] fda_divider_intDivide_rg_denom2;
  reg [36 : 0] fda_divider_intDivide_rg_denom2$D_IN;
  wire fda_divider_intDivide_rg_denom2$EN;

  // register fda_divider_intDivide_rg_n
  reg [24 : 0] fda_divider_intDivide_rg_n;
  reg [24 : 0] fda_divider_intDivide_rg_n$D_IN;
  wire fda_divider_intDivide_rg_n$EN;

  // register fda_divider_intDivide_rg_numer
  reg [36 : 0] fda_divider_intDivide_rg_numer;
  wire [36 : 0] fda_divider_intDivide_rg_numer$D_IN;
  wire fda_divider_intDivide_rg_numer$EN;

  // register fda_divider_intDivide_rg_quo
  reg [24 : 0] fda_divider_intDivide_rg_quo;
  wire [24 : 0] fda_divider_intDivide_rg_quo$D_IN;
  wire fda_divider_intDivide_rg_quo$EN;

  // register fda_divider_intDivide_rg_state
  reg [1 : 0] fda_divider_intDivide_rg_state;
  reg [1 : 0] fda_divider_intDivide_rg_state$D_IN;
  wire fda_divider_intDivide_rg_state$EN;

  // register ffI_f_rv
  reg [32 : 0] ffI_f_rv;
  wire [32 : 0] ffI_f_rv$D_IN;
  wire ffI_f_rv$EN;

  // register fma_check_quire
  reg fma_check_quire;
  wire fma_check_quire$D_IN, fma_check_quire$EN;

  // register opcode_in_rv
  reg [3 : 0] opcode_in_rv;
  wire [3 : 0] opcode_in_rv$D_IN;
  wire opcode_in_rv$EN;

  // register rg_quire
  reg [127 : 0] rg_quire;
  reg [127 : 0] rg_quire$D_IN;
  wire rg_quire$EN;

  // register rg_quire_busy
  reg rg_quire_busy;
  wire rg_quire_busy$D_IN, rg_quire_busy$EN;

  // ports of submodule extracter1_fifo_output_reg
  wire [20 : 0] extracter1_fifo_output_reg$D_IN,
		extracter1_fifo_output_reg$D_OUT;
  wire extracter1_fifo_output_reg$CLR,
       extracter1_fifo_output_reg$DEQ,
       extracter1_fifo_output_reg$EMPTY_N,
       extracter1_fifo_output_reg$ENQ,
       extracter1_fifo_output_reg$FULL_N;

  // ports of submodule extracter1_fifo_stage0_reg
  wire [17 : 0] extracter1_fifo_stage0_reg$D_IN;
  wire extracter1_fifo_stage0_reg$CLR,
       extracter1_fifo_stage0_reg$DEQ,
       extracter1_fifo_stage0_reg$ENQ;

  // ports of submodule extracter1_fifo_stage1_reg
  wire [24 : 0] extracter1_fifo_stage1_reg$D_IN;
  wire extracter1_fifo_stage1_reg$CLR,
       extracter1_fifo_stage1_reg$DEQ,
       extracter1_fifo_stage1_reg$ENQ;

  // ports of submodule extracter1_fifo_stage2_reg
  wire [21 : 0] extracter1_fifo_stage2_reg$D_IN;
  wire extracter1_fifo_stage2_reg$CLR,
       extracter1_fifo_stage2_reg$DEQ,
       extracter1_fifo_stage2_reg$ENQ;

  // ports of submodule extracter2_fifo_output_reg
  wire [20 : 0] extracter2_fifo_output_reg$D_IN,
		extracter2_fifo_output_reg$D_OUT;
  wire extracter2_fifo_output_reg$CLR,
       extracter2_fifo_output_reg$DEQ,
       extracter2_fifo_output_reg$EMPTY_N,
       extracter2_fifo_output_reg$ENQ,
       extracter2_fifo_output_reg$FULL_N;

  // ports of submodule extracter2_fifo_stage0_reg
  wire [17 : 0] extracter2_fifo_stage0_reg$D_IN;
  wire extracter2_fifo_stage0_reg$CLR,
       extracter2_fifo_stage0_reg$DEQ,
       extracter2_fifo_stage0_reg$ENQ;

  // ports of submodule extracter2_fifo_stage1_reg
  wire [24 : 0] extracter2_fifo_stage1_reg$D_IN;
  wire extracter2_fifo_stage1_reg$CLR,
       extracter2_fifo_stage1_reg$DEQ,
       extracter2_fifo_stage1_reg$ENQ;

  // ports of submodule extracter2_fifo_stage2_reg
  wire [21 : 0] extracter2_fifo_stage2_reg$D_IN;
  wire extracter2_fifo_stage2_reg$CLR,
       extracter2_fifo_stage2_reg$DEQ,
       extracter2_fifo_stage2_reg$ENQ;

  // ports of submodule fda_adder_fifo_output_reg
  wire fda_adder_fifo_output_reg$CLR,
       fda_adder_fifo_output_reg$DEQ,
       fda_adder_fifo_output_reg$EMPTY_N,
       fda_adder_fifo_output_reg$ENQ,
       fda_adder_fifo_output_reg$FULL_N;

  // ports of submodule fda_adder_fifo_stage0_reg
  wire [134 : 0] fda_adder_fifo_stage0_reg$D_IN,
		 fda_adder_fifo_stage0_reg$D_OUT;
  wire fda_adder_fifo_stage0_reg$CLR,
       fda_adder_fifo_stage0_reg$DEQ,
       fda_adder_fifo_stage0_reg$EMPTY_N,
       fda_adder_fifo_stage0_reg$ENQ,
       fda_adder_fifo_stage0_reg$FULL_N;

  // ports of submodule fda_divider_fifo_output_reg
  wire [132 : 0] fda_divider_fifo_output_reg$D_IN,
		 fda_divider_fifo_output_reg$D_OUT;
  wire fda_divider_fifo_output_reg$CLR,
       fda_divider_fifo_output_reg$DEQ,
       fda_divider_fifo_output_reg$EMPTY_N,
       fda_divider_fifo_output_reg$ENQ,
       fda_divider_fifo_output_reg$FULL_N;

  // ports of submodule fda_divider_fifo_stage0_reg
  wire [10 : 0] fda_divider_fifo_stage0_reg$D_IN,
		fda_divider_fifo_stage0_reg$D_OUT;
  wire fda_divider_fifo_stage0_reg$CLR,
       fda_divider_fifo_stage0_reg$DEQ,
       fda_divider_fifo_stage0_reg$EMPTY_N,
       fda_divider_fifo_stage0_reg$ENQ,
       fda_divider_fifo_stage0_reg$FULL_N;

  // ports of submodule fda_divider_intDivide_fifo_output_reg
  wire [26 : 0] fda_divider_intDivide_fifo_output_reg$D_IN,
		fda_divider_intDivide_fifo_output_reg$D_OUT;
  wire fda_divider_intDivide_fifo_output_reg$CLR,
       fda_divider_intDivide_fifo_output_reg$DEQ,
       fda_divider_intDivide_fifo_output_reg$EMPTY_N,
       fda_divider_intDivide_fifo_output_reg$ENQ,
       fda_divider_intDivide_fifo_output_reg$FULL_N;

  // ports of submodule fda_ffO
  wire fda_ffO$CLR, fda_ffO$DEQ, fda_ffO$EMPTY_N, fda_ffO$ENQ, fda_ffO$FULL_N;

  // ports of submodule ffI
  wire [137 : 0] ffI$D_IN, ffI$D_OUT;
  wire ffI$CLR, ffI$DEQ, ffI$EMPTY_N, ffI$ENQ, ffI$FULL_N;

  // ports of submodule ffO
  reg [70 : 0] ffO$D_IN;
  wire [70 : 0] ffO$D_OUT;
  wire ffO$CLR, ffO$DEQ, ffO$EMPTY_N, ffO$ENQ, ffO$FULL_N;

  // ports of submodule fma_adder_fifo_output_reg
  wire fma_adder_fifo_output_reg$CLR,
       fma_adder_fifo_output_reg$DEQ,
       fma_adder_fifo_output_reg$EMPTY_N,
       fma_adder_fifo_output_reg$ENQ,
       fma_adder_fifo_output_reg$FULL_N;

  // ports of submodule fma_adder_fifo_stage0_reg
  wire [134 : 0] fma_adder_fifo_stage0_reg$D_IN,
		 fma_adder_fifo_stage0_reg$D_OUT;
  wire fma_adder_fifo_stage0_reg$CLR,
       fma_adder_fifo_stage0_reg$DEQ,
       fma_adder_fifo_stage0_reg$EMPTY_N,
       fma_adder_fifo_stage0_reg$ENQ,
       fma_adder_fifo_stage0_reg$FULL_N;

  // ports of submodule fma_ffO
  wire fma_ffO$CLR, fma_ffO$DEQ, fma_ffO$EMPTY_N, fma_ffO$ENQ, fma_ffO$FULL_N;

  // ports of submodule fma_multiplier_fifo_output_reg
  wire [132 : 0] fma_multiplier_fifo_output_reg$D_IN,
		 fma_multiplier_fifo_output_reg$D_OUT;
  wire fma_multiplier_fifo_output_reg$CLR,
       fma_multiplier_fifo_output_reg$DEQ,
       fma_multiplier_fifo_output_reg$EMPTY_N,
       fma_multiplier_fifo_output_reg$ENQ,
       fma_multiplier_fifo_output_reg$FULL_N;

  // ports of submodule fma_multiplier_fifo_stage0_reg
  wire [36 : 0] fma_multiplier_fifo_stage0_reg$D_IN,
		fma_multiplier_fifo_stage0_reg$D_OUT;
  wire fma_multiplier_fifo_stage0_reg$CLR,
       fma_multiplier_fifo_stage0_reg$DEQ,
       fma_multiplier_fifo_stage0_reg$EMPTY_N,
       fma_multiplier_fifo_stage0_reg$ENQ,
       fma_multiplier_fifo_stage0_reg$FULL_N;

  // ports of submodule ftop_fToP_fifo_output_reg
  wire [23 : 0] ftop_fToP_fifo_output_reg$D_IN,
		ftop_fToP_fifo_output_reg$D_OUT;
  wire ftop_fToP_fifo_output_reg$CLR,
       ftop_fToP_fifo_output_reg$DEQ,
       ftop_fToP_fifo_output_reg$EMPTY_N,
       ftop_fToP_fifo_output_reg$ENQ,
       ftop_fToP_fifo_output_reg$FULL_N;

  // ports of submodule ftop_fToP_fifo_stage0_reg
  wire [28 : 0] ftop_fToP_fifo_stage0_reg$D_IN,
		ftop_fToP_fifo_stage0_reg$D_OUT;
  wire ftop_fToP_fifo_stage0_reg$CLR,
       ftop_fToP_fifo_stage0_reg$DEQ,
       ftop_fToP_fifo_stage0_reg$EMPTY_N,
       ftop_fToP_fifo_stage0_reg$ENQ,
       ftop_fToP_fifo_stage0_reg$FULL_N;

  // ports of submodule ftop_ffO
  wire [23 : 0] ftop_ffO$D_IN, ftop_ffO$D_OUT;
  wire ftop_ffO$CLR,
       ftop_ffO$DEQ,
       ftop_ffO$EMPTY_N,
       ftop_ffO$ENQ,
       ftop_ffO$FULL_N;

  // ports of submodule need_normalize
  wire need_normalize$CLR,
       need_normalize$DEQ,
       need_normalize$D_IN,
       need_normalize$ENQ;

  // ports of submodule normalizer_fifo_output_reg
  wire [19 : 0] normalizer_fifo_output_reg$D_IN,
		normalizer_fifo_output_reg$D_OUT;
  wire normalizer_fifo_output_reg$CLR,
       normalizer_fifo_output_reg$DEQ,
       normalizer_fifo_output_reg$EMPTY_N,
       normalizer_fifo_output_reg$ENQ,
       normalizer_fifo_output_reg$FULL_N;

  // ports of submodule normalizer_fifo_stage0_reg
  wire [33 : 0] normalizer_fifo_stage0_reg$D_IN;
  wire normalizer_fifo_stage0_reg$CLR,
       normalizer_fifo_stage0_reg$DEQ,
       normalizer_fifo_stage0_reg$ENQ;

  // ports of submodule normalizer_fifo_stage1_reg
  wire [37 : 0] normalizer_fifo_stage1_reg$D_IN;
  wire normalizer_fifo_stage1_reg$CLR,
       normalizer_fifo_stage1_reg$DEQ,
       normalizer_fifo_stage1_reg$ENQ;

  // ports of submodule normalizer_fifo_stage2_reg
  wire [19 : 0] normalizer_fifo_stage2_reg$D_IN;
  wire normalizer_fifo_stage2_reg$CLR,
       normalizer_fifo_stage2_reg$DEQ,
       normalizer_fifo_stage2_reg$ENQ;

  // ports of submodule opcode_norm
  wire [2 : 0] opcode_norm$D_IN, opcode_norm$D_OUT;
  wire opcode_norm$CLR,
       opcode_norm$DEQ,
       opcode_norm$EMPTY_N,
       opcode_norm$ENQ,
       opcode_norm$FULL_N;

  // ports of submodule opcode_out
  wire [2 : 0] opcode_out$D_IN, opcode_out$D_OUT;
  wire opcode_out$CLR,
       opcode_out$DEQ,
       opcode_out$EMPTY_N,
       opcode_out$ENQ,
       opcode_out$FULL_N;

  // ports of submodule ptof_ffO
  wire [31 : 0] ptof_ffO$D_IN, ptof_ffO$D_OUT;
  wire ptof_ffO$CLR,
       ptof_ffO$DEQ,
       ptof_ffO$EMPTY_N,
       ptof_ffO$ENQ,
       ptof_ffO$FULL_N;

  // ports of submodule ptof_ptoF_fifo_output_reg
  reg [31 : 0] ptof_ptoF_fifo_output_reg$D_IN;
  wire [31 : 0] ptof_ptoF_fifo_output_reg$D_OUT;
  wire ptof_ptoF_fifo_output_reg$CLR,
       ptof_ptoF_fifo_output_reg$DEQ,
       ptof_ptoF_fifo_output_reg$EMPTY_N,
       ptof_ptoF_fifo_output_reg$ENQ,
       ptof_ptoF_fifo_output_reg$FULL_N;

  // ports of submodule ptof_ptoF_fifo_stage0_reg
  wire [41 : 0] ptof_ptoF_fifo_stage0_reg$D_IN,
		ptof_ptoF_fifo_stage0_reg$D_OUT;
  wire ptof_ptoF_fifo_stage0_reg$CLR,
       ptof_ptoF_fifo_stage0_reg$DEQ,
       ptof_ptoF_fifo_stage0_reg$EMPTY_N,
       ptof_ptoF_fifo_stage0_reg$ENQ,
       ptof_ptoF_fifo_stage0_reg$FULL_N;

  // ports of submodule ptoq_ffO
  wire ptoq_ffO$CLR,
       ptoq_ffO$DEQ,
       ptoq_ffO$EMPTY_N,
       ptoq_ffO$ENQ,
       ptoq_ffO$FULL_N;

  // ports of submodule ptoq_positToquire_fifo_output_reg
  wire ptoq_positToquire_fifo_output_reg$CLR,
       ptoq_positToquire_fifo_output_reg$DEQ,
       ptoq_positToquire_fifo_output_reg$EMPTY_N,
       ptoq_positToquire_fifo_output_reg$ENQ,
       ptoq_positToquire_fifo_output_reg$FULL_N;

  // ports of submodule ptoq_positToquire_fifo_stage0_reg
  wire [20 : 0] ptoq_positToquire_fifo_stage0_reg$D_IN;
  wire ptoq_positToquire_fifo_stage0_reg$CLR,
       ptoq_positToquire_fifo_stage0_reg$DEQ,
       ptoq_positToquire_fifo_stage0_reg$ENQ;

  // ports of submodule ptoq_positToquire_fifo_stage1_reg
  wire [114 : 0] ptoq_positToquire_fifo_stage1_reg$D_IN,
		 ptoq_positToquire_fifo_stage1_reg$D_OUT;
  wire ptoq_positToquire_fifo_stage1_reg$CLR,
       ptoq_positToquire_fifo_stage1_reg$DEQ,
       ptoq_positToquire_fifo_stage1_reg$EMPTY_N,
       ptoq_positToquire_fifo_stage1_reg$ENQ,
       ptoq_positToquire_fifo_stage1_reg$FULL_N;

  // ports of submodule qtop_ffO
  wire [23 : 0] qtop_ffO$D_IN, qtop_ffO$D_OUT;
  wire qtop_ffO$CLR,
       qtop_ffO$DEQ,
       qtop_ffO$EMPTY_N,
       qtop_ffO$ENQ,
       qtop_ffO$FULL_N;

  // ports of submodule qtop_quireToPosit1_fifo_output_reg
  wire [23 : 0] qtop_quireToPosit1_fifo_output_reg$D_IN,
		qtop_quireToPosit1_fifo_output_reg$D_OUT;
  wire qtop_quireToPosit1_fifo_output_reg$CLR,
       qtop_quireToPosit1_fifo_output_reg$DEQ,
       qtop_quireToPosit1_fifo_output_reg$EMPTY_N,
       qtop_quireToPosit1_fifo_output_reg$ENQ,
       qtop_quireToPosit1_fifo_output_reg$FULL_N;

  // ports of submodule qtop_quireToPosit1_fifo_stage0_reg
  wire [136 : 0] qtop_quireToPosit1_fifo_stage0_reg$D_IN,
		 qtop_quireToPosit1_fifo_stage0_reg$D_OUT;
  wire qtop_quireToPosit1_fifo_stage0_reg$CLR,
       qtop_quireToPosit1_fifo_stage0_reg$DEQ,
       qtop_quireToPosit1_fifo_stage0_reg$EMPTY_N,
       qtop_quireToPosit1_fifo_stage0_reg$ENQ,
       qtop_quireToPosit1_fifo_stage0_reg$FULL_N;

  // ports of submodule qtop_quireToPosit1_fifo_stage1_reg
  wire [23 : 0] qtop_quireToPosit1_fifo_stage1_reg$D_IN,
		qtop_quireToPosit1_fifo_stage1_reg$D_OUT;
  wire qtop_quireToPosit1_fifo_stage1_reg$CLR,
       qtop_quireToPosit1_fifo_stage1_reg$DEQ,
       qtop_quireToPosit1_fifo_stage1_reg$EMPTY_N,
       qtop_quireToPosit1_fifo_stage1_reg$ENQ,
       qtop_quireToPosit1_fifo_stage1_reg$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_extract_in,
       CAN_FIRE_RL_fda_adder_stage_1,
       CAN_FIRE_RL_fda_divider_intDivide_rl_loop1,
       CAN_FIRE_RL_fda_divider_intDivide_rl_loop2,
       CAN_FIRE_RL_fda_divider_stage_1,
       CAN_FIRE_RL_fda_rl_connect1,
       CAN_FIRE_RL_fda_rl_out,
       CAN_FIRE_RL_fma_adder_stage_1,
       CAN_FIRE_RL_fma_multiplier_stage_1,
       CAN_FIRE_RL_fma_rl_connect1,
       CAN_FIRE_RL_fma_rl_out,
       CAN_FIRE_RL_ftop_fToP_stage_1,
       CAN_FIRE_RL_ftop_rl_out,
       CAN_FIRE_RL_ptof_ptoF_stage_2,
       CAN_FIRE_RL_ptof_rl_out,
       CAN_FIRE_RL_ptoq_positToquire_stage_2,
       CAN_FIRE_RL_ptoq_rl_out,
       CAN_FIRE_RL_qtop_quireToPosit1_stage_1,
       CAN_FIRE_RL_qtop_quireToPosit1_stage_2,
       CAN_FIRE_RL_qtop_rl_out,
       CAN_FIRE_RL_rl_fda,
       CAN_FIRE_RL_rl_fma,
       CAN_FIRE_RL_rl_ftop,
       CAN_FIRE_RL_rl_norm,
       CAN_FIRE_RL_rl_out,
       CAN_FIRE_RL_rl_ptof,
       CAN_FIRE_RL_rl_ptoq,
       CAN_FIRE_RL_rl_qtop,
       CAN_FIRE_server_core_request_put,
       CAN_FIRE_server_core_response_get,
       WILL_FIRE_RL_extract_in,
       WILL_FIRE_RL_fda_adder_stage_1,
       WILL_FIRE_RL_fda_divider_intDivide_rl_loop1,
       WILL_FIRE_RL_fda_divider_intDivide_rl_loop2,
       WILL_FIRE_RL_fda_divider_stage_1,
       WILL_FIRE_RL_fda_rl_connect1,
       WILL_FIRE_RL_fda_rl_out,
       WILL_FIRE_RL_fma_adder_stage_1,
       WILL_FIRE_RL_fma_multiplier_stage_1,
       WILL_FIRE_RL_fma_rl_connect1,
       WILL_FIRE_RL_fma_rl_out,
       WILL_FIRE_RL_ftop_fToP_stage_1,
       WILL_FIRE_RL_ftop_rl_out,
       WILL_FIRE_RL_ptof_ptoF_stage_2,
       WILL_FIRE_RL_ptof_rl_out,
       WILL_FIRE_RL_ptoq_positToquire_stage_2,
       WILL_FIRE_RL_ptoq_rl_out,
       WILL_FIRE_RL_qtop_quireToPosit1_stage_1,
       WILL_FIRE_RL_qtop_quireToPosit1_stage_2,
       WILL_FIRE_RL_qtop_rl_out,
       WILL_FIRE_RL_rl_fda,
       WILL_FIRE_RL_rl_fma,
       WILL_FIRE_RL_rl_ftop,
       WILL_FIRE_RL_rl_norm,
       WILL_FIRE_RL_rl_out,
       WILL_FIRE_RL_rl_ptof,
       WILL_FIRE_RL_rl_ptoq,
       WILL_FIRE_RL_rl_qtop,
       WILL_FIRE_server_core_request_put,
       WILL_FIRE_server_core_response_get;

  // inputs to muxes for submodule ports
  wire [127 : 0] MUX_rg_quire$write_1__VAL_1,
		 MUX_rg_quire$write_1__VAL_2,
		 MUX_rg_quire$write_1__VAL_3;
  wire [36 : 0] MUX_fda_divider_intDivide_rg_denom2$write_1__VAL_1,
		MUX_fda_divider_intDivide_rg_denom2$write_1__VAL_2,
		MUX_fda_divider_intDivide_rg_denom2$write_1__VAL_3,
		MUX_fda_divider_intDivide_rg_numer$write_1__VAL_1,
		MUX_fda_divider_intDivide_rg_numer$write_1__VAL_2;
  wire [26 : 0] MUX_fda_divider_intDivide_fifo_output_reg$enq_1__VAL_1,
		MUX_fda_divider_intDivide_fifo_output_reg$enq_1__VAL_2;
  wire [24 : 0] MUX_fda_divider_intDivide_rg_n$write_1__VAL_1,
		MUX_fda_divider_intDivide_rg_n$write_1__VAL_3,
		MUX_fda_divider_intDivide_rg_quo$write_1__VAL_1,
		MUX_fda_divider_intDivide_rg_quo$write_1__VAL_2;
  wire [1 : 0] MUX_fda_divider_intDivide_rg_state$write_1__VAL_3;
  wire MUX_fda_divider_intDivide_fifo_output_reg$enq_1__SEL_1,
       MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_1,
       MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_2,
       MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_3,
       MUX_fda_divider_intDivide_rg_numer$write_1__SEL_2,
       MUX_fda_divider_intDivide_rg_state$write_1__SEL_2,
       MUX_opcode_out$enq_1__SEL_1,
       MUX_rg_quire_busy$write_1__SEL_1,
       MUX_rg_quire_busy$write_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h50031;
  reg [31 : 0] v__h78576;
  reg [31 : 0] v__h82208;
  reg [31 : 0] v__h74994;
  reg [31 : 0] v__h83600;
  reg [31 : 0] v__h50025;
  reg [31 : 0] v__h74988;
  reg [31 : 0] v__h78570;
  reg [31 : 0] v__h82202;
  reg [31 : 0] v__h83594;
  // synopsys translate_on

  // remaining internal signals
  reg [15 : 0] IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR_ffI_ETC___d693,
	       output_regf_out_posit__h75066,
	       output_regf_out_posit__h78676;
  reg [11 : 0] x__h38985, x__h44330;
  reg [1 : 0] CASE_ffOD_OUT_BITS_70_TO_69_0_ffOD_OUT_BITS__ETC__q1,
	      CASE_server_core_request_put_BITS_137_TO_136_0_ETC__q28,
	      CASE_server_core_request_put_BITS_71_TO_70_0_s_ETC__q29;
  reg CASE_shift_new05035_0_NOT_ftop_ffOD_OUT_BIT_0_ETC__q17,
      CASE_shift_new05035_0_ftop_ffOD_OUT_BIT_0_1_f_ETC__q16,
      CASE_shift_new08649_0_NOT_qtop_ffOD_OUT_BIT_0_ETC__q21,
      CASE_shift_new08649_0_qtop_ffOD_OUT_BIT_0_1_q_ETC__q20,
      IF_ffI_first__75_BITS_2_TO_0_76_EQ_4_77_THEN_N_ETC___d498,
      IF_opcode_out_first__759_EQ_0_760_OR_opcode_ou_ETC___d1788;
  wire [133 : 0] rg_quire_12_BIT_127_13_AND_rg_quire_12_BITS_12_ETC___d1366;
  wire [127 : 0] IF_INV_NOT_IF_NOT_fda_adder_fifo_stage0_reg_fi_ETC___d291,
		 IF_INV_NOT_IF_NOT_fma_adder_fifo_stage0_reg_fi_ETC___d107,
		 IF_NOT_rg_quire_12_BIT_127_13_14_AND_NOT_fda_d_ETC___d308,
		 IF_NOT_rg_quire_12_BIT_127_13_14_AND_NOT_fma_m_ETC___d127,
		 SEXT_IF_fda_adder_fifo_stage0_reg_first__48_BI_ETC___d258,
		 SEXT_IF_fma_adder_fifo_stage0_reg_first__4_BIT_ETC___d74,
		 fda_adder_fifo_stage0_reg_first__48_BITS_134_T_ETC___d263,
		 fma_adder_fifo_stage0_reg_first__4_BITS_134_TO_ETC___d79,
		 rg_quire_12_PLUS_fda_divider_fifo_output_reg_f_ETC___d301,
		 rg_quire_12_PLUS_fma_multiplier_fifo_output_re_ETC___d120,
		 twos_complement_carry_int_frac__h14956,
		 twos_complement_carry_int_frac__h28795,
		 twos_complement_carry_int_frac__h437,
		 x__h1239,
		 x__h15730,
		 x__h22441,
		 x__h7972;
  wire [126 : 0] carry_int_frac_shifted__h29585,
		 twos_complement_carry_int_frac__h52718,
		 x__h15283,
		 x__h783;
  wire [111 : 0] IF_fda_divider_fifo_stage0_reg_first__82_BIT_6_ETC___d213,
		 IF_fma_multiplier_fifo_stage0_reg_first_BIT_32_ETC___d33,
		 f_new___1__h15192,
		 f_new___1__h692,
		 f_new__h15000,
		 f_new__h15136,
		 f_new__h487,
		 f_new__h52569,
		 f_new__h639,
		 int_frac__h52552,
		 mask1__h15194,
		 mask1__h694,
		 x__h15369,
		 x__h875;
  wire [51 : 0] _0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d955;
  wire [36 : 0] y__h14511, y__h14597;
  wire [33 : 0] extracter1_fifo_output_reg_first__20_BIT_18_35_ETC___d957;
  wire [31 : 0] float_no__h31060;
  wire [25 : 0] f__h14995,
		fma_multiplier_fifo_stage0_regD_OUT_BITS_25_TO_0__q7,
		x__h15149,
		x__h652;
  wire [23 : 0] frac__h31053, x__h31138;
  wire [22 : 0] frac_f__h31059, stage0_regf_frac__h51620;
  wire [17 : 0] IF_IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR__ETC___d874,
		IF_ffI_first__75_BITS_86_TO_72_07_EQ_0_08_AND__ETC___d687;
  wire [15 : 0] in_posit2___1_posit_inp__h39228;
  wire [14 : 0] IF_IF_NOT_IF_ftop_ffO_first__383_BIT_19_388_TH_ETC___d1508,
		IF_IF_NOT_IF_qtop_ffO_first__557_BIT_19_562_TH_ETC___d1682,
		IF_NOT_IF_ftop_ffO_first__383_BIT_19_388_THEN__ETC___d1504,
		IF_NOT_IF_qtop_ffO_first__557_BIT_19_562_THEN__ETC___d1678,
		IF_fda_divider_fifo_stage0_reg_first__82_BIT_6_ETC___d204,
		IF_fma_multiplier_fifo_stage0_reg_first_BIT_32_ETC___d24,
		IF_ftop_ffO_first__383_BIT_19_388_THEN_1_SL_14_ETC___d1428,
		IF_qtop_ffO_first__557_BIT_19_562_THEN_1_SL_14_ETC___d1602,
		INV_new_inp3898__q2,
		INV_new_inp9172__q10,
		a__h75082,
		a__h78692,
		b__h75259,
		b__h75441,
		b__h76193,
		b__h77801,
		b__h78869,
		b__h79051,
		b__h79802,
		b__h81410,
		k__h75501,
		k__h75546,
		k__h79111,
		k__h79155,
		k_expo__h75038,
		k_expo__h78652,
		new_inp__h33898,
		new_inp__h39172,
		x__h75275,
		x__h75558,
		x__h78885,
		x__h79167,
		y__h75276,
		y__h75277,
		y__h78886,
		y__h78887;
  wire [12 : 0] IF_qtop_quireToPosit1_fifo_stage0_reg_first__3_ETC___d349,
		f1__h50451,
		f2__h50452,
		frac__h30292,
		x__h30359,
		x__h77256,
		x__h80865;
  wire [11 : 0] frac__h33906,
		frac__h39180,
		ftop_ffOD_OUT_BITS_13_TO_2__q15,
		qtop_ffOD_OUT_BITS_13_TO_2__q19,
		stage1_regf_frac__h29416,
		x0865_BITS_11_TO_0__q18,
		x7256_BITS_11_TO_0__q14,
		x_frac__h30306;
  wire [8 : 0] _0_CONCAT_ffI_f_rv_port1__read__026_BITS_30_TO__ETC___d1048,
	       x__h31108;
  wire [7 : 0] IF_0_CONCAT_IF_IF_rg_quire_12_BIT_127_13_THEN__ETC___d1360,
	       IF_0_CONCAT_ffI_f_rv_port1__read__026_BITS_30__ETC__q26,
	       IF_0_CONCAT_ffI_f_rv_port1__read__026_BITS_30__ETC__q27,
	       IF_SEXT_extracter1_fifo_output_reg_first__20_B_ETC___d1012,
	       SEXT_extracter1_fifo_output_reg_first__20_BITS_ETC___d1008,
	       SEXT_extracter1_fifo_output_reg_first__20_BITS_ETC__q23,
	       SEXT_extracter1_fifo_output_reg_first__20_BITS_ETC__q24,
	       _0_CONCAT_IF_IF_rg_quire_12_BIT_127_13_THEN_0_M_ETC___d1355,
	       _0_CONCAT_ffI_f_rv_port1__read__026_BITS_30_TO__ETC___d1056,
	       _0_CONCAT_ffI_f_rv_port1__read__026_BITS_30_TO__ETC___d1060,
	       _71_MINUS_0_CONCAT_IF_IF_rg_quire_12_BIT_127_13_ETC___d1357,
	       extracter1_fifo_output_reg_first__20_BIT_18_35_ETC___d1000,
	       ptof_ptoF_fifo_stage0_regD_OUT_BITS_38_TO_31__q3,
	       x__h29673;
  wire [6 : 0] IF_fda_divider_fifo_stage0_reg_first__82_BIT_6_ETC___d188,
	       IF_fda_divider_fifo_stage0_reg_first__82_BIT_6_ETC___d189,
	       IF_fma_multiplier_fifo_stage0_reg_first_BIT_32_ETC___d10,
	       IF_fma_multiplier_fifo_stage0_reg_first_BIT_32_ETC___d11,
	       SEXT_extracter1_fifo_output_reg_first__20_BITS_ETC___d945,
	       msbZeros__h52719,
	       x__h15185,
	       x__h15273,
	       x__h15345,
	       x__h52613,
	       x__h685,
	       x__h773,
	       x__h851;
  wire [5 : 0] IF_0_CONCAT_ffI_f_rv_port1__read__026_BITS_30__ETC___d1054,
	       IF_SEXT_extracter1_fifo_output_reg_first__20_B_ETC___d1023,
	       IF_ptof_ptoF_fifo_stage0_reg_first__21_BIT_7_3_ETC___d435,
	       NEG_extracter2_fifo_output_regD_OUT_BITS_17_T_ETC__q22,
	       SEXT_IF_IF_IF_ffI_first__75_BITS_2_TO_0_76_EQ__ETC___d772,
	       SEXT_IF_IF_ffI_first__75_BIT_87_09_THEN_0_MINU_ETC___d585,
	       SEXT_IF_new_inp3898_BIT_14_THEN_b4431_ELSE_b4433__q9,
	       SEXT_IF_new_inp9172_BIT_14_THEN_b9776_ELSE_b97781__q12,
	       extracter1_fifo_output_regD_OUT_BITS_17_TO_12__q13,
	       extracter2_fifo_output_regD_OUT_BITS_17_TO_12__q25,
	       qtop_quireToPosit1_fifo_stage0_regD_OUT_BITS__ETC__q6,
	       x__h31198;
  wire [4 : 0] IF_0_CONCAT_ffI_f_rv_port1__read__026_BITS_30__ETC___d1065,
	       IF_ftop_fToP_fifo_stage0_reg_first__82_BIT_6_8_ETC___d389,
	       IF_new_inp3898_BIT_14_THEN_b4431_ELSE_b4433__q8,
	       IF_new_inp9172_BIT_14_THEN_b9776_ELSE_b9778__q11,
	       _0_MINUS_ftop_ffOD_OUT_BITS_19_TO_15__q4,
	       _0_MINUS_qtop_ffOD_OUT_BITS_19_TO_15__q5,
	       b__h34431,
	       b__h34433,
	       b__h39776,
	       b__h39778,
	       x__h30419,
	       x__h36572,
	       x__h41917;
  wire [3 : 0] IF_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388__ETC___d1421,
	       IF_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562__ETC___d1595,
	       IF_IF_IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84__ETC___d833,
	       IF_IF_ffI_first__75_BIT_87_09_THEN_0_MINUS_ffI_ETC___d646,
	       IF_ftop_ffO_first__383_BIT_18_394_AND_NOT_ftop_ETC___d1400,
	       IF_qtop_ffO_first__557_BIT_18_568_AND_NOT_qtop_ETC___d1574,
	       _12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__383_BI_ETC___d1445,
	       _12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__557_BI_ETC___d1619,
	       _14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_THE_ETC___d1407,
	       _14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_THE_ETC___d1581,
	       ftop_ffO_first__383_BITS_18_TO_15_395_PLUS_1___d1396,
	       qtop_ffO_first__557_BITS_18_TO_15_569_PLUS_1___d1570,
	       x__h34441,
	       x__h36579,
	       x__h38936,
	       x__h39786,
	       x__h41924,
	       x__h44281,
	       x__h75544,
	       x__h77432,
	       x__h77593,
	       x__h79153,
	       x__h81041,
	       x__h81202;
  wire [1 : 0] IF_extracter1_fifo_output_reg_first__20_BITS_2_ETC___d939,
	       IF_fda_divider_fifo_stage0_reg_first__82_BIT_6_ETC___d242,
	       IF_rg_quire_12_EQ_0_33_THEN_2_ELSE_0___d134,
	       _theResult___snd_snd__h76374,
	       _theResult___snd_snd__h79983,
	       i1__h77483,
	       i1__h81092,
	       i__h77385,
	       i__h80994,
	       shift_new0__h75035,
	       shift_new0__h78649,
	       shift_new__h76321,
	       shift_new__h79930,
	       truncated_frac__h1186,
	       truncated_frac__h15677,
	       x__h76325,
	       x__h79934;
  wire IF_IF_14_MINUS_IF_ftop_ffO_first__383_BIT_19_3_ETC___d1480,
       IF_IF_14_MINUS_IF_qtop_ffO_first__557_BIT_19_5_ETC___d1654,
       IF_fma_multiplier_fifo_stage0_reg_first_BIT_32_ETC___d12,
       IF_opcode_norm_first__369_EQ_4_370_THEN_ftop_f_ETC___d1379,
       NOT_12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__38_ETC___d1496,
       NOT_12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__38_ETC___d1540,
       NOT_12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__55_ETC___d1670,
       NOT_12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__55_ETC___d1714,
       NOT_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_ETC___d1448,
       NOT_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_ETC___d1457,
       NOT_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_ETC___d1512,
       NOT_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_ETC___d1518,
       NOT_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_ETC___d1537,
       NOT_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_ETC___d1541,
       NOT_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_ETC___d1622,
       NOT_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_ETC___d1631,
       NOT_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_ETC___d1686,
       NOT_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_ETC___d1692,
       NOT_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_ETC___d1711,
       NOT_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_ETC___d1715,
       NOT_IF_fda_divider_fifo_stage0_reg_first__82_B_ETC___d191,
       NOT_IF_ftop_ffO_first__383_BIT_19_388_THEN_1_S_ETC___d1433,
       NOT_IF_qtop_ffO_first__557_BIT_19_562_THEN_1_S_ETC___d1607,
       NOT_NOT_14_MINUS_IF_ftop_ffO_first__383_BIT_19_ETC___d1470,
       NOT_NOT_14_MINUS_IF_qtop_ffO_first__557_BIT_19_ETC___d1644,
       NOT_verbosity_ULE_1_77___d878,
       SEXT_extracter1_fifo_output_reg_first__20_BITS_ETC___d1009,
       SEXT_extracter1_fifo_output_reg_first__20_BITS_ETC___d1010,
       _0_CONCAT_ffI_f_rv_port1__read__026_BITS_30_TO__ETC___d1050,
       _0_CONCAT_ffI_f_rv_port1__read__026_BITS_30_TO__ETC___d1051,
       _12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__383_BI_ETC___d1482,
       _12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__557_BI_ETC___d1656,
       _theResult____h75045,
       _theResult____h78659,
       _theResult___fst__h76225,
       _theResult___fst__h79834,
       add_round__h31061,
       all_bits_0__h1189,
       all_bits_0__h15680,
       expo__h33905,
       expo__h39179,
       expo_new__h76291,
       expo_new__h76322,
       expo_new__h79900,
       expo_new__h79931,
       fda_divider_intDivide_rg_denom2_43_ULE_0_CONCA_ETC___d147,
       fda_divider_intDivide_rg_numer_44_ULT_0_CONCAT_ETC___d156,
       fda_divider_intDivide_rg_numer_44_ULT_fda_divi_ETC___d167,
       fda_divider_intDivide_rg_state_41_EQ_0_60_OR_f_ETC___d971,
       flag_prev_truncate__h75044,
       flag_prev_truncate__h78658,
       flag_truncated_frac__h1184,
       flag_truncated_frac__h15675,
       ftop_ffO_first__383_BITS_13_TO_2_436_BIT_IF_14_ETC___d1454,
       ftop_ffO_first__383_BIT_0_460_AND_INV_ftop_ffO_ETC___d1463,
       ftop_ffO_first__383_BIT_0_460_AND_INV_ftop_ffO_ETC___d1467,
       ftop_ffO_first__383_BIT_14_409_AND_1_MINUS_14__ETC___d1412,
       mask_e__h76223,
       mask_e__h79832,
       qtop_ffO_first__557_BITS_13_TO_2_610_BIT_IF_14_ETC___d1628,
       qtop_ffO_first__557_BIT_0_634_AND_INV_qtop_ffO_ETC___d1637,
       qtop_ffO_first__557_BIT_0_634_AND_INV_qtop_ffO_ETC___d1641,
       qtop_ffO_first__557_BIT_14_583_AND_1_MINUS_14__ETC___d1586,
       qtop_quireToPosit1_fifo_stage0_reg_first__39_B_ETC___d342,
       truncated_frac_msb___1__h15193,
       truncated_frac_msb__h31055,
       truncated_frac_msb__h75040,
       truncated_frac_msb__h78654,
       truncated_frac_zero___1__h15195,
       truncated_frac_zero__h15004,
       truncated_frac_zero__h30293,
       truncated_frac_zero__h31054,
       x__h1232,
       x__h1234,
       x__h13785,
       x__h13790,
       x__h14822,
       x__h15426,
       x__h15723,
       x__h15725,
       x__h17646,
       x__h28250,
       x__h28255,
       x__h29689,
       x__h29732,
       x__h30432,
       x__h30509,
       x__h30521,
       x__h30522,
       x__h31225,
       x__h31226,
       x__h31246,
       x__h3177,
       x__h50359,
       x__h50444,
       x__h50466,
       x__h50468,
       x__h51353,
       x__h52213,
       x__h52376,
       x__h54630,
       x__h76196,
       x__h77276,
       x__h79805,
       x__h80885,
       x__h814,
       x__h858,
       y__h1233,
       y__h13803,
       y__h15724,
       y__h22417,
       y__h28268,
       y__h31247,
       y__h77473,
       y__h77477,
       y__h7948,
       y__h81082,
       y__h81086;

  // action method server_core_request_put
  assign RDY_server_core_request_put = ffI$FULL_N ;
  assign CAN_FIRE_server_core_request_put = ffI$FULL_N ;
  assign WILL_FIRE_server_core_request_put = EN_server_core_request_put ;

  // actionvalue method server_core_response_get
  assign server_core_response_get =
	     { CASE_ffOD_OUT_BITS_70_TO_69_0_ffOD_OUT_BITS__ETC__q1,
	       ffO$D_OUT[68:0] } ;
  assign RDY_server_core_response_get = ffO$EMPTY_N ;
  assign CAN_FIRE_server_core_response_get = ffO$EMPTY_N ;
  assign WILL_FIRE_server_core_response_get = EN_server_core_response_get ;

  // submodule extracter1_fifo_output_reg
  FIFO2 #(.width(32'd21),
	  .guarded(32'd1)) extracter1_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_output_reg$D_IN),
						      .ENQ(extracter1_fifo_output_reg$ENQ),
						      .DEQ(extracter1_fifo_output_reg$DEQ),
						      .CLR(extracter1_fifo_output_reg$CLR),
						      .D_OUT(extracter1_fifo_output_reg$D_OUT),
						      .FULL_N(extracter1_fifo_output_reg$FULL_N),
						      .EMPTY_N(extracter1_fifo_output_reg$EMPTY_N));

  // submodule extracter1_fifo_stage0_reg
  FIFO2 #(.width(32'd18),
	  .guarded(32'd1)) extracter1_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage0_reg$D_IN),
						      .ENQ(extracter1_fifo_stage0_reg$ENQ),
						      .DEQ(extracter1_fifo_stage0_reg$DEQ),
						      .CLR(extracter1_fifo_stage0_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter1_fifo_stage1_reg
  FIFO2 #(.width(32'd25),
	  .guarded(32'd1)) extracter1_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage1_reg$D_IN),
						      .ENQ(extracter1_fifo_stage1_reg$ENQ),
						      .DEQ(extracter1_fifo_stage1_reg$DEQ),
						      .CLR(extracter1_fifo_stage1_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter1_fifo_stage2_reg
  FIFO2 #(.width(32'd22),
	  .guarded(32'd1)) extracter1_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage2_reg$D_IN),
						      .ENQ(extracter1_fifo_stage2_reg$ENQ),
						      .DEQ(extracter1_fifo_stage2_reg$DEQ),
						      .CLR(extracter1_fifo_stage2_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter2_fifo_output_reg
  FIFO2 #(.width(32'd21),
	  .guarded(32'd1)) extracter2_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_output_reg$D_IN),
						      .ENQ(extracter2_fifo_output_reg$ENQ),
						      .DEQ(extracter2_fifo_output_reg$DEQ),
						      .CLR(extracter2_fifo_output_reg$CLR),
						      .D_OUT(extracter2_fifo_output_reg$D_OUT),
						      .FULL_N(extracter2_fifo_output_reg$FULL_N),
						      .EMPTY_N(extracter2_fifo_output_reg$EMPTY_N));

  // submodule extracter2_fifo_stage0_reg
  FIFO2 #(.width(32'd18),
	  .guarded(32'd1)) extracter2_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage0_reg$D_IN),
						      .ENQ(extracter2_fifo_stage0_reg$ENQ),
						      .DEQ(extracter2_fifo_stage0_reg$DEQ),
						      .CLR(extracter2_fifo_stage0_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter2_fifo_stage1_reg
  FIFO2 #(.width(32'd25),
	  .guarded(32'd1)) extracter2_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage1_reg$D_IN),
						      .ENQ(extracter2_fifo_stage1_reg$ENQ),
						      .DEQ(extracter2_fifo_stage1_reg$DEQ),
						      .CLR(extracter2_fifo_stage1_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter2_fifo_stage2_reg
  FIFO2 #(.width(32'd22),
	  .guarded(32'd1)) extracter2_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage2_reg$D_IN),
						      .ENQ(extracter2_fifo_stage2_reg$ENQ),
						      .DEQ(extracter2_fifo_stage2_reg$DEQ),
						      .CLR(extracter2_fifo_stage2_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule fda_adder_fifo_output_reg
  FIFO20 #(.guarded(32'd1)) fda_adder_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .ENQ(fda_adder_fifo_output_reg$ENQ),
						      .DEQ(fda_adder_fifo_output_reg$DEQ),
						      .CLR(fda_adder_fifo_output_reg$CLR),
						      .FULL_N(fda_adder_fifo_output_reg$FULL_N),
						      .EMPTY_N(fda_adder_fifo_output_reg$EMPTY_N));

  // submodule fda_adder_fifo_stage0_reg
  FIFO2 #(.width(32'd135),
	  .guarded(32'd1)) fda_adder_fifo_stage0_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(fda_adder_fifo_stage0_reg$D_IN),
						     .ENQ(fda_adder_fifo_stage0_reg$ENQ),
						     .DEQ(fda_adder_fifo_stage0_reg$DEQ),
						     .CLR(fda_adder_fifo_stage0_reg$CLR),
						     .D_OUT(fda_adder_fifo_stage0_reg$D_OUT),
						     .FULL_N(fda_adder_fifo_stage0_reg$FULL_N),
						     .EMPTY_N(fda_adder_fifo_stage0_reg$EMPTY_N));

  // submodule fda_divider_fifo_output_reg
  FIFO2 #(.width(32'd133),
	  .guarded(32'd1)) fda_divider_fifo_output_reg(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(fda_divider_fifo_output_reg$D_IN),
						       .ENQ(fda_divider_fifo_output_reg$ENQ),
						       .DEQ(fda_divider_fifo_output_reg$DEQ),
						       .CLR(fda_divider_fifo_output_reg$CLR),
						       .D_OUT(fda_divider_fifo_output_reg$D_OUT),
						       .FULL_N(fda_divider_fifo_output_reg$FULL_N),
						       .EMPTY_N(fda_divider_fifo_output_reg$EMPTY_N));

  // submodule fda_divider_fifo_stage0_reg
  FIFO2 #(.width(32'd11),
	  .guarded(32'd1)) fda_divider_fifo_stage0_reg(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(fda_divider_fifo_stage0_reg$D_IN),
						       .ENQ(fda_divider_fifo_stage0_reg$ENQ),
						       .DEQ(fda_divider_fifo_stage0_reg$DEQ),
						       .CLR(fda_divider_fifo_stage0_reg$CLR),
						       .D_OUT(fda_divider_fifo_stage0_reg$D_OUT),
						       .FULL_N(fda_divider_fifo_stage0_reg$FULL_N),
						       .EMPTY_N(fda_divider_fifo_stage0_reg$EMPTY_N));

  // submodule fda_divider_intDivide_fifo_output_reg
  FIFO2 #(.width(32'd27),
	  .guarded(32'd1)) fda_divider_intDivide_fifo_output_reg(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(fda_divider_intDivide_fifo_output_reg$D_IN),
								 .ENQ(fda_divider_intDivide_fifo_output_reg$ENQ),
								 .DEQ(fda_divider_intDivide_fifo_output_reg$DEQ),
								 .CLR(fda_divider_intDivide_fifo_output_reg$CLR),
								 .D_OUT(fda_divider_intDivide_fifo_output_reg$D_OUT),
								 .FULL_N(fda_divider_intDivide_fifo_output_reg$FULL_N),
								 .EMPTY_N(fda_divider_intDivide_fifo_output_reg$EMPTY_N));

  // submodule fda_ffO
  FIFO20 #(.guarded(32'd1)) fda_ffO(.RST(RST_N),
				    .CLK(CLK),
				    .ENQ(fda_ffO$ENQ),
				    .DEQ(fda_ffO$DEQ),
				    .CLR(fda_ffO$CLR),
				    .FULL_N(fda_ffO$FULL_N),
				    .EMPTY_N(fda_ffO$EMPTY_N));

  // submodule ffI
  FIFO2 #(.width(32'd138), .guarded(32'd1)) ffI(.RST(RST_N),
						.CLK(CLK),
						.D_IN(ffI$D_IN),
						.ENQ(ffI$ENQ),
						.DEQ(ffI$DEQ),
						.CLR(ffI$CLR),
						.D_OUT(ffI$D_OUT),
						.FULL_N(ffI$FULL_N),
						.EMPTY_N(ffI$EMPTY_N));

  // submodule ffO
  FIFO2 #(.width(32'd71), .guarded(32'd1)) ffO(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(ffO$D_IN),
					       .ENQ(ffO$ENQ),
					       .DEQ(ffO$DEQ),
					       .CLR(ffO$CLR),
					       .D_OUT(ffO$D_OUT),
					       .FULL_N(ffO$FULL_N),
					       .EMPTY_N(ffO$EMPTY_N));

  // submodule fma_adder_fifo_output_reg
  FIFO20 #(.guarded(32'd1)) fma_adder_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .ENQ(fma_adder_fifo_output_reg$ENQ),
						      .DEQ(fma_adder_fifo_output_reg$DEQ),
						      .CLR(fma_adder_fifo_output_reg$CLR),
						      .FULL_N(fma_adder_fifo_output_reg$FULL_N),
						      .EMPTY_N(fma_adder_fifo_output_reg$EMPTY_N));

  // submodule fma_adder_fifo_stage0_reg
  FIFO2 #(.width(32'd135),
	  .guarded(32'd1)) fma_adder_fifo_stage0_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(fma_adder_fifo_stage0_reg$D_IN),
						     .ENQ(fma_adder_fifo_stage0_reg$ENQ),
						     .DEQ(fma_adder_fifo_stage0_reg$DEQ),
						     .CLR(fma_adder_fifo_stage0_reg$CLR),
						     .D_OUT(fma_adder_fifo_stage0_reg$D_OUT),
						     .FULL_N(fma_adder_fifo_stage0_reg$FULL_N),
						     .EMPTY_N(fma_adder_fifo_stage0_reg$EMPTY_N));

  // submodule fma_ffO
  FIFO20 #(.guarded(32'd1)) fma_ffO(.RST(RST_N),
				    .CLK(CLK),
				    .ENQ(fma_ffO$ENQ),
				    .DEQ(fma_ffO$DEQ),
				    .CLR(fma_ffO$CLR),
				    .FULL_N(fma_ffO$FULL_N),
				    .EMPTY_N(fma_ffO$EMPTY_N));

  // submodule fma_multiplier_fifo_output_reg
  FIFO2 #(.width(32'd133),
	  .guarded(32'd1)) fma_multiplier_fifo_output_reg(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(fma_multiplier_fifo_output_reg$D_IN),
							  .ENQ(fma_multiplier_fifo_output_reg$ENQ),
							  .DEQ(fma_multiplier_fifo_output_reg$DEQ),
							  .CLR(fma_multiplier_fifo_output_reg$CLR),
							  .D_OUT(fma_multiplier_fifo_output_reg$D_OUT),
							  .FULL_N(fma_multiplier_fifo_output_reg$FULL_N),
							  .EMPTY_N(fma_multiplier_fifo_output_reg$EMPTY_N));

  // submodule fma_multiplier_fifo_stage0_reg
  FIFO2 #(.width(32'd37),
	  .guarded(32'd1)) fma_multiplier_fifo_stage0_reg(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(fma_multiplier_fifo_stage0_reg$D_IN),
							  .ENQ(fma_multiplier_fifo_stage0_reg$ENQ),
							  .DEQ(fma_multiplier_fifo_stage0_reg$DEQ),
							  .CLR(fma_multiplier_fifo_stage0_reg$CLR),
							  .D_OUT(fma_multiplier_fifo_stage0_reg$D_OUT),
							  .FULL_N(fma_multiplier_fifo_stage0_reg$FULL_N),
							  .EMPTY_N(fma_multiplier_fifo_stage0_reg$EMPTY_N));

  // submodule ftop_fToP_fifo_output_reg
  FIFO2 #(.width(32'd24),
	  .guarded(32'd1)) ftop_fToP_fifo_output_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(ftop_fToP_fifo_output_reg$D_IN),
						     .ENQ(ftop_fToP_fifo_output_reg$ENQ),
						     .DEQ(ftop_fToP_fifo_output_reg$DEQ),
						     .CLR(ftop_fToP_fifo_output_reg$CLR),
						     .D_OUT(ftop_fToP_fifo_output_reg$D_OUT),
						     .FULL_N(ftop_fToP_fifo_output_reg$FULL_N),
						     .EMPTY_N(ftop_fToP_fifo_output_reg$EMPTY_N));

  // submodule ftop_fToP_fifo_stage0_reg
  FIFO2 #(.width(32'd29),
	  .guarded(32'd1)) ftop_fToP_fifo_stage0_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(ftop_fToP_fifo_stage0_reg$D_IN),
						     .ENQ(ftop_fToP_fifo_stage0_reg$ENQ),
						     .DEQ(ftop_fToP_fifo_stage0_reg$DEQ),
						     .CLR(ftop_fToP_fifo_stage0_reg$CLR),
						     .D_OUT(ftop_fToP_fifo_stage0_reg$D_OUT),
						     .FULL_N(ftop_fToP_fifo_stage0_reg$FULL_N),
						     .EMPTY_N(ftop_fToP_fifo_stage0_reg$EMPTY_N));

  // submodule ftop_ffO
  FIFO2 #(.width(32'd24), .guarded(32'd1)) ftop_ffO(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ftop_ffO$D_IN),
						    .ENQ(ftop_ffO$ENQ),
						    .DEQ(ftop_ffO$DEQ),
						    .CLR(ftop_ffO$CLR),
						    .D_OUT(ftop_ffO$D_OUT),
						    .FULL_N(ftop_ffO$FULL_N),
						    .EMPTY_N(ftop_ffO$EMPTY_N));

  // submodule need_normalize
  FIFO1 #(.width(32'd1), .guarded(32'd1)) need_normalize(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(need_normalize$D_IN),
							 .ENQ(need_normalize$ENQ),
							 .DEQ(need_normalize$DEQ),
							 .CLR(need_normalize$CLR),
							 .D_OUT(),
							 .FULL_N(),
							 .EMPTY_N());

  // submodule normalizer_fifo_output_reg
  FIFO2 #(.width(32'd20),
	  .guarded(32'd1)) normalizer_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_output_reg$D_IN),
						      .ENQ(normalizer_fifo_output_reg$ENQ),
						      .DEQ(normalizer_fifo_output_reg$DEQ),
						      .CLR(normalizer_fifo_output_reg$CLR),
						      .D_OUT(normalizer_fifo_output_reg$D_OUT),
						      .FULL_N(normalizer_fifo_output_reg$FULL_N),
						      .EMPTY_N(normalizer_fifo_output_reg$EMPTY_N));

  // submodule normalizer_fifo_stage0_reg
  FIFO2 #(.width(32'd34),
	  .guarded(32'd1)) normalizer_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage0_reg$D_IN),
						      .ENQ(normalizer_fifo_stage0_reg$ENQ),
						      .DEQ(normalizer_fifo_stage0_reg$DEQ),
						      .CLR(normalizer_fifo_stage0_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule normalizer_fifo_stage1_reg
  FIFO2 #(.width(32'd38),
	  .guarded(32'd1)) normalizer_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage1_reg$D_IN),
						      .ENQ(normalizer_fifo_stage1_reg$ENQ),
						      .DEQ(normalizer_fifo_stage1_reg$DEQ),
						      .CLR(normalizer_fifo_stage1_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule normalizer_fifo_stage2_reg
  FIFO2 #(.width(32'd20),
	  .guarded(32'd1)) normalizer_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage2_reg$D_IN),
						      .ENQ(normalizer_fifo_stage2_reg$ENQ),
						      .DEQ(normalizer_fifo_stage2_reg$DEQ),
						      .CLR(normalizer_fifo_stage2_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule opcode_norm
  FIFO1 #(.width(32'd3), .guarded(32'd1)) opcode_norm(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(opcode_norm$D_IN),
						      .ENQ(opcode_norm$ENQ),
						      .DEQ(opcode_norm$DEQ),
						      .CLR(opcode_norm$CLR),
						      .D_OUT(opcode_norm$D_OUT),
						      .FULL_N(opcode_norm$FULL_N),
						      .EMPTY_N(opcode_norm$EMPTY_N));

  // submodule opcode_out
  FIFO1 #(.width(32'd3), .guarded(32'd1)) opcode_out(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(opcode_out$D_IN),
						     .ENQ(opcode_out$ENQ),
						     .DEQ(opcode_out$DEQ),
						     .CLR(opcode_out$CLR),
						     .D_OUT(opcode_out$D_OUT),
						     .FULL_N(opcode_out$FULL_N),
						     .EMPTY_N(opcode_out$EMPTY_N));

  // submodule ptof_ffO
  FIFO2 #(.width(32'd32), .guarded(32'd1)) ptof_ffO(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ptof_ffO$D_IN),
						    .ENQ(ptof_ffO$ENQ),
						    .DEQ(ptof_ffO$DEQ),
						    .CLR(ptof_ffO$CLR),
						    .D_OUT(ptof_ffO$D_OUT),
						    .FULL_N(ptof_ffO$FULL_N),
						    .EMPTY_N(ptof_ffO$EMPTY_N));

  // submodule ptof_ptoF_fifo_output_reg
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) ptof_ptoF_fifo_output_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(ptof_ptoF_fifo_output_reg$D_IN),
						     .ENQ(ptof_ptoF_fifo_output_reg$ENQ),
						     .DEQ(ptof_ptoF_fifo_output_reg$DEQ),
						     .CLR(ptof_ptoF_fifo_output_reg$CLR),
						     .D_OUT(ptof_ptoF_fifo_output_reg$D_OUT),
						     .FULL_N(ptof_ptoF_fifo_output_reg$FULL_N),
						     .EMPTY_N(ptof_ptoF_fifo_output_reg$EMPTY_N));

  // submodule ptof_ptoF_fifo_stage0_reg
  FIFO2 #(.width(32'd42),
	  .guarded(32'd1)) ptof_ptoF_fifo_stage0_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(ptof_ptoF_fifo_stage0_reg$D_IN),
						     .ENQ(ptof_ptoF_fifo_stage0_reg$ENQ),
						     .DEQ(ptof_ptoF_fifo_stage0_reg$DEQ),
						     .CLR(ptof_ptoF_fifo_stage0_reg$CLR),
						     .D_OUT(ptof_ptoF_fifo_stage0_reg$D_OUT),
						     .FULL_N(ptof_ptoF_fifo_stage0_reg$FULL_N),
						     .EMPTY_N(ptof_ptoF_fifo_stage0_reg$EMPTY_N));

  // submodule ptoq_ffO
  FIFO20 #(.guarded(32'd1)) ptoq_ffO(.RST(RST_N),
				     .CLK(CLK),
				     .ENQ(ptoq_ffO$ENQ),
				     .DEQ(ptoq_ffO$DEQ),
				     .CLR(ptoq_ffO$CLR),
				     .FULL_N(ptoq_ffO$FULL_N),
				     .EMPTY_N(ptoq_ffO$EMPTY_N));

  // submodule ptoq_positToquire_fifo_output_reg
  FIFO20 #(.guarded(32'd1)) ptoq_positToquire_fifo_output_reg(.RST(RST_N),
							      .CLK(CLK),
							      .ENQ(ptoq_positToquire_fifo_output_reg$ENQ),
							      .DEQ(ptoq_positToquire_fifo_output_reg$DEQ),
							      .CLR(ptoq_positToquire_fifo_output_reg$CLR),
							      .FULL_N(ptoq_positToquire_fifo_output_reg$FULL_N),
							      .EMPTY_N(ptoq_positToquire_fifo_output_reg$EMPTY_N));

  // submodule ptoq_positToquire_fifo_stage0_reg
  FIFO2 #(.width(32'd21),
	  .guarded(32'd1)) ptoq_positToquire_fifo_stage0_reg(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ptoq_positToquire_fifo_stage0_reg$D_IN),
							     .ENQ(ptoq_positToquire_fifo_stage0_reg$ENQ),
							     .DEQ(ptoq_positToquire_fifo_stage0_reg$DEQ),
							     .CLR(ptoq_positToquire_fifo_stage0_reg$CLR),
							     .D_OUT(),
							     .FULL_N(),
							     .EMPTY_N());

  // submodule ptoq_positToquire_fifo_stage1_reg
  FIFO2 #(.width(32'd115),
	  .guarded(32'd1)) ptoq_positToquire_fifo_stage1_reg(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ptoq_positToquire_fifo_stage1_reg$D_IN),
							     .ENQ(ptoq_positToquire_fifo_stage1_reg$ENQ),
							     .DEQ(ptoq_positToquire_fifo_stage1_reg$DEQ),
							     .CLR(ptoq_positToquire_fifo_stage1_reg$CLR),
							     .D_OUT(ptoq_positToquire_fifo_stage1_reg$D_OUT),
							     .FULL_N(ptoq_positToquire_fifo_stage1_reg$FULL_N),
							     .EMPTY_N(ptoq_positToquire_fifo_stage1_reg$EMPTY_N));

  // submodule qtop_ffO
  FIFO2 #(.width(32'd24), .guarded(32'd1)) qtop_ffO(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(qtop_ffO$D_IN),
						    .ENQ(qtop_ffO$ENQ),
						    .DEQ(qtop_ffO$DEQ),
						    .CLR(qtop_ffO$CLR),
						    .D_OUT(qtop_ffO$D_OUT),
						    .FULL_N(qtop_ffO$FULL_N),
						    .EMPTY_N(qtop_ffO$EMPTY_N));

  // submodule qtop_quireToPosit1_fifo_output_reg
  FIFO2 #(.width(32'd24),
	  .guarded(32'd1)) qtop_quireToPosit1_fifo_output_reg(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(qtop_quireToPosit1_fifo_output_reg$D_IN),
							      .ENQ(qtop_quireToPosit1_fifo_output_reg$ENQ),
							      .DEQ(qtop_quireToPosit1_fifo_output_reg$DEQ),
							      .CLR(qtop_quireToPosit1_fifo_output_reg$CLR),
							      .D_OUT(qtop_quireToPosit1_fifo_output_reg$D_OUT),
							      .FULL_N(qtop_quireToPosit1_fifo_output_reg$FULL_N),
							      .EMPTY_N(qtop_quireToPosit1_fifo_output_reg$EMPTY_N));

  // submodule qtop_quireToPosit1_fifo_stage0_reg
  FIFO2 #(.width(32'd137),
	  .guarded(32'd1)) qtop_quireToPosit1_fifo_stage0_reg(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(qtop_quireToPosit1_fifo_stage0_reg$D_IN),
							      .ENQ(qtop_quireToPosit1_fifo_stage0_reg$ENQ),
							      .DEQ(qtop_quireToPosit1_fifo_stage0_reg$DEQ),
							      .CLR(qtop_quireToPosit1_fifo_stage0_reg$CLR),
							      .D_OUT(qtop_quireToPosit1_fifo_stage0_reg$D_OUT),
							      .FULL_N(qtop_quireToPosit1_fifo_stage0_reg$FULL_N),
							      .EMPTY_N(qtop_quireToPosit1_fifo_stage0_reg$EMPTY_N));

  // submodule qtop_quireToPosit1_fifo_stage1_reg
  FIFO2 #(.width(32'd24),
	  .guarded(32'd1)) qtop_quireToPosit1_fifo_stage1_reg(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(qtop_quireToPosit1_fifo_stage1_reg$D_IN),
							      .ENQ(qtop_quireToPosit1_fifo_stage1_reg$ENQ),
							      .DEQ(qtop_quireToPosit1_fifo_stage1_reg$DEQ),
							      .CLR(qtop_quireToPosit1_fifo_stage1_reg$CLR),
							      .D_OUT(qtop_quireToPosit1_fifo_stage1_reg$D_OUT),
							      .FULL_N(qtop_quireToPosit1_fifo_stage1_reg$FULL_N),
							      .EMPTY_N(qtop_quireToPosit1_fifo_stage1_reg$EMPTY_N));

  // rule RL_extract_in
  assign CAN_FIRE_RL_extract_in =
	     ffI$EMPTY_N && !opcode_in_rv[3] &&
	     IF_ffI_first__75_BITS_2_TO_0_76_EQ_4_77_THEN_N_ETC___d498 ;
  assign WILL_FIRE_RL_extract_in = CAN_FIRE_RL_extract_in ;

  // rule RL_rl_fma
  assign CAN_FIRE_RL_rl_fma =
	     opcode_in_rv$port1__read[3] &&
	     extracter1_fifo_output_reg$EMPTY_N &&
	     extracter2_fifo_output_reg$EMPTY_N &&
	     fma_multiplier_fifo_stage0_reg$FULL_N &&
	     opcode_out$FULL_N &&
	     (opcode_in_rv$port1__read[2:0] == 3'd0 ||
	      opcode_in_rv$port1__read[2:0] == 3'd2) &&
	     !rg_quire_busy ;
  assign WILL_FIRE_RL_rl_fma = CAN_FIRE_RL_rl_fma ;

  // rule RL_rl_fda
  assign CAN_FIRE_RL_rl_fda =
	     opcode_in_rv$port1__read[3] &&
	     fda_divider_intDivide_rg_state_41_EQ_0_60_OR_f_ETC___d971 &&
	     (opcode_in_rv$port1__read[2:0] == 3'd1 ||
	      opcode_in_rv$port1__read[2:0] == 3'd3) &&
	     !rg_quire_busy ;
  assign WILL_FIRE_RL_rl_fda = CAN_FIRE_RL_rl_fda ;

  // rule RL_rl_ptof
  assign CAN_FIRE_RL_rl_ptof =
	     opcode_in_rv$port1__read[3] &&
	     extracter1_fifo_output_reg$EMPTY_N &&
	     opcode_out$FULL_N &&
	     ptof_ptoF_fifo_stage0_reg$FULL_N &&
	     opcode_in_rv$port1__read[2:0] == 3'd5 ;
  assign WILL_FIRE_RL_rl_ptof = CAN_FIRE_RL_rl_ptof ;

  // rule RL_rl_ftop
  assign CAN_FIRE_RL_rl_ftop =
	     opcode_in_rv$port1__read[3] && ffI_f_rv$port1__read[32] &&
	     ftop_fToP_fifo_stage0_reg$FULL_N &&
	     opcode_norm$FULL_N &&
	     opcode_in_rv$port1__read[2:0] == 3'd4 ;
  assign WILL_FIRE_RL_rl_ftop = CAN_FIRE_RL_rl_ftop ;

  // rule RL_rl_ptoq
  assign CAN_FIRE_RL_rl_ptoq =
	     opcode_in_rv$port1__read[3] &&
	     extracter1_fifo_output_reg$EMPTY_N &&
	     opcode_out$FULL_N &&
	     ptoq_positToquire_fifo_stage1_reg$FULL_N &&
	     opcode_in_rv$port1__read[2:0] == 3'd7 &&
	     !rg_quire_busy ;
  assign WILL_FIRE_RL_rl_ptoq = CAN_FIRE_RL_rl_ptoq ;

  // rule RL_rl_qtop
  assign CAN_FIRE_RL_rl_qtop =
	     opcode_in_rv$port1__read[3] && opcode_norm$FULL_N &&
	     qtop_quireToPosit1_fifo_stage0_reg$FULL_N &&
	     opcode_in_rv$port1__read[2:0] == 3'd6 &&
	     !rg_quire_busy ;
  assign WILL_FIRE_RL_rl_qtop = CAN_FIRE_RL_rl_qtop ;

  // rule RL_rl_norm
  assign CAN_FIRE_RL_rl_norm =
	     opcode_out$FULL_N && opcode_norm$EMPTY_N &&
	     IF_opcode_norm_first__369_EQ_4_370_THEN_ftop_f_ETC___d1379 ;
  assign WILL_FIRE_RL_rl_norm =
	     CAN_FIRE_RL_rl_norm && !WILL_FIRE_RL_rl_ptoq &&
	     !WILL_FIRE_RL_rl_ptof &&
	     !WILL_FIRE_RL_rl_fda &&
	     !WILL_FIRE_RL_rl_fma ;

  // rule RL_rl_out
  assign CAN_FIRE_RL_rl_out =
	     opcode_out$EMPTY_N &&
	     IF_opcode_out_first__759_EQ_0_760_OR_opcode_ou_ETC___d1788 ;
  assign WILL_FIRE_RL_rl_out = CAN_FIRE_RL_rl_out ;

  // rule RL_fma_rl_connect1
  assign CAN_FIRE_RL_fma_rl_connect1 =
	     fma_multiplier_fifo_output_reg$EMPTY_N &&
	     fma_adder_fifo_stage0_reg$FULL_N ;
  assign WILL_FIRE_RL_fma_rl_connect1 = CAN_FIRE_RL_fma_rl_connect1 ;

  // rule RL_fma_rl_out
  assign CAN_FIRE_RL_fma_rl_out =
	     fma_adder_fifo_output_reg$EMPTY_N && fma_ffO$FULL_N ;
  assign WILL_FIRE_RL_fma_rl_out = CAN_FIRE_RL_fma_rl_out ;

  // rule RL_fma_multiplier_stage_1
  assign CAN_FIRE_RL_fma_multiplier_stage_1 =
	     fma_multiplier_fifo_stage0_reg$EMPTY_N &&
	     fma_multiplier_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_fma_multiplier_stage_1 =
	     CAN_FIRE_RL_fma_multiplier_stage_1 ;

  // rule RL_fda_rl_connect1
  assign CAN_FIRE_RL_fda_rl_connect1 =
	     fda_divider_fifo_output_reg$EMPTY_N &&
	     fda_adder_fifo_stage0_reg$FULL_N ;
  assign WILL_FIRE_RL_fda_rl_connect1 = CAN_FIRE_RL_fda_rl_connect1 ;

  // rule RL_fma_adder_stage_1
  assign CAN_FIRE_RL_fma_adder_stage_1 =
	     fma_adder_fifo_stage0_reg$EMPTY_N &&
	     fma_adder_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_fma_adder_stage_1 = CAN_FIRE_RL_fma_adder_stage_1 ;

  // rule RL_fda_rl_out
  assign CAN_FIRE_RL_fda_rl_out =
	     fda_adder_fifo_output_reg$EMPTY_N && fda_ffO$FULL_N ;
  assign WILL_FIRE_RL_fda_rl_out = CAN_FIRE_RL_fda_rl_out ;

  // rule RL_fda_divider_stage_1
  assign CAN_FIRE_RL_fda_divider_stage_1 =
	     fda_divider_fifo_stage0_reg$EMPTY_N &&
	     fda_divider_intDivide_fifo_output_reg$EMPTY_N &&
	     fda_divider_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_fda_divider_stage_1 = CAN_FIRE_RL_fda_divider_stage_1 ;

  // rule RL_fda_divider_intDivide_rl_loop1
  assign CAN_FIRE_RL_fda_divider_intDivide_rl_loop1 =
	     fda_divider_intDivide_rg_state == 2'd1 ;
  assign WILL_FIRE_RL_fda_divider_intDivide_rl_loop1 =
	     CAN_FIRE_RL_fda_divider_intDivide_rl_loop1 ;

  // rule RL_fda_divider_intDivide_rl_loop2
  assign CAN_FIRE_RL_fda_divider_intDivide_rl_loop2 =
	     (!fda_divider_intDivide_rg_numer_44_ULT_0_CONCAT_ETC___d156 ||
	      fda_divider_intDivide_fifo_output_reg$FULL_N) &&
	     fda_divider_intDivide_rg_state == 2'd2 ;
  assign WILL_FIRE_RL_fda_divider_intDivide_rl_loop2 =
	     CAN_FIRE_RL_fda_divider_intDivide_rl_loop2 ;

  // rule RL_fda_adder_stage_1
  assign CAN_FIRE_RL_fda_adder_stage_1 =
	     fda_adder_fifo_stage0_reg$EMPTY_N &&
	     fda_adder_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_fda_adder_stage_1 = CAN_FIRE_RL_fda_adder_stage_1 ;

  // rule RL_ptoq_rl_out
  assign CAN_FIRE_RL_ptoq_rl_out =
	     ptoq_positToquire_fifo_output_reg$EMPTY_N && ptoq_ffO$FULL_N ;
  assign WILL_FIRE_RL_ptoq_rl_out = CAN_FIRE_RL_ptoq_rl_out ;

  // rule RL_ptoq_positToquire_stage_2
  assign CAN_FIRE_RL_ptoq_positToquire_stage_2 =
	     ptoq_positToquire_fifo_stage1_reg$EMPTY_N &&
	     ptoq_positToquire_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_ptoq_positToquire_stage_2 =
	     CAN_FIRE_RL_ptoq_positToquire_stage_2 ;

  // rule RL_qtop_rl_out
  assign CAN_FIRE_RL_qtop_rl_out =
	     qtop_quireToPosit1_fifo_output_reg$EMPTY_N && qtop_ffO$FULL_N ;
  assign WILL_FIRE_RL_qtop_rl_out = CAN_FIRE_RL_qtop_rl_out ;

  // rule RL_qtop_quireToPosit1_stage_1
  assign CAN_FIRE_RL_qtop_quireToPosit1_stage_1 =
	     qtop_quireToPosit1_fifo_stage0_reg$EMPTY_N &&
	     qtop_quireToPosit1_fifo_stage1_reg$FULL_N ;
  assign WILL_FIRE_RL_qtop_quireToPosit1_stage_1 =
	     CAN_FIRE_RL_qtop_quireToPosit1_stage_1 ;

  // rule RL_qtop_quireToPosit1_stage_2
  assign CAN_FIRE_RL_qtop_quireToPosit1_stage_2 =
	     qtop_quireToPosit1_fifo_stage1_reg$EMPTY_N &&
	     qtop_quireToPosit1_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_qtop_quireToPosit1_stage_2 =
	     CAN_FIRE_RL_qtop_quireToPosit1_stage_2 ;

  // rule RL_ftop_rl_out
  assign CAN_FIRE_RL_ftop_rl_out =
	     ftop_fToP_fifo_output_reg$EMPTY_N && ftop_ffO$FULL_N ;
  assign WILL_FIRE_RL_ftop_rl_out = CAN_FIRE_RL_ftop_rl_out ;

  // rule RL_ftop_fToP_stage_1
  assign CAN_FIRE_RL_ftop_fToP_stage_1 =
	     ftop_fToP_fifo_stage0_reg$EMPTY_N &&
	     ftop_fToP_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_ftop_fToP_stage_1 = CAN_FIRE_RL_ftop_fToP_stage_1 ;

  // rule RL_ptof_rl_out
  assign CAN_FIRE_RL_ptof_rl_out =
	     ptof_ptoF_fifo_output_reg$EMPTY_N && ptof_ffO$FULL_N ;
  assign WILL_FIRE_RL_ptof_rl_out = CAN_FIRE_RL_ptof_rl_out ;

  // rule RL_ptof_ptoF_stage_2
  assign CAN_FIRE_RL_ptof_ptoF_stage_2 =
	     ptof_ptoF_fifo_stage0_reg$EMPTY_N &&
	     ptof_ptoF_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_ptof_ptoF_stage_2 = CAN_FIRE_RL_ptof_ptoF_stage_2 ;

  // inputs to muxes for submodule ports
  assign MUX_fda_divider_intDivide_fifo_output_reg$enq_1__SEL_1 =
	     WILL_FIRE_RL_fda_divider_intDivide_rl_loop2 &&
	     fda_divider_intDivide_rg_numer_44_ULT_0_CONCAT_ETC___d156 ;
  assign MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_1 =
	     WILL_FIRE_RL_fda_divider_intDivide_rl_loop1 &&
	     fda_divider_intDivide_rg_denom2_43_ULE_0_CONCA_ETC___d147 ;
  assign MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_fda && f2__h50452 != 13'd0 ;
  assign MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_3 =
	     WILL_FIRE_RL_fda_divider_intDivide_rl_loop2 &&
	     !fda_divider_intDivide_rg_numer_44_ULT_0_CONCAT_ETC___d156 &&
	     fda_divider_intDivide_rg_numer_44_ULT_fda_divi_ETC___d167 ;
  assign MUX_fda_divider_intDivide_rg_numer$write_1__SEL_2 =
	     WILL_FIRE_RL_fda_divider_intDivide_rl_loop2 &&
	     !fda_divider_intDivide_rg_numer_44_ULT_0_CONCAT_ETC___d156 &&
	     !fda_divider_intDivide_rg_numer_44_ULT_fda_divi_ETC___d167 ;
  assign MUX_fda_divider_intDivide_rg_state$write_1__SEL_2 =
	     WILL_FIRE_RL_fda_divider_intDivide_rl_loop1 &&
	     !fda_divider_intDivide_rg_denom2_43_ULE_0_CONCA_ETC___d147 ;
  assign MUX_opcode_out$enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_ptoq || WILL_FIRE_RL_rl_ptof ||
	     WILL_FIRE_RL_rl_fda ||
	     WILL_FIRE_RL_rl_fma ;
  assign MUX_rg_quire_busy$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_out &&
	     (opcode_out$D_OUT == 3'd0 || opcode_out$D_OUT == 3'd2 ||
	      opcode_out$D_OUT == 3'd1 ||
	      opcode_out$D_OUT == 3'd3 ||
	      opcode_out$D_OUT == 3'd7) ;
  assign MUX_rg_quire_busy$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd6 ;
  assign MUX_fda_divider_intDivide_fifo_output_reg$enq_1__VAL_1 =
	     { fda_divider_intDivide_rg_quo,
	       fda_divider_intDivide_rg_numer[12],
	       x__h14822 } ;
  assign MUX_fda_divider_intDivide_fifo_output_reg$enq_1__VAL_2 =
	     { fda_divider_intDivide_rg_quo, 2'd1 } ;
  assign MUX_fda_divider_intDivide_rg_denom2$write_1__VAL_1 =
	     { fda_divider_intDivide_rg_denom2[35:0], 1'd0 } ;
  assign MUX_fda_divider_intDivide_rg_denom2$write_1__VAL_2 =
	     { 24'd0, f2__h50452 } ;
  assign MUX_fda_divider_intDivide_rg_denom2$write_1__VAL_3 =
	     { 1'd0, fda_divider_intDivide_rg_denom2[36:1] } ;
  assign MUX_fda_divider_intDivide_rg_n$write_1__VAL_1 =
	     { fda_divider_intDivide_rg_n[23:0], 1'd0 } ;
  assign MUX_fda_divider_intDivide_rg_n$write_1__VAL_3 =
	     { 1'd0, fda_divider_intDivide_rg_n[24:1] } ;
  assign MUX_fda_divider_intDivide_rg_numer$write_1__VAL_1 =
	     { f1__h50451, 24'd0 } ;
  assign MUX_fda_divider_intDivide_rg_numer$write_1__VAL_2 =
	     fda_divider_intDivide_rg_numer -
	     fda_divider_intDivide_rg_denom2 ;
  assign MUX_fda_divider_intDivide_rg_quo$write_1__VAL_1 =
	     fda_divider_intDivide_rg_quo + fda_divider_intDivide_rg_n ;
  assign MUX_fda_divider_intDivide_rg_quo$write_1__VAL_2 =
	     (f2__h50452 == 13'd0) ? 25'd33554431 : 25'd0 ;
  assign MUX_fda_divider_intDivide_rg_state$write_1__VAL_3 =
	     (f2__h50452 == 13'd0) ? 2'd3 : 2'd1 ;
  assign MUX_rg_quire$write_1__VAL_1 =
	     (ptoq_positToquire_fifo_stage1_reg$D_OUT[1:0] == 2'd2) ?
	       128'd0 :
	       twos_complement_carry_int_frac__h28795 ;
  assign MUX_rg_quire$write_1__VAL_2 =
	     (x__h15723 | y__h15724) ?
	       128'h80000000000000000000000000000000 :
	       IF_INV_NOT_IF_NOT_fda_adder_fifo_stage0_reg_fi_ETC___d291 ;
  assign MUX_rg_quire$write_1__VAL_3 =
	     (x__h1232 | y__h1233) ?
	       128'h80000000000000000000000000000000 :
	       IF_INV_NOT_IF_NOT_fma_adder_fifo_stage0_reg_fi_ETC___d107 ;

  // inlined wires
  assign opcode_in_rv$port0__write_1 = { 1'd1, ffI$D_OUT[2:0] } ;
  assign opcode_in_rv$port1__read =
	     CAN_FIRE_RL_extract_in ?
	       opcode_in_rv$port0__write_1 :
	       opcode_in_rv ;
  assign opcode_in_rv$EN_port1__write =
	     WILL_FIRE_RL_rl_qtop || WILL_FIRE_RL_rl_ptoq ||
	     WILL_FIRE_RL_rl_ftop ||
	     WILL_FIRE_RL_rl_ptof ||
	     WILL_FIRE_RL_rl_fda ||
	     WILL_FIRE_RL_rl_fma ;
  assign opcode_in_rv$port2__read =
	     opcode_in_rv$EN_port1__write ? 4'd2 : opcode_in_rv$port1__read ;
  assign ffI_f_rv$EN_port0__write =
	     WILL_FIRE_RL_extract_in && ffI$D_OUT[2:0] == 3'd4 ;
  assign ffI_f_rv$port0__write_1 = { 1'd1, ffI$D_OUT[103:72] } ;
  assign ffI_f_rv$port1__read =
	     ffI_f_rv$EN_port0__write ? ffI_f_rv$port0__write_1 : ffI_f_rv ;
  assign ffI_f_rv$port2__read =
	     CAN_FIRE_RL_rl_ftop ? 33'h0AAAAAAAA : ffI_f_rv$port1__read ;

  // register fda_check_quire
  assign fda_check_quire$D_IN = 1'b0 ;
  assign fda_check_quire$EN = 1'b0 ;

  // register fda_divider_intDivide_rg_denom
  assign fda_divider_intDivide_rg_denom$D_IN = f2__h50452 ;
  assign fda_divider_intDivide_rg_denom$EN =
	     MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_2 ;

  // register fda_divider_intDivide_rg_denom2
  always@(MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_1 or
	  MUX_fda_divider_intDivide_rg_denom2$write_1__VAL_1 or
	  MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_2 or
	  MUX_fda_divider_intDivide_rg_denom2$write_1__VAL_2 or
	  MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_3 or
	  MUX_fda_divider_intDivide_rg_denom2$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_1:
	  fda_divider_intDivide_rg_denom2$D_IN =
	      MUX_fda_divider_intDivide_rg_denom2$write_1__VAL_1;
      MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_2:
	  fda_divider_intDivide_rg_denom2$D_IN =
	      MUX_fda_divider_intDivide_rg_denom2$write_1__VAL_2;
      MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_3:
	  fda_divider_intDivide_rg_denom2$D_IN =
	      MUX_fda_divider_intDivide_rg_denom2$write_1__VAL_3;
      default: fda_divider_intDivide_rg_denom2$D_IN =
		   37'h0AAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign fda_divider_intDivide_rg_denom2$EN =
	     WILL_FIRE_RL_fda_divider_intDivide_rl_loop1 &&
	     fda_divider_intDivide_rg_denom2_43_ULE_0_CONCA_ETC___d147 ||
	     WILL_FIRE_RL_rl_fda && f2__h50452 != 13'd0 ||
	     WILL_FIRE_RL_fda_divider_intDivide_rl_loop2 &&
	     !fda_divider_intDivide_rg_numer_44_ULT_0_CONCAT_ETC___d156 &&
	     fda_divider_intDivide_rg_numer_44_ULT_fda_divi_ETC___d167 ;

  // register fda_divider_intDivide_rg_n
  always@(MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_1 or
	  MUX_fda_divider_intDivide_rg_n$write_1__VAL_1 or
	  MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_2 or
	  MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_3 or
	  MUX_fda_divider_intDivide_rg_n$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_1:
	  fda_divider_intDivide_rg_n$D_IN =
	      MUX_fda_divider_intDivide_rg_n$write_1__VAL_1;
      MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_2:
	  fda_divider_intDivide_rg_n$D_IN = 25'd1;
      MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_3:
	  fda_divider_intDivide_rg_n$D_IN =
	      MUX_fda_divider_intDivide_rg_n$write_1__VAL_3;
      default: fda_divider_intDivide_rg_n$D_IN =
		   25'b0101010101010101010101010 /* unspecified value */ ;
    endcase
  end
  assign fda_divider_intDivide_rg_n$EN =
	     WILL_FIRE_RL_fda_divider_intDivide_rl_loop1 &&
	     fda_divider_intDivide_rg_denom2_43_ULE_0_CONCA_ETC___d147 ||
	     WILL_FIRE_RL_rl_fda && f2__h50452 != 13'd0 ||
	     WILL_FIRE_RL_fda_divider_intDivide_rl_loop2 &&
	     !fda_divider_intDivide_rg_numer_44_ULT_0_CONCAT_ETC___d156 &&
	     fda_divider_intDivide_rg_numer_44_ULT_fda_divi_ETC___d167 ;

  // register fda_divider_intDivide_rg_numer
  assign fda_divider_intDivide_rg_numer$D_IN =
	     MUX_fda_divider_intDivide_rg_denom2$write_1__SEL_2 ?
	       MUX_fda_divider_intDivide_rg_numer$write_1__VAL_1 :
	       MUX_fda_divider_intDivide_rg_numer$write_1__VAL_2 ;
  assign fda_divider_intDivide_rg_numer$EN =
	     WILL_FIRE_RL_rl_fda && f2__h50452 != 13'd0 ||
	     WILL_FIRE_RL_fda_divider_intDivide_rl_loop2 &&
	     !fda_divider_intDivide_rg_numer_44_ULT_0_CONCAT_ETC___d156 &&
	     !fda_divider_intDivide_rg_numer_44_ULT_fda_divi_ETC___d167 ;

  // register fda_divider_intDivide_rg_quo
  assign fda_divider_intDivide_rg_quo$D_IN =
	     MUX_fda_divider_intDivide_rg_numer$write_1__SEL_2 ?
	       MUX_fda_divider_intDivide_rg_quo$write_1__VAL_1 :
	       MUX_fda_divider_intDivide_rg_quo$write_1__VAL_2 ;
  assign fda_divider_intDivide_rg_quo$EN =
	     WILL_FIRE_RL_fda_divider_intDivide_rl_loop2 &&
	     !fda_divider_intDivide_rg_numer_44_ULT_0_CONCAT_ETC___d156 &&
	     !fda_divider_intDivide_rg_numer_44_ULT_fda_divi_ETC___d167 ||
	     WILL_FIRE_RL_rl_fda ;

  // register fda_divider_intDivide_rg_state
  always@(MUX_fda_divider_intDivide_fifo_output_reg$enq_1__SEL_1 or
	  MUX_fda_divider_intDivide_rg_state$write_1__SEL_2 or
	  WILL_FIRE_RL_rl_fda or
	  MUX_fda_divider_intDivide_rg_state$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_fda_divider_intDivide_fifo_output_reg$enq_1__SEL_1:
	  fda_divider_intDivide_rg_state$D_IN = 2'd3;
      MUX_fda_divider_intDivide_rg_state$write_1__SEL_2:
	  fda_divider_intDivide_rg_state$D_IN = 2'd2;
      WILL_FIRE_RL_rl_fda:
	  fda_divider_intDivide_rg_state$D_IN =
	      MUX_fda_divider_intDivide_rg_state$write_1__VAL_3;
      default: fda_divider_intDivide_rg_state$D_IN =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  assign fda_divider_intDivide_rg_state$EN =
	     WILL_FIRE_RL_fda_divider_intDivide_rl_loop2 &&
	     fda_divider_intDivide_rg_numer_44_ULT_0_CONCAT_ETC___d156 ||
	     WILL_FIRE_RL_fda_divider_intDivide_rl_loop1 &&
	     !fda_divider_intDivide_rg_denom2_43_ULE_0_CONCA_ETC___d147 ||
	     WILL_FIRE_RL_rl_fda ;

  // register ffI_f_rv
  assign ffI_f_rv$D_IN = ffI_f_rv$port2__read ;
  assign ffI_f_rv$EN = 1'b1 ;

  // register fma_check_quire
  assign fma_check_quire$D_IN = 1'b0 ;
  assign fma_check_quire$EN = 1'b0 ;

  // register opcode_in_rv
  assign opcode_in_rv$D_IN = opcode_in_rv$port2__read ;
  assign opcode_in_rv$EN = 1'b1 ;

  // register rg_quire
  always@(WILL_FIRE_RL_ptoq_positToquire_stage_2 or
	  MUX_rg_quire$write_1__VAL_1 or
	  WILL_FIRE_RL_fda_adder_stage_1 or
	  MUX_rg_quire$write_1__VAL_2 or
	  WILL_FIRE_RL_fma_adder_stage_1 or MUX_rg_quire$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_ptoq_positToquire_stage_2:
	rg_quire$D_IN = MUX_rg_quire$write_1__VAL_1;
    WILL_FIRE_RL_fda_adder_stage_1:
	rg_quire$D_IN = MUX_rg_quire$write_1__VAL_2;
    WILL_FIRE_RL_fma_adder_stage_1:
	rg_quire$D_IN = MUX_rg_quire$write_1__VAL_3;
    default: rg_quire$D_IN =
		 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign rg_quire$EN =
	     WILL_FIRE_RL_fma_adder_stage_1 ||
	     WILL_FIRE_RL_fda_adder_stage_1 ||
	     WILL_FIRE_RL_ptoq_positToquire_stage_2 ;

  // register rg_quire_busy
  assign rg_quire_busy$D_IN =
	     !MUX_rg_quire_busy$write_1__SEL_1 &&
	     !MUX_rg_quire_busy$write_1__SEL_2 ;
  assign rg_quire_busy$EN =
	     WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd6 ||
	     WILL_FIRE_RL_rl_out &&
	     (opcode_out$D_OUT == 3'd0 || opcode_out$D_OUT == 3'd2 ||
	      opcode_out$D_OUT == 3'd1 ||
	      opcode_out$D_OUT == 3'd3 ||
	      opcode_out$D_OUT == 3'd7) ||
	     WILL_FIRE_RL_rl_qtop ||
	     WILL_FIRE_RL_rl_ptoq ||
	     WILL_FIRE_RL_rl_fda ||
	     WILL_FIRE_RL_rl_fma ;

  // submodule extracter1_fifo_output_reg
  assign extracter1_fifo_output_reg$D_IN =
	     { (ffI$D_OUT[86:72] == 15'd0 && !ffI$D_OUT[87]) ?
		 2'd2 :
		 ((ffI$D_OUT[86:72] == 15'd0 && ffI$D_OUT[87]) ? 2'd1 : 2'd0),
	       ffI$D_OUT[87],
	       IF_ffI_first__75_BITS_86_TO_72_07_EQ_0_08_AND__ETC___d687 } ;
  assign extracter1_fifo_output_reg$ENQ =
	     WILL_FIRE_RL_extract_in &&
	     (ffI$D_OUT[2:0] == 3'd1 || ffI$D_OUT[2:0] == 3'd3 ||
	      ffI$D_OUT[2:0] == 3'd2 ||
	      ffI$D_OUT[2:0] == 3'd0 ||
	      ffI$D_OUT[2:0] == 3'd5 ||
	      ffI$D_OUT[2:0] == 3'd7) ;
  assign extracter1_fifo_output_reg$DEQ = MUX_opcode_out$enq_1__SEL_1 ;
  assign extracter1_fifo_output_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage0_reg
  assign extracter1_fifo_stage0_reg$D_IN = 18'h0 ;
  assign extracter1_fifo_stage0_reg$ENQ = 1'b0 ;
  assign extracter1_fifo_stage0_reg$DEQ = 1'b0 ;
  assign extracter1_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage1_reg
  assign extracter1_fifo_stage1_reg$D_IN = 25'h0 ;
  assign extracter1_fifo_stage1_reg$ENQ = 1'b0 ;
  assign extracter1_fifo_stage1_reg$DEQ = 1'b0 ;
  assign extracter1_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage2_reg
  assign extracter1_fifo_stage2_reg$D_IN = 22'h0 ;
  assign extracter1_fifo_stage2_reg$ENQ = 1'b0 ;
  assign extracter1_fifo_stage2_reg$DEQ = 1'b0 ;
  assign extracter1_fifo_stage2_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_output_reg
  assign extracter2_fifo_output_reg$D_IN =
	     { (IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR_ffI_ETC___d693[14:0] ==
		15'd0 &&
		!IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR_ffI_ETC___d693[15]) ?
		 2'd2 :
		 ((IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR_ffI_ETC___d693[14:0] ==
		   15'd0 &&
		   IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR_ffI_ETC___d693[15]) ?
		    2'd1 :
		    2'd0),
	       IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR_ffI_ETC___d693[15],
	       IF_IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR__ETC___d874 } ;
  assign extracter2_fifo_output_reg$ENQ =
	     WILL_FIRE_RL_extract_in &&
	     (ffI$D_OUT[2:0] == 3'd1 || ffI$D_OUT[2:0] == 3'd3 ||
	      ffI$D_OUT[2:0] == 3'd2 ||
	      ffI$D_OUT[2:0] == 3'd0) ;
  assign extracter2_fifo_output_reg$DEQ =
	     WILL_FIRE_RL_rl_fda || WILL_FIRE_RL_rl_fma ;
  assign extracter2_fifo_output_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage0_reg
  assign extracter2_fifo_stage0_reg$D_IN = 18'h0 ;
  assign extracter2_fifo_stage0_reg$ENQ = 1'b0 ;
  assign extracter2_fifo_stage0_reg$DEQ = 1'b0 ;
  assign extracter2_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage1_reg
  assign extracter2_fifo_stage1_reg$D_IN = 25'h0 ;
  assign extracter2_fifo_stage1_reg$ENQ = 1'b0 ;
  assign extracter2_fifo_stage1_reg$DEQ = 1'b0 ;
  assign extracter2_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage2_reg
  assign extracter2_fifo_stage2_reg$D_IN = 22'h0 ;
  assign extracter2_fifo_stage2_reg$ENQ = 1'b0 ;
  assign extracter2_fifo_stage2_reg$DEQ = 1'b0 ;
  assign extracter2_fifo_stage2_reg$CLR = 1'b0 ;

  // submodule fda_adder_fifo_output_reg
  assign fda_adder_fifo_output_reg$ENQ = CAN_FIRE_RL_fda_adder_stage_1 ;
  assign fda_adder_fifo_output_reg$DEQ = CAN_FIRE_RL_fda_rl_out ;
  assign fda_adder_fifo_output_reg$CLR = 1'b0 ;

  // submodule fda_adder_fifo_stage0_reg
  assign fda_adder_fifo_stage0_reg$D_IN =
	     { IF_NOT_rg_quire_12_BIT_127_13_14_AND_NOT_fda_d_ETC___d308,
	       x__h28250,
	       x__h28255,
	       IF_rg_quire_12_EQ_0_33_THEN_2_ELSE_0___d134,
	       fda_divider_fifo_output_reg$D_OUT[132:130] } ;
  assign fda_adder_fifo_stage0_reg$ENQ = CAN_FIRE_RL_fda_rl_connect1 ;
  assign fda_adder_fifo_stage0_reg$DEQ = CAN_FIRE_RL_fda_adder_stage_1 ;
  assign fda_adder_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule fda_divider_fifo_output_reg
  assign fda_divider_fifo_output_reg$D_IN =
	     { (twos_complement_carry_int_frac__h14956 == 128'd0 &&
		fda_divider_fifo_stage0_reg$D_OUT[9:8] == 2'd0) ?
		 2'd2 :
		 fda_divider_fifo_stage0_reg$D_OUT[9:8],
	       fda_divider_fifo_stage0_reg$D_OUT[10],
	       twos_complement_carry_int_frac__h14956,
	       IF_fda_divider_fifo_stage0_reg_first__82_BIT_6_ETC___d242 } ;
  assign fda_divider_fifo_output_reg$ENQ = CAN_FIRE_RL_fda_divider_stage_1 ;
  assign fda_divider_fifo_output_reg$DEQ = CAN_FIRE_RL_fda_rl_connect1 ;
  assign fda_divider_fifo_output_reg$CLR = 1'b0 ;

  // submodule fda_divider_fifo_stage0_reg
  assign fda_divider_fifo_stage0_reg$D_IN =
	     { x__h51353,
	       (extracter1_fifo_output_reg$D_OUT[20:19] == 2'd2 &&
		extracter2_fifo_output_reg$D_OUT[20:19] != 2'd2 ||
		extracter1_fifo_output_reg$D_OUT[20:19] != 2'd1 &&
		extracter2_fifo_output_reg$D_OUT[20:19] == 2'd1) ?
		 2'd2 :
		 ((extracter1_fifo_output_reg$D_OUT[20:19] == 2'd1 &&
		   extracter2_fifo_output_reg$D_OUT[20:19] != 2'd1 ||
		   extracter1_fifo_output_reg$D_OUT[20:19] != 2'd2 &&
		   extracter2_fifo_output_reg$D_OUT[20:19] == 2'd2) ?
		    2'd1 :
		    2'd0),
	       extracter1_fifo_output_reg_first__20_BIT_18_35_ETC___d1000 } ;
  assign fda_divider_fifo_stage0_reg$ENQ = CAN_FIRE_RL_rl_fda ;
  assign fda_divider_fifo_stage0_reg$DEQ = CAN_FIRE_RL_fda_divider_stage_1 ;
  assign fda_divider_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule fda_divider_intDivide_fifo_output_reg
  assign fda_divider_intDivide_fifo_output_reg$D_IN =
	     MUX_fda_divider_intDivide_fifo_output_reg$enq_1__SEL_1 ?
	       MUX_fda_divider_intDivide_fifo_output_reg$enq_1__VAL_1 :
	       MUX_fda_divider_intDivide_fifo_output_reg$enq_1__VAL_2 ;
  assign fda_divider_intDivide_fifo_output_reg$ENQ =
	     WILL_FIRE_RL_fda_divider_intDivide_rl_loop2 &&
	     fda_divider_intDivide_rg_numer_44_ULT_0_CONCAT_ETC___d156 ||
	     WILL_FIRE_RL_rl_fda && f2__h50452 == 13'd0 ;
  assign fda_divider_intDivide_fifo_output_reg$DEQ =
	     CAN_FIRE_RL_fda_divider_stage_1 ;
  assign fda_divider_intDivide_fifo_output_reg$CLR = 1'b0 ;

  // submodule fda_ffO
  assign fda_ffO$ENQ = CAN_FIRE_RL_fda_rl_out ;
  assign fda_ffO$DEQ =
	     WILL_FIRE_RL_rl_out &&
	     (opcode_out$D_OUT == 3'd1 || opcode_out$D_OUT == 3'd3) ;
  assign fda_ffO$CLR = 1'b0 ;

  // submodule ffI
  assign ffI$D_IN =
	     { CASE_server_core_request_put_BITS_137_TO_136_0_ETC__q28,
	       server_core_request_put[135:72],
	       CASE_server_core_request_put_BITS_71_TO_70_0_s_ETC__q29,
	       server_core_request_put[69:0] } ;
  assign ffI$ENQ = EN_server_core_request_put ;
  assign ffI$DEQ = CAN_FIRE_RL_extract_in ;
  assign ffI$CLR = 1'b0 ;

  // submodule ffO
  always@(opcode_out$D_OUT or
	  normalizer_fifo_output_reg$D_OUT or ptof_ffO$D_OUT)
  begin
    case (opcode_out$D_OUT)
      3'd0, 3'd1, 3'd2, 3'd3, 3'd7: ffO$D_IN = 71'h555555555555400000;
      3'd5: ffO$D_IN = { 34'h1AAAAAAAA, ptof_ffO$D_OUT, 5'd0 };
      default: ffO$D_IN =
		   { 49'h12AAAAAAAAAAA,
		     normalizer_fifo_output_reg$D_OUT[19:3],
		     normalizer_fifo_output_reg$D_OUT[19],
		     1'd0,
		     normalizer_fifo_output_reg$D_OUT[2:1] == 2'd1,
		     normalizer_fifo_output_reg$D_OUT[2:1] == 2'd2 &&
		     normalizer_fifo_output_reg$D_OUT[0],
		     normalizer_fifo_output_reg$D_OUT[0] };
    endcase
  end
  assign ffO$ENQ = WILL_FIRE_RL_rl_out ;
  assign ffO$DEQ = EN_server_core_response_get ;
  assign ffO$CLR = 1'b0 ;

  // submodule fma_adder_fifo_output_reg
  assign fma_adder_fifo_output_reg$ENQ = CAN_FIRE_RL_fma_adder_stage_1 ;
  assign fma_adder_fifo_output_reg$DEQ = CAN_FIRE_RL_fma_rl_out ;
  assign fma_adder_fifo_output_reg$CLR = 1'b0 ;

  // submodule fma_adder_fifo_stage0_reg
  assign fma_adder_fifo_stage0_reg$D_IN =
	     { IF_NOT_rg_quire_12_BIT_127_13_14_AND_NOT_fma_m_ETC___d127,
	       x__h13785,
	       x__h13790,
	       IF_rg_quire_12_EQ_0_33_THEN_2_ELSE_0___d134,
	       fma_multiplier_fifo_output_reg$D_OUT[132:130] } ;
  assign fma_adder_fifo_stage0_reg$ENQ = CAN_FIRE_RL_fma_rl_connect1 ;
  assign fma_adder_fifo_stage0_reg$DEQ = CAN_FIRE_RL_fma_adder_stage_1 ;
  assign fma_adder_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule fma_ffO
  assign fma_ffO$ENQ = CAN_FIRE_RL_fma_rl_out ;
  assign fma_ffO$DEQ =
	     WILL_FIRE_RL_rl_out &&
	     (opcode_out$D_OUT == 3'd0 || opcode_out$D_OUT == 3'd2) ;
  assign fma_ffO$CLR = 1'b0 ;

  // submodule fma_multiplier_fifo_output_reg
  assign fma_multiplier_fifo_output_reg$D_IN =
	     { (twos_complement_carry_int_frac__h437 == 128'd0 &&
		fma_multiplier_fifo_stage0_reg$D_OUT[35:34] == 2'd0) ?
		 2'd2 :
		 fma_multiplier_fifo_stage0_reg$D_OUT[35:34],
	       fma_multiplier_fifo_stage0_reg$D_OUT[36],
	       twos_complement_carry_int_frac__h437,
	       x__h814,
	       x__h858 } ;
  assign fma_multiplier_fifo_output_reg$ENQ =
	     CAN_FIRE_RL_fma_multiplier_stage_1 ;
  assign fma_multiplier_fifo_output_reg$DEQ = CAN_FIRE_RL_fma_rl_connect1 ;
  assign fma_multiplier_fifo_output_reg$CLR = 1'b0 ;

  // submodule fma_multiplier_fifo_stage0_reg
  assign fma_multiplier_fifo_stage0_reg$D_IN =
	     { x__h50359,
	       (extracter1_fifo_output_reg$D_OUT[20:19] == 2'd2 &&
		extracter2_fifo_output_reg$D_OUT[20:19] == 2'd2) ?
		 2'd2 :
		 ((extracter1_fifo_output_reg$D_OUT[20:19] == 2'd1 ||
		   extracter2_fifo_output_reg$D_OUT[20:19] == 2'd1) ?
		    2'd1 :
		    2'd0),
	       extracter1_fifo_output_reg_first__20_BIT_18_35_ETC___d957 } ;
  assign fma_multiplier_fifo_stage0_reg$ENQ = CAN_FIRE_RL_rl_fma ;
  assign fma_multiplier_fifo_stage0_reg$DEQ =
	     CAN_FIRE_RL_fma_multiplier_stage_1 ;
  assign fma_multiplier_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule ftop_fToP_fifo_output_reg
  assign ftop_fToP_fifo_output_reg$D_IN =
	     { ftop_fToP_fifo_stage0_reg$D_OUT[28:19],
	       x_frac__h30306,
	       x__h30432,
	       x__h30509 } ;
  assign ftop_fToP_fifo_output_reg$ENQ = CAN_FIRE_RL_ftop_fToP_stage_1 ;
  assign ftop_fToP_fifo_output_reg$DEQ = CAN_FIRE_RL_ftop_rl_out ;
  assign ftop_fToP_fifo_output_reg$CLR = 1'b0 ;

  // submodule ftop_fToP_fifo_stage0_reg
  assign ftop_fToP_fifo_stage0_reg$D_IN =
	     { ffI_f_rv$port1__read[31],
	       (ffI_f_rv$port1__read[30:23] == 8'd255 &&
		ffI_f_rv$port1__read[22:0] == 23'd0) ?
		 2'd1 :
		 ((ffI_f_rv$port1__read[30:23] == 8'd0 &&
		   ffI_f_rv$port1__read[22:0] == 23'd0) ?
		    2'd2 :
		    2'd0),
	       x__h52213,
	       IF_0_CONCAT_ffI_f_rv_port1__read__026_BITS_30__ETC___d1054,
	       ffI_f_rv$port1__read[22:11],
	       IF_0_CONCAT_ffI_f_rv_port1__read__026_BITS_30__ETC___d1065,
	       ffI_f_rv$port1__read[10],
	       x__h52376 } ;
  assign ftop_fToP_fifo_stage0_reg$ENQ = CAN_FIRE_RL_rl_ftop ;
  assign ftop_fToP_fifo_stage0_reg$DEQ = CAN_FIRE_RL_ftop_fToP_stage_1 ;
  assign ftop_fToP_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule ftop_ffO
  assign ftop_ffO$D_IN = ftop_fToP_fifo_output_reg$D_OUT ;
  assign ftop_ffO$ENQ = CAN_FIRE_RL_ftop_rl_out ;
  assign ftop_ffO$DEQ = WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd4 ;
  assign ftop_ffO$CLR = 1'b0 ;

  // submodule need_normalize
  assign need_normalize$D_IN = 1'b0 ;
  assign need_normalize$ENQ = 1'b0 ;
  assign need_normalize$DEQ = 1'b0 ;
  assign need_normalize$CLR = 1'b0 ;

  // submodule normalizer_fifo_output_reg
  assign normalizer_fifo_output_reg$D_IN =
	     (opcode_norm$D_OUT == 3'd4) ?
	       { ftop_ffO$D_OUT[20],
		 output_regf_out_posit__h75066,
		 ftop_ffO$D_OUT[22:21],
		 flag_prev_truncate__h75044 - _theResult____h75045 ||
		 a__h75082 == 15'd0 &&
		 NOT_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_ETC___d1541 } :
	       { qtop_ffO$D_OUT[20],
		 output_regf_out_posit__h78676,
		 qtop_ffO$D_OUT[22:21],
		 flag_prev_truncate__h78658 - _theResult____h78659 ||
		 a__h78692 == 15'd0 &&
		 NOT_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_ETC___d1715 } ;
  assign normalizer_fifo_output_reg$ENQ =
	     WILL_FIRE_RL_rl_norm &&
	     (opcode_norm$D_OUT == 3'd4 || opcode_norm$D_OUT == 3'd6) ;
  assign normalizer_fifo_output_reg$DEQ =
	     WILL_FIRE_RL_rl_out &&
	     (opcode_out$D_OUT == 3'd4 || opcode_out$D_OUT == 3'd6) ;
  assign normalizer_fifo_output_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage0_reg
  assign normalizer_fifo_stage0_reg$D_IN = 34'h0 ;
  assign normalizer_fifo_stage0_reg$ENQ = 1'b0 ;
  assign normalizer_fifo_stage0_reg$DEQ = 1'b0 ;
  assign normalizer_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage1_reg
  assign normalizer_fifo_stage1_reg$D_IN = 38'h0 ;
  assign normalizer_fifo_stage1_reg$ENQ = 1'b0 ;
  assign normalizer_fifo_stage1_reg$DEQ = 1'b0 ;
  assign normalizer_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage2_reg
  assign normalizer_fifo_stage2_reg$D_IN = 20'h0 ;
  assign normalizer_fifo_stage2_reg$ENQ = 1'b0 ;
  assign normalizer_fifo_stage2_reg$DEQ = 1'b0 ;
  assign normalizer_fifo_stage2_reg$CLR = 1'b0 ;

  // submodule opcode_norm
  assign opcode_norm$D_IN = opcode_in_rv$port1__read[2:0] ;
  assign opcode_norm$ENQ = WILL_FIRE_RL_rl_qtop || WILL_FIRE_RL_rl_ftop ;
  assign opcode_norm$DEQ = WILL_FIRE_RL_rl_norm ;
  assign opcode_norm$CLR = 1'b0 ;

  // submodule opcode_out
  assign opcode_out$D_IN =
	     MUX_opcode_out$enq_1__SEL_1 ?
	       opcode_in_rv$port1__read[2:0] :
	       opcode_norm$D_OUT ;
  assign opcode_out$ENQ =
	     WILL_FIRE_RL_rl_ptoq || WILL_FIRE_RL_rl_ptof ||
	     WILL_FIRE_RL_rl_fda ||
	     WILL_FIRE_RL_rl_fma ||
	     WILL_FIRE_RL_rl_norm ;
  assign opcode_out$DEQ = CAN_FIRE_RL_rl_out ;
  assign opcode_out$CLR = 1'b0 ;

  // submodule ptof_ffO
  assign ptof_ffO$D_IN = ptof_ptoF_fifo_output_reg$D_OUT ;
  assign ptof_ffO$ENQ = CAN_FIRE_RL_ptof_rl_out ;
  assign ptof_ffO$DEQ = WILL_FIRE_RL_rl_out && opcode_out$D_OUT == 3'd5 ;
  assign ptof_ffO$CLR = 1'b0 ;

  // submodule ptof_ptoF_fifo_output_reg
  always@(ptof_ptoF_fifo_stage0_reg$D_OUT or
	  float_no__h31060 or add_round__h31061)
  begin
    case (ptof_ptoF_fifo_stage0_reg$D_OUT[40:39])
      2'd1: ptof_ptoF_fifo_output_reg$D_IN = 32'hFF800000;
      2'd2: ptof_ptoF_fifo_output_reg$D_IN = 32'd0;
      default: ptof_ptoF_fifo_output_reg$D_IN =
		   float_no__h31060 + { 31'd0, add_round__h31061 };
    endcase
  end
  assign ptof_ptoF_fifo_output_reg$ENQ = CAN_FIRE_RL_ptof_ptoF_stage_2 ;
  assign ptof_ptoF_fifo_output_reg$DEQ = CAN_FIRE_RL_ptof_rl_out ;
  assign ptof_ptoF_fifo_output_reg$CLR = 1'b0 ;

  // submodule ptof_ptoF_fifo_stage0_reg
  assign ptof_ptoF_fifo_stage0_reg$D_IN =
	     { extracter1_fifo_output_reg$D_OUT[18],
	       extracter1_fifo_output_reg$D_OUT[20:19],
	       IF_SEXT_extracter1_fifo_output_reg_first__20_B_ETC___d1012,
	       stage0_regf_frac__h51620,
	       IF_SEXT_extracter1_fifo_output_reg_first__20_B_ETC___d1023,
	       2'd1 } ;
  assign ptof_ptoF_fifo_stage0_reg$ENQ = CAN_FIRE_RL_rl_ptof ;
  assign ptof_ptoF_fifo_stage0_reg$DEQ = CAN_FIRE_RL_ptof_ptoF_stage_2 ;
  assign ptof_ptoF_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule ptoq_ffO
  assign ptoq_ffO$ENQ = CAN_FIRE_RL_ptoq_rl_out ;
  assign ptoq_ffO$DEQ = WILL_FIRE_RL_rl_out && opcode_out$D_OUT == 3'd7 ;
  assign ptoq_ffO$CLR = 1'b0 ;

  // submodule ptoq_positToquire_fifo_output_reg
  assign ptoq_positToquire_fifo_output_reg$ENQ =
	     CAN_FIRE_RL_ptoq_positToquire_stage_2 ;
  assign ptoq_positToquire_fifo_output_reg$DEQ = CAN_FIRE_RL_ptoq_rl_out ;
  assign ptoq_positToquire_fifo_output_reg$CLR = 1'b0 ;

  // submodule ptoq_positToquire_fifo_stage0_reg
  assign ptoq_positToquire_fifo_stage0_reg$D_IN = 21'h0 ;
  assign ptoq_positToquire_fifo_stage0_reg$ENQ = 1'b0 ;
  assign ptoq_positToquire_fifo_stage0_reg$DEQ = 1'b0 ;
  assign ptoq_positToquire_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule ptoq_positToquire_fifo_stage1_reg
  assign ptoq_positToquire_fifo_stage1_reg$D_IN =
	     { extracter1_fifo_output_reg$D_OUT[18],
	       int_frac__h52552,
	       extracter1_fifo_output_reg$D_OUT[20:19] } ;
  assign ptoq_positToquire_fifo_stage1_reg$ENQ = CAN_FIRE_RL_rl_ptoq ;
  assign ptoq_positToquire_fifo_stage1_reg$DEQ =
	     CAN_FIRE_RL_ptoq_positToquire_stage_2 ;
  assign ptoq_positToquire_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule qtop_ffO
  assign qtop_ffO$D_IN = qtop_quireToPosit1_fifo_output_reg$D_OUT ;
  assign qtop_ffO$ENQ = CAN_FIRE_RL_qtop_rl_out ;
  assign qtop_ffO$DEQ = MUX_rg_quire_busy$write_1__SEL_2 ;
  assign qtop_ffO$CLR = 1'b0 ;

  // submodule qtop_quireToPosit1_fifo_output_reg
  assign qtop_quireToPosit1_fifo_output_reg$D_IN =
	     qtop_quireToPosit1_fifo_stage1_reg$D_OUT ;
  assign qtop_quireToPosit1_fifo_output_reg$ENQ =
	     CAN_FIRE_RL_qtop_quireToPosit1_stage_2 ;
  assign qtop_quireToPosit1_fifo_output_reg$DEQ = CAN_FIRE_RL_qtop_rl_out ;
  assign qtop_quireToPosit1_fifo_output_reg$CLR = 1'b0 ;

  // submodule qtop_quireToPosit1_fifo_stage0_reg
  assign qtop_quireToPosit1_fifo_stage0_reg$D_IN =
	     { rg_quire[127],
	       (!rg_quire[127] && rg_quire[126:0] == 127'd0) ? 2'd2 : 2'd0,
	       rg_quire_12_BIT_127_13_AND_rg_quire_12_BITS_12_ETC___d1366 } ;
  assign qtop_quireToPosit1_fifo_stage0_reg$ENQ = CAN_FIRE_RL_rl_qtop ;
  assign qtop_quireToPosit1_fifo_stage0_reg$DEQ =
	     CAN_FIRE_RL_qtop_quireToPosit1_stage_1 ;
  assign qtop_quireToPosit1_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule qtop_quireToPosit1_fifo_stage1_reg
  assign qtop_quireToPosit1_fifo_stage1_reg$D_IN =
	     { qtop_quireToPosit1_fifo_stage0_reg$D_OUT[136:127],
	       stage1_regf_frac__h29416,
	       x__h29689,
	       x__h29732 } ;
  assign qtop_quireToPosit1_fifo_stage1_reg$ENQ =
	     CAN_FIRE_RL_qtop_quireToPosit1_stage_1 ;
  assign qtop_quireToPosit1_fifo_stage1_reg$DEQ =
	     CAN_FIRE_RL_qtop_quireToPosit1_stage_2 ;
  assign qtop_quireToPosit1_fifo_stage1_reg$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_0_CONCAT_IF_IF_rg_quire_12_BIT_127_13_THEN__ETC___d1360 =
	     (_0_CONCAT_IF_IF_rg_quire_12_BIT_127_13_THEN_0_M_ETC___d1355[7] &&
	      _71_MINUS_0_CONCAT_IF_IF_rg_quire_12_BIT_127_13_ETC___d1357[7]) ?
	       8'd127 :
	       _71_MINUS_0_CONCAT_IF_IF_rg_quire_12_BIT_127_13_ETC___d1357 ;
  assign IF_0_CONCAT_ffI_f_rv_port1__read__026_BITS_30__ETC___d1054 =
	     _0_CONCAT_ffI_f_rv_port1__read__026_BITS_30_TO__ETC___d1050 ?
	       6'd36 :
	       (_0_CONCAT_ffI_f_rv_port1__read__026_BITS_30_TO__ETC___d1051 ?
		  _0_CONCAT_ffI_f_rv_port1__read__026_BITS_30_TO__ETC___d1048[5:0] :
		  6'd28) ;
  assign IF_0_CONCAT_ffI_f_rv_port1__read__026_BITS_30__ETC___d1065 =
	     _0_CONCAT_ffI_f_rv_port1__read__026_BITS_30_TO__ETC___d1050 ?
	       IF_0_CONCAT_ffI_f_rv_port1__read__026_BITS_30__ETC__q26[4:0] :
	       (_0_CONCAT_ffI_f_rv_port1__read__026_BITS_30_TO__ETC___d1051 ?
		  5'd0 :
		  IF_0_CONCAT_ffI_f_rv_port1__read__026_BITS_30__ETC__q27[4:0]) ;
  assign IF_0_CONCAT_ffI_f_rv_port1__read__026_BITS_30__ETC__q26 =
	     ((_0_CONCAT_ffI_f_rv_port1__read__026_BITS_30_TO__ETC___d1056 ^
	       8'h80) <=
	      8'd113) ?
	       8'd241 :
	       _0_CONCAT_ffI_f_rv_port1__read__026_BITS_30_TO__ETC___d1056 ;
  assign IF_0_CONCAT_ffI_f_rv_port1__read__026_BITS_30__ETC__q27 =
	     ((_0_CONCAT_ffI_f_rv_port1__read__026_BITS_30_TO__ETC___d1060 ^
	       8'h80) <=
	      8'd143) ?
	       _0_CONCAT_ffI_f_rv_port1__read__026_BITS_30_TO__ETC___d1060 :
	       8'd15 ;
  assign IF_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388__ETC___d1421 =
	     (_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_THE_ETC___d1407 ==
	      4'd0) ?
	       _14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_THE_ETC___d1407 :
	       _14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_THE_ETC___d1407 -
	       4'd1 ;
  assign IF_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562__ETC___d1595 =
	     (_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_THE_ETC___d1581 ==
	      4'd0) ?
	       _14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_THE_ETC___d1581 :
	       _14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_THE_ETC___d1581 -
	       4'd1 ;
  assign IF_IF_14_MINUS_IF_ftop_ffO_first__383_BIT_19_3_ETC___d1480 =
	     (shift_new0__h75035 == 2'd0) ?
	       !ftop_ffO$D_OUT[1] :
	       !ftop_ffO_first__383_BITS_13_TO_2_436_BIT_IF_14_ETC___d1454 ;
  assign IF_IF_14_MINUS_IF_qtop_ffO_first__557_BIT_19_5_ETC___d1654 =
	     (shift_new0__h78649 == 2'd0) ?
	       !qtop_ffO$D_OUT[1] :
	       !qtop_ffO_first__557_BITS_13_TO_2_610_BIT_IF_14_ETC___d1628 ;
  assign IF_IF_IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84__ETC___d833 =
	     new_inp__h39172[14] ?
	       ((!INV_new_inp9172__q10[14] && !INV_new_inp9172__q10[13] &&
		 !INV_new_inp9172__q10[12] &&
		 !INV_new_inp9172__q10[11] &&
		 !INV_new_inp9172__q10[10] &&
		 !INV_new_inp9172__q10[9] &&
		 !INV_new_inp9172__q10[8] &&
		 !INV_new_inp9172__q10[7] &&
		 !INV_new_inp9172__q10[6] &&
		 !INV_new_inp9172__q10[5] &&
		 !INV_new_inp9172__q10[4] &&
		 !INV_new_inp9172__q10[3] &&
		 !INV_new_inp9172__q10[2] &&
		 !INV_new_inp9172__q10[1] &&
		 !INV_new_inp9172__q10[0]) ?
		  4'd15 :
		  4'd14) -
	       x__h39786 :
	       ((!new_inp__h39172[13] && !new_inp__h39172[12] &&
		 !new_inp__h39172[11] &&
		 !new_inp__h39172[10] &&
		 !new_inp__h39172[9] &&
		 !new_inp__h39172[8] &&
		 !new_inp__h39172[7] &&
		 !new_inp__h39172[6] &&
		 !new_inp__h39172[5] &&
		 !new_inp__h39172[4] &&
		 !new_inp__h39172[3] &&
		 !new_inp__h39172[2] &&
		 !new_inp__h39172[1] &&
		 !new_inp__h39172[0]) ?
		  4'd15 :
		  4'd14) -
	       x__h41924 ;
  assign IF_IF_NOT_IF_ftop_ffO_first__383_BIT_19_388_TH_ETC___d1508 =
	     (b__h75259[14] &&
	      !IF_NOT_IF_ftop_ffO_first__383_BIT_19_388_THEN__ETC___d1504[14]) ?
	       15'd32767 :
	       IF_NOT_IF_ftop_ffO_first__383_BIT_19_388_THEN__ETC___d1504 ;
  assign IF_IF_NOT_IF_qtop_ffO_first__557_BIT_19_562_TH_ETC___d1682 =
	     (b__h78869[14] &&
	      !IF_NOT_IF_qtop_ffO_first__557_BIT_19_562_THEN__ETC___d1678[14]) ?
	       15'd32767 :
	       IF_NOT_IF_qtop_ffO_first__557_BIT_19_562_THEN__ETC___d1678 ;
  assign IF_IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR__ETC___d874 =
	     (IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR_ffI_ETC___d693[14:0] ==
	      15'd0 &&
	      !IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR_ffI_ETC___d693[15]) ?
	       18'd0 :
	       { SEXT_IF_IF_IF_ffI_first__75_BITS_2_TO_0_76_EQ__ETC___d772 +
		 { 5'd0, expo__h39179 },
		 frac__h39180 } ;
  assign IF_IF_ffI_first__75_BIT_87_09_THEN_0_MINUS_ffI_ETC___d646 =
	     new_inp__h33898[14] ?
	       ((!INV_new_inp3898__q2[14] && !INV_new_inp3898__q2[13] &&
		 !INV_new_inp3898__q2[12] &&
		 !INV_new_inp3898__q2[11] &&
		 !INV_new_inp3898__q2[10] &&
		 !INV_new_inp3898__q2[9] &&
		 !INV_new_inp3898__q2[8] &&
		 !INV_new_inp3898__q2[7] &&
		 !INV_new_inp3898__q2[6] &&
		 !INV_new_inp3898__q2[5] &&
		 !INV_new_inp3898__q2[4] &&
		 !INV_new_inp3898__q2[3] &&
		 !INV_new_inp3898__q2[2] &&
		 !INV_new_inp3898__q2[1] &&
		 !INV_new_inp3898__q2[0]) ?
		  4'd15 :
		  4'd14) -
	       x__h34441 :
	       ((!new_inp__h33898[13] && !new_inp__h33898[12] &&
		 !new_inp__h33898[11] &&
		 !new_inp__h33898[10] &&
		 !new_inp__h33898[9] &&
		 !new_inp__h33898[8] &&
		 !new_inp__h33898[7] &&
		 !new_inp__h33898[6] &&
		 !new_inp__h33898[5] &&
		 !new_inp__h33898[4] &&
		 !new_inp__h33898[3] &&
		 !new_inp__h33898[2] &&
		 !new_inp__h33898[1] &&
		 !new_inp__h33898[0]) ?
		  4'd15 :
		  4'd14) -
	       x__h36579 ;
  assign IF_INV_NOT_IF_NOT_fda_adder_fifo_stage0_reg_fi_ETC___d291 =
	     (all_bits_0__h15680 & y__h22417 &&
	      fda_adder_fifo_stage0_reg$D_OUT[4:3] == 2'd0 &&
	      fda_adder_fifo_stage0_reg$D_OUT[2:1] == 2'd0) ?
	       128'd0 :
	       x__h22441 ;
  assign IF_INV_NOT_IF_NOT_fma_adder_fifo_stage0_reg_fi_ETC___d107 =
	     (all_bits_0__h1189 & y__h7948 &&
	      fma_adder_fifo_stage0_reg$D_OUT[4:3] == 2'd0 &&
	      fma_adder_fifo_stage0_reg$D_OUT[2:1] == 2'd0) ?
	       128'd0 :
	       x__h7972 ;
  assign IF_NOT_IF_ftop_ffO_first__383_BIT_19_388_THEN__ETC___d1504 =
	     b__h75259 + b__h77801 ;
  assign IF_NOT_IF_qtop_ffO_first__557_BIT_19_562_THEN__ETC___d1678 =
	     b__h78869 + b__h81410 ;
  assign IF_NOT_rg_quire_12_BIT_127_13_14_AND_NOT_fda_d_ETC___d308 =
	     (!rg_quire[127] && !fda_divider_fifo_output_reg$D_OUT[129] &&
	      rg_quire_12_PLUS_fda_divider_fifo_output_reg_f_ETC___d301[127]) ?
	       128'h7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF :
	       ((rg_quire[127] && fda_divider_fifo_output_reg$D_OUT[129] &&
		 !rg_quire_12_PLUS_fda_divider_fifo_output_reg_f_ETC___d301[127]) ?
		  128'h80000000000000000000000000000000 :
		  rg_quire_12_PLUS_fda_divider_fifo_output_reg_f_ETC___d301) ;
  assign IF_NOT_rg_quire_12_BIT_127_13_14_AND_NOT_fma_m_ETC___d127 =
	     (!rg_quire[127] && !fma_multiplier_fifo_output_reg$D_OUT[129] &&
	      rg_quire_12_PLUS_fma_multiplier_fifo_output_re_ETC___d120[127]) ?
	       128'h7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF :
	       ((rg_quire[127] && fma_multiplier_fifo_output_reg$D_OUT[129] &&
		 !rg_quire_12_PLUS_fma_multiplier_fifo_output_re_ETC___d120[127]) ?
		  128'h80000000000000000000000000000000 :
		  rg_quire_12_PLUS_fma_multiplier_fifo_output_re_ETC___d120) ;
  assign IF_SEXT_extracter1_fifo_output_reg_first__20_B_ETC___d1012 =
	     SEXT_extracter1_fifo_output_reg_first__20_BITS_ETC___d1009 ?
	       8'd129 :
	       (SEXT_extracter1_fifo_output_reg_first__20_BITS_ETC___d1010 ?
		  SEXT_extracter1_fifo_output_reg_first__20_BITS_ETC___d1008 :
		  8'd127) ;
  assign IF_SEXT_extracter1_fifo_output_reg_first__20_B_ETC___d1023 =
	     SEXT_extracter1_fifo_output_reg_first__20_BITS_ETC___d1009 ?
	       (((SEXT_extracter1_fifo_output_reg_first__20_BITS_ETC__q23[5:0] ^
		  6'h20) <=
		 6'd1) ?
		  6'd33 :
		  SEXT_extracter1_fifo_output_reg_first__20_BITS_ETC__q23[5:0]) :
	       (SEXT_extracter1_fifo_output_reg_first__20_BITS_ETC___d1010 ?
		  6'd0 :
		  (((SEXT_extracter1_fifo_output_reg_first__20_BITS_ETC__q24[5:0] ^
		     6'h20) <=
		    6'd63) ?
		     SEXT_extracter1_fifo_output_reg_first__20_BITS_ETC__q24[5:0] :
		     6'd31)) ;
  assign IF_extracter1_fifo_output_reg_first__20_BITS_2_ETC___d939 =
	     (extracter1_fifo_output_reg$D_OUT[20:19] == 2'd2) ?
	       2'b01 :
	       ((extracter2_fifo_output_reg$D_OUT[20:19] == 2'd2) ?
		  extracter2_fifo_output_reg$D_OUT[20:19] :
		  2'b11) ;
  assign IF_fda_divider_fifo_stage0_reg_first__82_BIT_6_ETC___d188 =
	     (fda_divider_fifo_stage0_reg$D_OUT[6] ?
		-fda_divider_fifo_stage0_reg$D_OUT[6:0] :
		fda_divider_fifo_stage0_reg$D_OUT[6:0]) -
	     7'd56 ;
  assign IF_fda_divider_fifo_stage0_reg_first__82_BIT_6_ETC___d189 =
	     IF_fda_divider_fifo_stage0_reg_first__82_BIT_6_ETC___d188 +
	     7'd24 ;
  assign IF_fda_divider_fifo_stage0_reg_first__82_BIT_6_ETC___d204 =
	     (fda_divider_fifo_stage0_reg$D_OUT[6] &&
	      NOT_IF_fda_divider_fifo_stage0_reg_first__82_B_ETC___d191 ||
	      (IF_fda_divider_fifo_stage0_reg_first__82_BIT_6_ETC___d188 +
	       7'd2 ^
	       7'h40) <=
	      7'd64) ?
	       15'd0 :
	       x__h15149[14:0] ;
  assign IF_fda_divider_fifo_stage0_reg_first__82_BIT_6_ETC___d213 =
	     (fda_divider_fifo_stage0_reg$D_OUT[6] &&
	      NOT_IF_fda_divider_fifo_stage0_reg_first__82_B_ETC___d191) ?
	       f_new___1__h15192 :
	       f_new__h15136 ;
  assign IF_fda_divider_fifo_stage0_reg_first__82_BIT_6_ETC___d242 =
	     (fda_divider_fifo_stage0_reg$D_OUT[6] &&
	      NOT_IF_fda_divider_fifo_stage0_reg_first__82_B_ETC___d191) ?
	       { truncated_frac_msb___1__h15193,
		 truncated_frac_zero___1__h15195 } :
	       { fda_divider_intDivide_fifo_output_reg$D_OUT[1],
		 truncated_frac_zero__h15004 } ;
  assign IF_ffI_first__75_BITS_86_TO_72_07_EQ_0_08_AND__ETC___d687 =
	     (ffI$D_OUT[86:72] == 15'd0 && !ffI$D_OUT[87]) ?
	       18'd0 :
	       { SEXT_IF_IF_ffI_first__75_BIT_87_09_THEN_0_MINU_ETC___d585 +
		 { 5'd0, expo__h33905 },
		 frac__h33906 } ;
  assign IF_fma_multiplier_fifo_stage0_reg_first_BIT_32_ETC___d10 =
	     (fma_multiplier_fifo_stage0_reg$D_OUT[32] ?
		-fma_multiplier_fifo_stage0_reg$D_OUT[32:26] :
		fma_multiplier_fifo_stage0_reg$D_OUT[32:26]) -
	     7'd56 ;
  assign IF_fma_multiplier_fifo_stage0_reg_first_BIT_32_ETC___d11 =
	     IF_fma_multiplier_fifo_stage0_reg_first_BIT_32_ETC___d10 +
	     7'd24 ;
  assign IF_fma_multiplier_fifo_stage0_reg_first_BIT_32_ETC___d12 =
	     (IF_fma_multiplier_fifo_stage0_reg_first_BIT_32_ETC___d11 ^
	      7'h40) <=
	     7'd64 ;
  assign IF_fma_multiplier_fifo_stage0_reg_first_BIT_32_ETC___d24 =
	     (fma_multiplier_fifo_stage0_reg$D_OUT[32] &&
	      !IF_fma_multiplier_fifo_stage0_reg_first_BIT_32_ETC___d12 ||
	      (IF_fma_multiplier_fifo_stage0_reg_first_BIT_32_ETC___d10 +
	       7'd2 ^
	       7'h40) <=
	      7'd64) ?
	       15'd0 :
	       x__h652[14:0] ;
  assign IF_fma_multiplier_fifo_stage0_reg_first_BIT_32_ETC___d33 =
	     (fma_multiplier_fifo_stage0_reg$D_OUT[32] &&
	      !IF_fma_multiplier_fifo_stage0_reg_first_BIT_32_ETC___d12) ?
	       f_new___1__h692 :
	       f_new__h639 ;
  assign IF_ftop_fToP_fifo_stage0_reg_first__82_BIT_6_8_ETC___d389 =
	     ftop_fToP_fifo_stage0_reg$D_OUT[6] ?
	       -ftop_fToP_fifo_stage0_reg$D_OUT[6:2] :
	       ftop_fToP_fifo_stage0_reg$D_OUT[6:2] ;
  assign IF_ftop_ffO_first__383_BIT_18_394_AND_NOT_ftop_ETC___d1400 =
	     (ftop_ffO$D_OUT[18] &&
	      !ftop_ffO_first__383_BITS_18_TO_15_395_PLUS_1___d1396[3]) ?
	       4'd15 :
	       ftop_ffO_first__383_BITS_18_TO_15_395_PLUS_1___d1396 ;
  assign IF_ftop_ffO_first__383_BIT_19_388_THEN_1_SL_14_ETC___d1428 =
	     b__h75441 + b__h76193 ;
  assign IF_new_inp3898_BIT_14_THEN_b4431_ELSE_b4433__q8 =
	     new_inp__h33898[14] ? b__h34431 : b__h34433 ;
  assign IF_new_inp9172_BIT_14_THEN_b9776_ELSE_b9778__q11 =
	     new_inp__h39172[14] ? b__h39776 : b__h39778 ;
  assign IF_opcode_norm_first__369_EQ_4_370_THEN_ftop_f_ETC___d1379 =
	     (opcode_norm$D_OUT == 3'd4) ?
	       ftop_ffO$EMPTY_N && normalizer_fifo_output_reg$FULL_N :
	       opcode_norm$D_OUT != 3'd6 ||
	       qtop_ffO$EMPTY_N && normalizer_fifo_output_reg$FULL_N ;
  assign IF_ptof_ptoF_fifo_stage0_reg_first__21_BIT_7_3_ETC___d435 =
	     ptof_ptoF_fifo_stage0_reg$D_OUT[7] ?
	       -ptof_ptoF_fifo_stage0_reg$D_OUT[7:2] :
	       ptof_ptoF_fifo_stage0_reg$D_OUT[7:2] ;
  assign IF_qtop_ffO_first__557_BIT_18_568_AND_NOT_qtop_ETC___d1574 =
	     (qtop_ffO$D_OUT[18] &&
	      !qtop_ffO_first__557_BITS_18_TO_15_569_PLUS_1___d1570[3]) ?
	       4'd15 :
	       qtop_ffO_first__557_BITS_18_TO_15_569_PLUS_1___d1570 ;
  assign IF_qtop_ffO_first__557_BIT_19_562_THEN_1_SL_14_ETC___d1602 =
	     b__h79051 + b__h79802 ;
  assign IF_qtop_quireToPosit1_fifo_stage0_reg_first__3_ETC___d349 =
	     qtop_quireToPosit1_fifo_stage0_reg_first__39_B_ETC___d342 ?
	       carry_int_frac_shifted__h29585[126:114] :
	       13'd8191 ;
  assign IF_rg_quire_12_EQ_0_33_THEN_2_ELSE_0___d134 =
	     (rg_quire == 128'd0) ? 2'd2 : 2'd0 ;
  assign INV_new_inp3898__q2 = ~new_inp__h33898 ;
  assign INV_new_inp9172__q10 = ~new_inp__h39172 ;
  assign NEG_extracter2_fifo_output_regD_OUT_BITS_17_T_ETC__q22 =
	     -extracter2_fifo_output_reg$D_OUT[17:12] ;
  assign NOT_12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__38_ETC___d1496 =
	     !_12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__383_BI_ETC___d1482 &&
	     { 20'd0, (x__h77256[11:0] & ~(12'hFFE << x__h77593)) >> 0 } ==
	     32'd0 &&
	     IF_IF_14_MINUS_IF_ftop_ffO_first__383_BIT_19_3_ETC___d1480 ||
	     _14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_THE_ETC___d1407 ==
	     4'd0 &&
	     shift_new0__h75035 == 2'd0 ||
	     k_expo__h75038 == 15'd32767 &&
	     IF_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388__ETC___d1421 ==
	     4'd0 &&
	     x__h77256[11:0] == 12'd0 &&
	     IF_IF_14_MINUS_IF_ftop_ffO_first__383_BIT_19_3_ETC___d1480 ;
  assign NOT_12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__38_ETC___d1540 =
	     _12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__383_BI_ETC___d1445 !=
	     4'd0 &&
	     (_12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__383_BI_ETC___d1445 !=
	      4'd1 ||
	      truncated_frac_msb__h75040) &&
	     (_12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__383_BI_ETC___d1482 ||
	      { 20'd0, (x__h77256[11:0] & ~(12'hFFE << x__h77593)) >> 0 } !=
	      32'd0 ||
	      truncated_frac_msb__h75040) &&
	     NOT_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_ETC___d1537 ;
  assign NOT_12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__55_ETC___d1670 =
	     !_12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__557_BI_ETC___d1656 &&
	     { 20'd0, (x__h80865[11:0] & ~(12'hFFE << x__h81202)) >> 0 } ==
	     32'd0 &&
	     IF_IF_14_MINUS_IF_qtop_ffO_first__557_BIT_19_5_ETC___d1654 ||
	     _14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_THE_ETC___d1581 ==
	     4'd0 &&
	     shift_new0__h78649 == 2'd0 ||
	     k_expo__h78652 == 15'd32767 &&
	     IF_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562__ETC___d1595 ==
	     4'd0 &&
	     x__h80865[11:0] == 12'd0 &&
	     IF_IF_14_MINUS_IF_qtop_ffO_first__557_BIT_19_5_ETC___d1654 ;
  assign NOT_12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__55_ETC___d1714 =
	     _12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__557_BI_ETC___d1619 !=
	     4'd0 &&
	     (_12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__557_BI_ETC___d1619 !=
	      4'd1 ||
	      truncated_frac_msb__h78654) &&
	     (_12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__557_BI_ETC___d1656 ||
	      { 20'd0, (x__h80865[11:0] & ~(12'hFFE << x__h81202)) >> 0 } !=
	      32'd0 ||
	      truncated_frac_msb__h78654) &&
	     NOT_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_ETC___d1711 ;
  assign NOT_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_ETC___d1448 =
	     x7256_BITS_11_TO_0__q14[_12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__383_BI_ETC___d1445] ;
  assign NOT_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_ETC___d1457 =
	     x7256_BITS_11_TO_0__q14[x__h77432] ;
  assign NOT_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_ETC___d1512 =
	     NOT_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_ETC___d1448 ||
	     ((_12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__383_BI_ETC___d1445 ==
	       4'd0) ?
		IF_IF_14_MINUS_IF_ftop_ffO_first__383_BIT_19_3_ETC___d1480 :
		!NOT_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_ETC___d1457) ;
  assign NOT_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_ETC___d1518 =
	     NOT_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_ETC___d1512 ||
	     CASE_shift_new05035_0_NOT_ftop_ffOD_OUT_BIT_0_ETC__q17 ;
  assign NOT_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_ETC___d1537 =
	     (_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_THE_ETC___d1407 !=
	      4'd0 ||
	      shift_new0__h75035 != 2'd0 ||
	      !NOT_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_ETC___d1457) &&
	     (k_expo__h75038 != 15'd32767 ||
	      IF_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388__ETC___d1421 !=
	      4'd0 ||
	      x__h77256[11:0] != 12'd0 ||
	      truncated_frac_msb__h75040) ;
  assign NOT_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_ETC___d1541 =
	     NOT_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_ETC___d1518 ||
	     IF_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388__ETC___d1421 ==
	     4'd0 &&
	     !(~k_expo__h75038[0]) ||
	     NOT_12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__38_ETC___d1540 ;
  assign NOT_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_ETC___d1622 =
	     x0865_BITS_11_TO_0__q18[_12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__557_BI_ETC___d1619] ;
  assign NOT_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_ETC___d1631 =
	     x0865_BITS_11_TO_0__q18[x__h81041] ;
  assign NOT_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_ETC___d1686 =
	     NOT_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_ETC___d1622 ||
	     ((_12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__557_BI_ETC___d1619 ==
	       4'd0) ?
		IF_IF_14_MINUS_IF_qtop_ffO_first__557_BIT_19_5_ETC___d1654 :
		!NOT_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_ETC___d1631) ;
  assign NOT_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_ETC___d1692 =
	     NOT_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_ETC___d1686 ||
	     CASE_shift_new08649_0_NOT_qtop_ffOD_OUT_BIT_0_ETC__q21 ;
  assign NOT_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_ETC___d1711 =
	     (_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_THE_ETC___d1581 !=
	      4'd0 ||
	      shift_new0__h78649 != 2'd0 ||
	      !NOT_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_ETC___d1631) &&
	     (k_expo__h78652 != 15'd32767 ||
	      IF_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562__ETC___d1595 !=
	      4'd0 ||
	      x__h80865[11:0] != 12'd0 ||
	      truncated_frac_msb__h78654) ;
  assign NOT_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_ETC___d1715 =
	     NOT_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_ETC___d1692 ||
	     IF_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562__ETC___d1595 ==
	     4'd0 &&
	     !(~k_expo__h78652[0]) ||
	     NOT_12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__55_ETC___d1714 ;
  assign NOT_IF_fda_divider_fifo_stage0_reg_first__82_B_ETC___d191 =
	     (IF_fda_divider_fifo_stage0_reg_first__82_BIT_6_ETC___d189 ^
	      7'h40) >
	     7'd64 ;
  assign NOT_IF_ftop_ffO_first__383_BIT_19_388_THEN_1_S_ETC___d1433 =
	     (!b__h75441[14] && b__h76193[14] ||
	      b__h75441[14] && !b__h76193[14]) &&
	     !IF_ftop_ffO_first__383_BIT_19_388_THEN_1_SL_14_ETC___d1428[14] ||
	     b__h75441[14] && b__h76193[14] ;
  assign NOT_IF_qtop_ffO_first__557_BIT_19_562_THEN_1_S_ETC___d1607 =
	     (!b__h79051[14] && b__h79802[14] ||
	      b__h79051[14] && !b__h79802[14]) &&
	     !IF_qtop_ffO_first__557_BIT_19_562_THEN_1_SL_14_ETC___d1602[14] ||
	     b__h79051[14] && b__h79802[14] ;
  assign NOT_NOT_14_MINUS_IF_ftop_ffO_first__383_BIT_19_ETC___d1470 =
	     !NOT_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_ETC___d1448 &&
	     flag_prev_truncate__h75044 &&
	     CASE_shift_new05035_0_ftop_ffOD_OUT_BIT_0_1_f_ETC__q16 ;
  assign NOT_NOT_14_MINUS_IF_qtop_ffO_first__557_BIT_19_ETC___d1644 =
	     !NOT_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_ETC___d1622 &&
	     flag_prev_truncate__h78658 &&
	     CASE_shift_new08649_0_qtop_ffOD_OUT_BIT_0_1_q_ETC__q20 ;
  assign NOT_verbosity_ULE_1_77___d878 = verbosity > 4'd1 ;
  assign SEXT_IF_IF_IF_ffI_first__75_BITS_2_TO_0_76_EQ__ETC___d772 =
	     { SEXT_IF_new_inp9172_BIT_14_THEN_b9776_ELSE_b97781__q12[4:0],
	       1'd0 } ;
  assign SEXT_IF_IF_ffI_first__75_BIT_87_09_THEN_0_MINU_ETC___d585 =
	     { SEXT_IF_new_inp3898_BIT_14_THEN_b4431_ELSE_b4433__q9[4:0],
	       1'd0 } ;
  assign SEXT_IF_fda_adder_fifo_stage0_reg_first__48_BI_ETC___d258 =
	     { {126{truncated_frac__h15677[1]}}, truncated_frac__h15677 } ;
  assign SEXT_IF_fma_adder_fifo_stage0_reg_first__4_BIT_ETC___d74 =
	     { {126{truncated_frac__h1186[1]}}, truncated_frac__h1186 } ;
  assign SEXT_IF_new_inp3898_BIT_14_THEN_b4431_ELSE_b4433__q9 =
	     { IF_new_inp3898_BIT_14_THEN_b4431_ELSE_b4433__q8[4],
	       IF_new_inp3898_BIT_14_THEN_b4431_ELSE_b4433__q8 } ;
  assign SEXT_IF_new_inp9172_BIT_14_THEN_b9776_ELSE_b97781__q12 =
	     { IF_new_inp9172_BIT_14_THEN_b9776_ELSE_b9778__q11[4],
	       IF_new_inp9172_BIT_14_THEN_b9776_ELSE_b9778__q11 } ;
  assign SEXT_extracter1_fifo_output_reg_first__20_BITS_ETC___d1008 =
	     { {2{extracter1_fifo_output_regD_OUT_BITS_17_TO_12__q13[5]}},
	       extracter1_fifo_output_regD_OUT_BITS_17_TO_12__q13 } ;
  assign SEXT_extracter1_fifo_output_reg_first__20_BITS_ETC___d1009 =
	     (SEXT_extracter1_fifo_output_reg_first__20_BITS_ETC___d1008 ^
	      8'h80) <
	     8'd1 ;
  assign SEXT_extracter1_fifo_output_reg_first__20_BITS_ETC___d1010 =
	     (SEXT_extracter1_fifo_output_reg_first__20_BITS_ETC___d1008 ^
	      8'h80) <=
	     8'd255 ;
  assign SEXT_extracter1_fifo_output_reg_first__20_BITS_ETC___d945 =
	     { extracter1_fifo_output_regD_OUT_BITS_17_TO_12__q13[5],
	       extracter1_fifo_output_regD_OUT_BITS_17_TO_12__q13 } ;
  assign SEXT_extracter1_fifo_output_reg_first__20_BITS_ETC__q23 =
	     SEXT_extracter1_fifo_output_reg_first__20_BITS_ETC___d1008 -
	     8'd129 ;
  assign SEXT_extracter1_fifo_output_reg_first__20_BITS_ETC__q24 =
	     SEXT_extracter1_fifo_output_reg_first__20_BITS_ETC___d1008 -
	     8'd127 ;
  assign _0_CONCAT_IF_IF_rg_quire_12_BIT_127_13_THEN_0_M_ETC___d1355 =
	     { 1'd0, msbZeros__h52719 } + 8'd1 ;
  assign _0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d955 =
	     { 13'd0, f1__h50451 } * { 13'd0, f2__h50452 } ;
  assign _0_CONCAT_ffI_f_rv_port1__read__026_BITS_30_TO__ETC___d1048 =
	     { 1'd0, ffI_f_rv$port1__read[30:23] } - 9'd127 ;
  assign _0_CONCAT_ffI_f_rv_port1__read__026_BITS_30_TO__ETC___d1050 =
	     (_0_CONCAT_ffI_f_rv_port1__read__026_BITS_30_TO__ETC___d1048[7:0] ^
	      8'h80) <
	     8'd100 ;
  assign _0_CONCAT_ffI_f_rv_port1__read__026_BITS_30_TO__ETC___d1051 =
	     (_0_CONCAT_ffI_f_rv_port1__read__026_BITS_30_TO__ETC___d1048[7:0] ^
	      8'h80) <=
	     8'd156 ;
  assign _0_CONCAT_ffI_f_rv_port1__read__026_BITS_30_TO__ETC___d1056 =
	     _0_CONCAT_ffI_f_rv_port1__read__026_BITS_30_TO__ETC___d1048[7:0] -
	     8'd228 ;
  assign _0_CONCAT_ffI_f_rv_port1__read__026_BITS_30_TO__ETC___d1060 =
	     _0_CONCAT_ffI_f_rv_port1__read__026_BITS_30_TO__ETC___d1048[7:0] -
	     8'd28 ;
  assign _0_MINUS_ftop_ffOD_OUT_BITS_19_TO_15__q4 =
	     5'd0 - ftop_ffO$D_OUT[19:15] ;
  assign _0_MINUS_qtop_ffOD_OUT_BITS_19_TO_15__q5 =
	     5'd0 - qtop_ffO$D_OUT[19:15] ;
  assign _12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__383_BI_ETC___d1445 =
	     4'd12 -
	     IF_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388__ETC___d1421 ;
  assign _12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__383_BI_ETC___d1482 =
	     _12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__383_BI_ETC___d1445 <
	     4'd2 ;
  assign _12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__557_BI_ETC___d1619 =
	     4'd12 -
	     IF_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562__ETC___d1595 ;
  assign _12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__557_BI_ETC___d1656 =
	     _12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__557_BI_ETC___d1619 <
	     4'd2 ;
  assign _14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_THE_ETC___d1407 =
	     4'd14 -
	     (ftop_ffO$D_OUT[19] ?
		_0_MINUS_ftop_ffOD_OUT_BITS_19_TO_15__q4[3:0] :
		IF_ftop_ffO_first__383_BIT_18_394_AND_NOT_ftop_ETC___d1400) ;
  assign _14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_THE_ETC___d1581 =
	     4'd14 -
	     (qtop_ffO$D_OUT[19] ?
		_0_MINUS_qtop_ffOD_OUT_BITS_19_TO_15__q5[3:0] :
		IF_qtop_ffO_first__557_BIT_18_568_AND_NOT_qtop_ETC___d1574) ;
  assign _71_MINUS_0_CONCAT_IF_IF_rg_quire_12_BIT_127_13_ETC___d1357 =
	     8'd71 -
	     _0_CONCAT_IF_IF_rg_quire_12_BIT_127_13_THEN_0_M_ETC___d1355 ;
  assign _theResult____h75045 =
	     NOT_NOT_14_MINUS_IF_ftop_ffO_first__383_BIT_19_ETC___d1470 &&
	     (IF_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388__ETC___d1421 !=
	      4'd0 ||
	      ~k_expo__h75038[0]) &&
	     (_12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__383_BI_ETC___d1445 ==
	      4'd0 ||
	      _12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__383_BI_ETC___d1445 ==
	      4'd1 &&
	      IF_IF_14_MINUS_IF_ftop_ffO_first__383_BIT_19_3_ETC___d1480 ||
	      NOT_12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__38_ETC___d1496) ;
  assign _theResult____h78659 =
	     NOT_NOT_14_MINUS_IF_qtop_ffO_first__557_BIT_19_ETC___d1644 &&
	     (IF_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562__ETC___d1595 !=
	      4'd0 ||
	      ~k_expo__h78652[0]) &&
	     (_12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__557_BI_ETC___d1619 ==
	      4'd0 ||
	      _12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__557_BI_ETC___d1619 ==
	      4'd1 &&
	      IF_IF_14_MINUS_IF_qtop_ffO_first__557_BIT_19_5_ETC___d1654 ||
	      NOT_12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__55_ETC___d1670) ;
  assign _theResult___fst__h76225 =
	     ftop_ffO_first__383_BIT_14_409_AND_1_MINUS_14__ETC___d1412 ?
	       expo_new__h76322 :
	       expo_new__h76291 ;
  assign _theResult___fst__h79834 =
	     qtop_ffO_first__557_BIT_14_583_AND_1_MINUS_14__ETC___d1586 ?
	       expo_new__h79931 :
	       expo_new__h79900 ;
  assign _theResult___snd_snd__h76374 =
	     ftop_ffO_first__383_BIT_14_409_AND_1_MINUS_14__ETC___d1412 ?
	       shift_new__h76321 :
	       2'd0 ;
  assign _theResult___snd_snd__h79983 =
	     qtop_ffO_first__557_BIT_14_583_AND_1_MINUS_14__ETC___d1586 ?
	       shift_new__h79930 :
	       2'd0 ;
  assign a__h75082 =
	     IF_IF_NOT_IF_ftop_ffO_first__383_BIT_19_388_TH_ETC___d1508 +
	     { 14'd0,
	       IF_IF_NOT_IF_ftop_ffO_first__383_BIT_19_388_TH_ETC___d1508 ==
	       15'd0 &&
	       NOT_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_ETC___d1541 } ;
  assign a__h78692 =
	     IF_IF_NOT_IF_qtop_ffO_first__557_BIT_19_562_TH_ETC___d1682 +
	     { 14'd0,
	       IF_IF_NOT_IF_qtop_ffO_first__557_BIT_19_562_TH_ETC___d1682 ==
	       15'd0 &&
	       NOT_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_ETC___d1715 } ;
  assign add_round__h31061 = x__h31225 & truncated_frac_msb__h31055 ;
  assign all_bits_0__h1189 = ~(x__h1239[126:0] != 127'd0) ;
  assign all_bits_0__h15680 = ~(x__h15730[126:0] != 127'd0) ;
  assign b__h34431 = { 1'd0, x__h34441 } - 5'd1 ;
  assign b__h34433 = 5'd0 - x__h36572 ;
  assign b__h39776 = { 1'd0, x__h39786 } - 5'd1 ;
  assign b__h39778 = 5'd0 - x__h41917 ;
  assign b__h75259 = x__h75275 - y__h75276 ;
  assign b__h75441 = ftop_ffO$D_OUT[19] ? k__h75501 : k__h75546 ;
  assign b__h76193 =
	     { 14'd0, x__h76196 } <<
	     IF_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388__ETC___d1421 ;
  assign b__h77801 = { 14'd0, flag_prev_truncate__h75044 } ;
  assign b__h78869 = x__h78885 - y__h78886 ;
  assign b__h79051 = qtop_ffO$D_OUT[19] ? k__h79111 : k__h79155 ;
  assign b__h79802 =
	     { 14'd0, x__h79805 } <<
	     IF_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562__ETC___d1595 ;
  assign b__h81410 = { 14'd0, flag_prev_truncate__h78658 } ;
  assign carry_int_frac_shifted__h29585 =
	     qtop_quireToPosit1_fifo_stage0_reg$D_OUT[126:0] << x__h29673 ;
  assign expo__h33905 =
	     (IF_IF_ffI_first__75_BIT_87_09_THEN_0_MINUS_ffI_ETC___d646 ==
	      4'd0) ?
	       4'd1 -
	       IF_IF_ffI_first__75_BIT_87_09_THEN_0_MINUS_ffI_ETC___d646 ==
	       4'd0 &&
	       new_inp__h33898[0] :
	       new_inp__h33898[x__h38936] ;
  assign expo__h39179 =
	     (IF_IF_IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84__ETC___d833 ==
	      4'd0) ?
	       4'd1 -
	       IF_IF_IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84__ETC___d833 ==
	       4'd0 &&
	       new_inp__h39172[0] :
	       new_inp__h39172[x__h44281] ;
  assign expo_new__h76291 =
	     _14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_THE_ETC___d1407 ==
	     4'd0 &&
	     ftop_ffO$D_OUT[14] ;
  assign expo_new__h76322 = x__h76325[0] & ftop_ffO$D_OUT[14] ;
  assign expo_new__h79900 =
	     _14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_THE_ETC___d1581 ==
	     4'd0 &&
	     qtop_ffO$D_OUT[14] ;
  assign expo_new__h79931 = x__h79934[0] & qtop_ffO$D_OUT[14] ;
  assign extracter1_fifo_output_regD_OUT_BITS_17_TO_12__q13 =
	     extracter1_fifo_output_reg$D_OUT[17:12] ;
  assign extracter1_fifo_output_reg_first__20_BIT_18_35_ETC___d1000 =
	     { x__h50468,
	       SEXT_extracter1_fifo_output_reg_first__20_BITS_ETC___d945 +
	       { NEG_extracter2_fifo_output_regD_OUT_BITS_17_T_ETC__q22[5],
		 NEG_extracter2_fifo_output_regD_OUT_BITS_17_T_ETC__q22 } } ;
  assign extracter1_fifo_output_reg_first__20_BIT_18_35_ETC___d957 =
	     { x__h50444,
	       SEXT_extracter1_fifo_output_reg_first__20_BITS_ETC___d945 +
	       { extracter2_fifo_output_regD_OUT_BITS_17_TO_12__q25[5],
		 extracter2_fifo_output_regD_OUT_BITS_17_TO_12__q25 },
	       _0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d955[25:0] } ;
  assign extracter2_fifo_output_regD_OUT_BITS_17_TO_12__q25 =
	     extracter2_fifo_output_reg$D_OUT[17:12] ;
  assign f1__h50451 =
	     { IF_extracter1_fifo_output_reg_first__20_BITS_2_ETC___d939[1],
	       extracter1_fifo_output_reg$D_OUT[11:0] } ;
  assign f2__h50452 =
	     { IF_extracter1_fifo_output_reg_first__20_BITS_2_ETC___d939[0],
	       extracter2_fifo_output_reg$D_OUT[11:0] } ;
  assign f__h14995 =
	     { 1'b0, fda_divider_intDivide_fifo_output_reg$D_OUT[26:2] } ;
  assign f_new___1__h15192 =
	     f_new__h15000 >>
	     IF_fda_divider_fifo_stage0_reg_first__82_BIT_6_ETC___d189 ;
  assign f_new___1__h692 =
	     f_new__h487 >>
	     IF_fma_multiplier_fifo_stage0_reg_first_BIT_32_ETC___d11 ;
  assign f_new__h15000 =
	     { 87'd0, fda_divider_intDivide_fifo_output_reg$D_OUT[26:2] } ;
  assign f_new__h15136 = f_new__h15000 << x__h15273 ;
  assign f_new__h487 = { 86'd0, fma_multiplier_fifo_stage0_reg$D_OUT[25:0] } ;
  assign f_new__h52569 = { 100'd1, extracter1_fifo_output_reg$D_OUT[11:0] } ;
  assign f_new__h639 = f_new__h487 << x__h773 ;
  assign fda_adder_fifo_stage0_reg_first__48_BITS_134_T_ETC___d263 =
	     fda_adder_fifo_stage0_reg$D_OUT[134:7] +
	     SEXT_IF_fda_adder_fifo_stage0_reg_first__48_BI_ETC___d258 ;
  assign fda_divider_intDivide_rg_denom2_43_ULE_0_CONCA_ETC___d147 =
	     fda_divider_intDivide_rg_denom2 <= y__h14511 ;
  assign fda_divider_intDivide_rg_numer_44_ULT_0_CONCAT_ETC___d156 =
	     fda_divider_intDivide_rg_numer < y__h14597 ;
  assign fda_divider_intDivide_rg_numer_44_ULT_fda_divi_ETC___d167 =
	     fda_divider_intDivide_rg_numer <
	     fda_divider_intDivide_rg_denom2 ;
  assign fda_divider_intDivide_rg_state_41_EQ_0_60_OR_f_ETC___d971 =
	     (fda_divider_intDivide_rg_state == 2'd0 ||
	      fda_divider_intDivide_rg_state == 2'd3) &&
	     extracter1_fifo_output_reg$EMPTY_N &&
	     extracter2_fifo_output_reg$EMPTY_N &&
	     opcode_out$FULL_N &&
	     fda_divider_fifo_stage0_reg$FULL_N &&
	     (f2__h50452 != 13'd0 ||
	      fda_divider_intDivide_fifo_output_reg$FULL_N) ;
  assign flag_prev_truncate__h75044 =
	     (_12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__383_BI_ETC___d1445 ==
	      4'd0) ?
	       truncated_frac_msb__h75040 :
	       NOT_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_ETC___d1457 ;
  assign flag_prev_truncate__h78658 =
	     (_12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__557_BI_ETC___d1619 ==
	      4'd0) ?
	       truncated_frac_msb__h78654 :
	       NOT_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_ETC___d1631 ;
  assign flag_truncated_frac__h1184 =
	     x__h3177 | fma_adder_fifo_stage0_reg$D_OUT[5] ;
  assign flag_truncated_frac__h15675 =
	     x__h17646 | fda_adder_fifo_stage0_reg$D_OUT[5] ;
  assign float_no__h31060 =
	     { ptof_ptoF_fifo_stage0_reg$D_OUT[41],
	       x__h31108[7:0],
	       frac_f__h31059 } ;
  assign fma_adder_fifo_stage0_reg_first__4_BITS_134_TO_ETC___d79 =
	     fma_adder_fifo_stage0_reg$D_OUT[134:7] +
	     SEXT_IF_fma_adder_fifo_stage0_reg_first__4_BIT_ETC___d74 ;
  assign fma_multiplier_fifo_stage0_regD_OUT_BITS_25_TO_0__q7 =
	     fma_multiplier_fifo_stage0_reg$D_OUT[25:0] ;
  assign frac__h30292 = { 1'd1, ftop_fToP_fifo_stage0_reg$D_OUT[18:7] } ;
  assign frac__h31053 = { 1'd1, ptof_ptoF_fifo_stage0_reg$D_OUT[30:8] } ;
  assign frac__h33906 = new_inp__h33898[11:0] << x__h38985 ;
  assign frac__h39180 = new_inp__h39172[11:0] << x__h44330 ;
  assign frac_f__h31059 =
	     ptof_ptoF_fifo_stage0_reg$D_OUT[7] ?
	       x__h31138[22:0] :
	       ((ptof_ptoF_fifo_stage0_reg$D_OUT[7:2] == 6'd0) ?
		  ptof_ptoF_fifo_stage0_reg$D_OUT[30:8] :
		  23'd8388607) ;
  assign ftop_ffOD_OUT_BITS_13_TO_2__q15 = ftop_ffO$D_OUT[13:2] ;
  assign ftop_ffO_first__383_BITS_13_TO_2_436_BIT_IF_14_ETC___d1454 =
	     ftop_ffOD_OUT_BITS_13_TO_2__q15[i__h77385] ;
  assign ftop_ffO_first__383_BITS_18_TO_15_395_PLUS_1___d1396 =
	     ftop_ffO$D_OUT[18:15] + 4'd1 ;
  assign ftop_ffO_first__383_BIT_0_460_AND_INV_ftop_ffO_ETC___d1463 =
	     ftop_ffO$D_OUT[0] & y__h77473 ;
  assign ftop_ffO_first__383_BIT_0_460_AND_INV_ftop_ffO_ETC___d1467 =
	     ftop_ffO_first__383_BIT_0_460_AND_INV_ftop_ffO_ETC___d1463 &
	     y__h77477 ;
  assign ftop_ffO_first__383_BIT_14_409_AND_1_MINUS_14__ETC___d1412 =
	     ftop_ffO$D_OUT[14] & mask_e__h76223 ;
  assign i1__h77483 = shift_new0__h75035 - 2'd2 ;
  assign i1__h81092 = shift_new0__h78649 - 2'd2 ;
  assign i__h77385 = shift_new0__h75035 - 2'd1 ;
  assign i__h80994 = shift_new0__h78649 - 2'd1 ;
  assign in_posit2___1_posit_inp__h39228 = 16'd0 - ffI$D_OUT[21:6] ;
  assign int_frac__h52552 = f_new__h52569 << x__h52613 ;
  assign k__h75501 = 15'd1 << x__h75544 ;
  assign k__h75546 = ~x__h75558 ;
  assign k__h79111 = 15'd1 << x__h79153 ;
  assign k__h79155 = ~x__h79167 ;
  assign k_expo__h75038 =
	     NOT_IF_ftop_ffO_first__383_BIT_19_388_THEN_1_S_ETC___d1433 ?
	       15'd32767 :
	       IF_ftop_ffO_first__383_BIT_19_388_THEN_1_SL_14_ETC___d1428 ;
  assign k_expo__h78652 =
	     NOT_IF_qtop_ffO_first__557_BIT_19_562_THEN_1_S_ETC___d1607 ?
	       15'd32767 :
	       IF_qtop_ffO_first__557_BIT_19_562_THEN_1_SL_14_ETC___d1602 ;
  assign mask1__h15194 = ~x__h15369 ;
  assign mask1__h694 = ~x__h875 ;
  assign mask_e__h76223 =
	     4'd1 -
	     _14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_THE_ETC___d1407 ==
	     4'd0 ;
  assign mask_e__h79832 =
	     4'd1 -
	     _14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_THE_ETC___d1581 ==
	     4'd0 ;
  assign msbZeros__h52719 =
	     twos_complement_carry_int_frac__h52718[126] ?
	       7'd0 :
	       (twos_complement_carry_int_frac__h52718[125] ?
		  7'd1 :
		  (twos_complement_carry_int_frac__h52718[124] ?
		     7'd2 :
		     (twos_complement_carry_int_frac__h52718[123] ?
			7'd3 :
			(twos_complement_carry_int_frac__h52718[122] ?
			   7'd4 :
			   (twos_complement_carry_int_frac__h52718[121] ?
			      7'd5 :
			      (twos_complement_carry_int_frac__h52718[120] ?
				 7'd6 :
				 (twos_complement_carry_int_frac__h52718[119] ?
				    7'd7 :
				    (twos_complement_carry_int_frac__h52718[118] ?
				       7'd8 :
				       (twos_complement_carry_int_frac__h52718[117] ?
					  7'd9 :
					  (twos_complement_carry_int_frac__h52718[116] ?
					     7'd10 :
					     (twos_complement_carry_int_frac__h52718[115] ?
						7'd11 :
						(twos_complement_carry_int_frac__h52718[114] ?
						   7'd12 :
						   (twos_complement_carry_int_frac__h52718[113] ?
						      7'd13 :
						      (twos_complement_carry_int_frac__h52718[112] ?
							 7'd14 :
							 (twos_complement_carry_int_frac__h52718[111] ?
							    7'd15 :
							    (twos_complement_carry_int_frac__h52718[110] ?
							       7'd16 :
							       (twos_complement_carry_int_frac__h52718[109] ?
								  7'd17 :
								  (twos_complement_carry_int_frac__h52718[108] ?
								     7'd18 :
								     (twos_complement_carry_int_frac__h52718[107] ?
									7'd19 :
									(twos_complement_carry_int_frac__h52718[106] ?
									   7'd20 :
									   (twos_complement_carry_int_frac__h52718[105] ?
									      7'd21 :
									      (twos_complement_carry_int_frac__h52718[104] ?
										 7'd22 :
										 (twos_complement_carry_int_frac__h52718[103] ?
										    7'd23 :
										    (twos_complement_carry_int_frac__h52718[102] ?
										       7'd24 :
										       (twos_complement_carry_int_frac__h52718[101] ?
											  7'd25 :
											  (twos_complement_carry_int_frac__h52718[100] ?
											     7'd26 :
											     (twos_complement_carry_int_frac__h52718[99] ?
												7'd27 :
												(twos_complement_carry_int_frac__h52718[98] ?
												   7'd28 :
												   (twos_complement_carry_int_frac__h52718[97] ?
												      7'd29 :
												      (twos_complement_carry_int_frac__h52718[96] ?
													 7'd30 :
													 (twos_complement_carry_int_frac__h52718[95] ?
													    7'd31 :
													    (twos_complement_carry_int_frac__h52718[94] ?
													       7'd32 :
													       (twos_complement_carry_int_frac__h52718[93] ?
														  7'd33 :
														  (twos_complement_carry_int_frac__h52718[92] ?
														     7'd34 :
														     (twos_complement_carry_int_frac__h52718[91] ?
															7'd35 :
															(twos_complement_carry_int_frac__h52718[90] ?
															   7'd36 :
															   (twos_complement_carry_int_frac__h52718[89] ?
															      7'd37 :
															      (twos_complement_carry_int_frac__h52718[88] ?
																 7'd38 :
																 (twos_complement_carry_int_frac__h52718[87] ?
																    7'd39 :
																    (twos_complement_carry_int_frac__h52718[86] ?
																       7'd40 :
																       (twos_complement_carry_int_frac__h52718[85] ?
																	  7'd41 :
																	  (twos_complement_carry_int_frac__h52718[84] ?
																	     7'd42 :
																	     (twos_complement_carry_int_frac__h52718[83] ?
																		7'd43 :
																		(twos_complement_carry_int_frac__h52718[82] ?
																		   7'd44 :
																		   (twos_complement_carry_int_frac__h52718[81] ?
																		      7'd45 :
																		      (twos_complement_carry_int_frac__h52718[80] ?
																			 7'd46 :
																			 (twos_complement_carry_int_frac__h52718[79] ?
																			    7'd47 :
																			    (twos_complement_carry_int_frac__h52718[78] ?
																			       7'd48 :
																			       (twos_complement_carry_int_frac__h52718[77] ?
																				  7'd49 :
																				  (twos_complement_carry_int_frac__h52718[76] ?
																				     7'd50 :
																				     (twos_complement_carry_int_frac__h52718[75] ?
																					7'd51 :
																					(twos_complement_carry_int_frac__h52718[74] ?
																					   7'd52 :
																					   (twos_complement_carry_int_frac__h52718[73] ?
																					      7'd53 :
																					      (twos_complement_carry_int_frac__h52718[72] ?
																						 7'd54 :
																						 (twos_complement_carry_int_frac__h52718[71] ?
																						    7'd55 :
																						    (twos_complement_carry_int_frac__h52718[70] ?
																						       7'd56 :
																						       (twos_complement_carry_int_frac__h52718[69] ?
																							  7'd57 :
																							  (twos_complement_carry_int_frac__h52718[68] ?
																							     7'd58 :
																							     (twos_complement_carry_int_frac__h52718[67] ?
																								7'd59 :
																								(twos_complement_carry_int_frac__h52718[66] ?
																								   7'd60 :
																								   (twos_complement_carry_int_frac__h52718[65] ?
																								      7'd61 :
																								      (twos_complement_carry_int_frac__h52718[64] ?
																									 7'd62 :
																									 (twos_complement_carry_int_frac__h52718[63] ?
																									    7'd63 :
																									    (twos_complement_carry_int_frac__h52718[62] ?
																									       7'd64 :
																									       (twos_complement_carry_int_frac__h52718[61] ?
																										  7'd65 :
																										  (twos_complement_carry_int_frac__h52718[60] ?
																										     7'd66 :
																										     (twos_complement_carry_int_frac__h52718[59] ?
																											7'd67 :
																											(twos_complement_carry_int_frac__h52718[58] ?
																											   7'd68 :
																											   (twos_complement_carry_int_frac__h52718[57] ?
																											      7'd69 :
																											      (twos_complement_carry_int_frac__h52718[56] ?
																												 7'd70 :
																												 (twos_complement_carry_int_frac__h52718[55] ?
																												    7'd71 :
																												    (twos_complement_carry_int_frac__h52718[54] ?
																												       7'd72 :
																												       (twos_complement_carry_int_frac__h52718[53] ?
																													  7'd73 :
																													  (twos_complement_carry_int_frac__h52718[52] ?
																													     7'd74 :
																													     (twos_complement_carry_int_frac__h52718[51] ?
																														7'd75 :
																														(twos_complement_carry_int_frac__h52718[50] ?
																														   7'd76 :
																														   (twos_complement_carry_int_frac__h52718[49] ?
																														      7'd77 :
																														      (twos_complement_carry_int_frac__h52718[48] ?
																															 7'd78 :
																															 (twos_complement_carry_int_frac__h52718[47] ?
																															    7'd79 :
																															    (twos_complement_carry_int_frac__h52718[46] ?
																															       7'd80 :
																															       (twos_complement_carry_int_frac__h52718[45] ?
																																  7'd81 :
																																  (twos_complement_carry_int_frac__h52718[44] ?
																																     7'd82 :
																																     (twos_complement_carry_int_frac__h52718[43] ?
																																	7'd83 :
																																	(twos_complement_carry_int_frac__h52718[42] ?
																																	   7'd84 :
																																	   (twos_complement_carry_int_frac__h52718[41] ?
																																	      7'd85 :
																																	      (twos_complement_carry_int_frac__h52718[40] ?
																																		 7'd86 :
																																		 (twos_complement_carry_int_frac__h52718[39] ?
																																		    7'd87 :
																																		    (twos_complement_carry_int_frac__h52718[38] ?
																																		       7'd88 :
																																		       (twos_complement_carry_int_frac__h52718[37] ?
																																			  7'd89 :
																																			  (twos_complement_carry_int_frac__h52718[36] ?
																																			     7'd90 :
																																			     (twos_complement_carry_int_frac__h52718[35] ?
																																				7'd91 :
																																				(twos_complement_carry_int_frac__h52718[34] ?
																																				   7'd92 :
																																				   (twos_complement_carry_int_frac__h52718[33] ?
																																				      7'd93 :
																																				      (twos_complement_carry_int_frac__h52718[32] ?
																																					 7'd94 :
																																					 (twos_complement_carry_int_frac__h52718[31] ?
																																					    7'd95 :
																																					    (twos_complement_carry_int_frac__h52718[30] ?
																																					       7'd96 :
																																					       (twos_complement_carry_int_frac__h52718[29] ?
																																						  7'd97 :
																																						  (twos_complement_carry_int_frac__h52718[28] ?
																																						     7'd98 :
																																						     (twos_complement_carry_int_frac__h52718[27] ?
																																							7'd99 :
																																							(twos_complement_carry_int_frac__h52718[26] ?
																																							   7'd100 :
																																							   (twos_complement_carry_int_frac__h52718[25] ?
																																							      7'd101 :
																																							      (twos_complement_carry_int_frac__h52718[24] ?
																																								 7'd102 :
																																								 (twos_complement_carry_int_frac__h52718[23] ?
																																								    7'd103 :
																																								    (twos_complement_carry_int_frac__h52718[22] ?
																																								       7'd104 :
																																								       (twos_complement_carry_int_frac__h52718[21] ?
																																									  7'd105 :
																																									  (twos_complement_carry_int_frac__h52718[20] ?
																																									     7'd106 :
																																									     (twos_complement_carry_int_frac__h52718[19] ?
																																										7'd107 :
																																										(twos_complement_carry_int_frac__h52718[18] ?
																																										   7'd108 :
																																										   (twos_complement_carry_int_frac__h52718[17] ?
																																										      7'd109 :
																																										      (twos_complement_carry_int_frac__h52718[16] ?
																																											 7'd110 :
																																											 (twos_complement_carry_int_frac__h52718[15] ?
																																											    7'd111 :
																																											    (twos_complement_carry_int_frac__h52718[14] ?
																																											       7'd112 :
																																											       (twos_complement_carry_int_frac__h52718[13] ?
																																												  7'd113 :
																																												  (twos_complement_carry_int_frac__h52718[12] ?
																																												     7'd114 :
																																												     (twos_complement_carry_int_frac__h52718[11] ?
																																													7'd115 :
																																													(twos_complement_carry_int_frac__h52718[10] ?
																																													   7'd116 :
																																													   (twos_complement_carry_int_frac__h52718[9] ?
																																													      7'd117 :
																																													      (twos_complement_carry_int_frac__h52718[8] ?
																																														 7'd118 :
																																														 (twos_complement_carry_int_frac__h52718[7] ?
																																														    7'd119 :
																																														    (twos_complement_carry_int_frac__h52718[6] ?
																																														       7'd120 :
																																														       (twos_complement_carry_int_frac__h52718[5] ?
																																															  7'd121 :
																																															  (twos_complement_carry_int_frac__h52718[4] ?
																																															     7'd122 :
																																															     (twos_complement_carry_int_frac__h52718[3] ?
																																																7'd123 :
																																																(twos_complement_carry_int_frac__h52718[2] ?
																																																   7'd124 :
																																																   (twos_complement_carry_int_frac__h52718[1] ?
																																																      7'd125 :
																																																      (twos_complement_carry_int_frac__h52718[0] ?
																																																	 7'd126 :
																																																	 7'd127)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign new_inp__h33898 =
	     ffI$D_OUT[87] ? 15'd0 - ffI$D_OUT[86:72] : ffI$D_OUT[86:72] ;
  assign new_inp__h39172 =
	     IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR_ffI_ETC___d693[15] ?
	       15'd0 -
	       IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR_ffI_ETC___d693[14:0] :
	       IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR_ffI_ETC___d693[14:0] ;
  assign ptof_ptoF_fifo_stage0_regD_OUT_BITS_38_TO_31__q3 =
	     ptof_ptoF_fifo_stage0_reg$D_OUT[38:31] ;
  assign qtop_ffOD_OUT_BITS_13_TO_2__q19 = qtop_ffO$D_OUT[13:2] ;
  assign qtop_ffO_first__557_BITS_13_TO_2_610_BIT_IF_14_ETC___d1628 =
	     qtop_ffOD_OUT_BITS_13_TO_2__q19[i__h80994] ;
  assign qtop_ffO_first__557_BITS_18_TO_15_569_PLUS_1___d1570 =
	     qtop_ffO$D_OUT[18:15] + 4'd1 ;
  assign qtop_ffO_first__557_BIT_0_634_AND_INV_qtop_ffO_ETC___d1637 =
	     qtop_ffO$D_OUT[0] & y__h81082 ;
  assign qtop_ffO_first__557_BIT_0_634_AND_INV_qtop_ffO_ETC___d1641 =
	     qtop_ffO_first__557_BIT_0_634_AND_INV_qtop_ffO_ETC___d1637 &
	     y__h81086 ;
  assign qtop_ffO_first__557_BIT_14_583_AND_1_MINUS_14__ETC___d1586 =
	     qtop_ffO$D_OUT[14] & mask_e__h79832 ;
  assign qtop_quireToPosit1_fifo_stage0_regD_OUT_BITS__ETC__q6 =
	     qtop_quireToPosit1_fifo_stage0_reg$D_OUT[132:127] ;
  assign qtop_quireToPosit1_fifo_stage0_reg_first__39_B_ETC___d342 =
	     (qtop_quireToPosit1_fifo_stage0_reg$D_OUT[132:127] ^ 6'h20) <
	     6'd60 ;
  assign rg_quire_12_BIT_127_13_AND_rg_quire_12_BITS_12_ETC___d1366 =
	     { x__h54630,
	       ((IF_0_CONCAT_IF_IF_rg_quire_12_BIT_127_13_THEN__ETC___d1360 ^
		 8'h80) <
		8'd100) ?
		 6'd36 :
		 (((IF_0_CONCAT_IF_IF_rg_quire_12_BIT_127_13_THEN__ETC___d1360 ^
		    8'h80) <=
		   8'd156) ?
		    IF_0_CONCAT_IF_IF_rg_quire_12_BIT_127_13_THEN__ETC___d1360[5:0] :
		    6'd28),
	       twos_complement_carry_int_frac__h52718 } ;
  assign rg_quire_12_PLUS_fda_divider_fifo_output_reg_f_ETC___d301 =
	     rg_quire + fda_divider_fifo_output_reg$D_OUT[129:2] ;
  assign rg_quire_12_PLUS_fma_multiplier_fifo_output_re_ETC___d120 =
	     rg_quire + fma_multiplier_fifo_output_reg$D_OUT[129:2] ;
  assign shift_new0__h75035 =
	     (_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_THE_ETC___d1407 ==
	      4'd0) ?
	       _theResult___snd_snd__h76374 :
	       2'd0 ;
  assign shift_new0__h78649 =
	     (_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_THE_ETC___d1581 ==
	      4'd0) ?
	       _theResult___snd_snd__h79983 :
	       2'd0 ;
  assign shift_new__h76321 = { 1'd0, x__h77276 } ;
  assign shift_new__h79930 = { 1'd0, x__h80885 } ;
  assign stage0_regf_frac__h51620 =
	     { extracter1_fifo_output_reg$D_OUT[11:0], 11'd0 } ;
  assign stage1_regf_frac__h29416 =
	     IF_qtop_quireToPosit1_fifo_stage0_reg_first__3_ETC___d349[12] ?
	       IF_qtop_quireToPosit1_fifo_stage0_reg_first__3_ETC___d349[11:0] :
	       IF_qtop_quireToPosit1_fifo_stage0_reg_first__3_ETC___d349[12:1] ;
  assign truncated_frac__h1186 =
	     flag_truncated_frac__h1184 ?
	       { fma_adder_fifo_stage0_reg$D_OUT[134],
		 flag_truncated_frac__h1184 } :
	       2'b0 ;
  assign truncated_frac__h15677 =
	     flag_truncated_frac__h15675 ?
	       { fda_adder_fifo_stage0_reg$D_OUT[134],
		 flag_truncated_frac__h15675 } :
	       2'b0 ;
  assign truncated_frac_msb___1__h15193 =
	     NOT_IF_fda_divider_fifo_stage0_reg_first__82_B_ETC___d191 &&
	     f__h14995[x__h15345[4:0]] ;
  assign truncated_frac_msb__h31055 =
	     ptof_ptoF_fifo_stage0_reg$D_OUT[7] ?
	       frac__h31053[x__h31198[4:0]] :
	       ptof_ptoF_fifo_stage0_reg$D_OUT[7:2] != 6'd0 ||
	       ptof_ptoF_fifo_stage0_reg$D_OUT[1] ;
  assign truncated_frac_msb__h75040 =
	     (shift_new0__h75035 == 2'd0) ?
	       ftop_ffO$D_OUT[1] :
	       ftop_ffO_first__383_BITS_13_TO_2_436_BIT_IF_14_ETC___d1454 ;
  assign truncated_frac_msb__h78654 =
	     (shift_new0__h78649 == 2'd0) ?
	       qtop_ffO$D_OUT[1] :
	       qtop_ffO_first__557_BITS_13_TO_2_610_BIT_IF_14_ETC___d1628 ;
  assign truncated_frac_zero___1__h15195 =
	     (IF_fda_divider_fifo_stage0_reg_first__82_BIT_6_ETC___d189 ^
	      7'h40) <=
	     7'd65 ||
	     (f_new__h15000 & mask1__h15194) == 112'd0 ;
  assign truncated_frac_zero__h15004 =
	     x__h15426 & fda_divider_intDivide_fifo_output_reg$D_OUT[0] ;
  assign truncated_frac_zero__h30293 =
	     ftop_fToP_fifo_stage0_reg$D_OUT[6] ?
	       { 19'd0,
		 (frac__h30292 &
		  ~(13'h1FFE <<
		    IF_ftop_fToP_fifo_stage0_reg_first__82_BIT_6_8_ETC___d389[3:0])) >>
		 0 } ==
	       32'd0 :
	       ftop_fToP_fifo_stage0_reg$D_OUT[6:2] == 5'd0 ;
  assign truncated_frac_zero__h31054 =
	     ptof_ptoF_fifo_stage0_reg$D_OUT[7] ?
	       x__h31246 & y__h31247 :
	       ptof_ptoF_fifo_stage0_reg$D_OUT[7:2] == 6'd0 &&
	       ptof_ptoF_fifo_stage0_reg$D_OUT[0] ;
  assign twos_complement_carry_int_frac__h14956 =
	     { fda_divider_fifo_stage0_reg$D_OUT[7],
	       fda_divider_fifo_stage0_reg$D_OUT[7] ?
		 127'd0 - x__h15283 :
		 x__h15283 } ;
  assign twos_complement_carry_int_frac__h28795 =
	     { ptoq_positToquire_fifo_stage1_reg$D_OUT[114],
	       ptoq_positToquire_fifo_stage1_reg$D_OUT[114] ?
		 127'd0 -
		 { 15'd0, ptoq_positToquire_fifo_stage1_reg$D_OUT[113:2] } :
		 { 15'd0, ptoq_positToquire_fifo_stage1_reg$D_OUT[113:2] } } ;
  assign twos_complement_carry_int_frac__h437 =
	     { fma_multiplier_fifo_stage0_reg$D_OUT[33],
	       fma_multiplier_fifo_stage0_reg$D_OUT[33] ?
		 127'd0 - x__h783 :
		 x__h783 } ;
  assign twos_complement_carry_int_frac__h52718 =
	     rg_quire[127] ? 127'd0 - rg_quire[126:0] : rg_quire[126:0] ;
  assign x0865_BITS_11_TO_0__q18 = x__h80865[11:0] ;
  assign x7256_BITS_11_TO_0__q14 = x__h77256[11:0] ;
  assign x__h1232 = x__h1234 | fma_adder_fifo_stage0_reg$D_OUT[0] ;
  assign x__h1234 = all_bits_0__h1189 & fma_adder_fifo_stage0_reg$D_OUT[134] ;
  assign x__h1239 =
	     (!fma_adder_fifo_stage0_reg$D_OUT[134] &&
	      !SEXT_IF_fma_adder_fifo_stage0_reg_first__4_BIT_ETC___d74[127] &&
	      fma_adder_fifo_stage0_reg_first__4_BITS_134_TO_ETC___d79[127]) ?
	       128'h7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF :
	       ((fma_adder_fifo_stage0_reg$D_OUT[134] &&
		 SEXT_IF_fma_adder_fifo_stage0_reg_first__4_BIT_ETC___d74[127] &&
		 !fma_adder_fifo_stage0_reg_first__4_BITS_134_TO_ETC___d79[127]) ?
		  128'h80000000000000000000000000000000 :
		  fma_adder_fifo_stage0_reg_first__4_BITS_134_TO_ETC___d79) ;
  assign x__h13785 =
	     fma_multiplier_fifo_output_reg$D_OUT[1] &
	     fma_multiplier_fifo_output_reg$D_OUT[0] ;
  assign x__h13790 = fma_multiplier_fifo_output_reg$D_OUT[1] & y__h13803 ;
  assign x__h14822 = fda_divider_intDivide_rg_numer[11:0] == 12'd0 ;
  assign x__h15149 = f__h14995 >> x__h15185 ;
  assign x__h15185 =
	     7'd24 -
	     IF_fda_divider_fifo_stage0_reg_first__82_BIT_6_ETC___d188 ;
  assign x__h15273 = fda_divider_fifo_stage0_reg$D_OUT[6:0] + 7'd32 ;
  assign x__h15283 =
	     { IF_fda_divider_fifo_stage0_reg_first__82_BIT_6_ETC___d204,
	       IF_fda_divider_fifo_stage0_reg_first__82_BIT_6_ETC___d213 } ;
  assign x__h15345 =
	     IF_fda_divider_fifo_stage0_reg_first__82_BIT_6_ETC___d189 -
	     7'd1 ;
  assign x__h15369 = 112'hFFFFFFFFFFFFFFFFFFFFFFFFFFFF >> x__h15345 ;
  assign x__h15426 = ~fda_divider_intDivide_fifo_output_reg$D_OUT[1] ;
  assign x__h15723 = x__h15725 | fda_adder_fifo_stage0_reg$D_OUT[0] ;
  assign x__h15725 =
	     all_bits_0__h15680 & fda_adder_fifo_stage0_reg$D_OUT[134] ;
  assign x__h15730 =
	     (!fda_adder_fifo_stage0_reg$D_OUT[134] &&
	      !SEXT_IF_fda_adder_fifo_stage0_reg_first__48_BI_ETC___d258[127] &&
	      fda_adder_fifo_stage0_reg_first__48_BITS_134_T_ETC___d263[127]) ?
	       128'h7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF :
	       ((fda_adder_fifo_stage0_reg$D_OUT[134] &&
		 SEXT_IF_fda_adder_fifo_stage0_reg_first__48_BI_ETC___d258[127] &&
		 !fda_adder_fifo_stage0_reg_first__48_BITS_134_T_ETC___d263[127]) ?
		  128'h80000000000000000000000000000000 :
		  fda_adder_fifo_stage0_reg_first__48_BITS_134_T_ETC___d263) ;
  assign x__h17646 =
	     fda_adder_fifo_stage0_reg$D_OUT[7] &
	     fda_adder_fifo_stage0_reg$D_OUT[6] ;
  assign x__h22441 =
	     { fda_adder_fifo_stage0_reg$D_OUT[134], x__h15730[126:0] } ;
  assign x__h28250 =
	     fda_divider_fifo_output_reg$D_OUT[1] &
	     fda_divider_fifo_output_reg$D_OUT[0] ;
  assign x__h28255 = fda_divider_fifo_output_reg$D_OUT[1] & y__h28268 ;
  assign x__h29673 =
	     (8'd71 -
	      { {2{qtop_quireToPosit1_fifo_stage0_regD_OUT_BITS__ETC__q6[5]}},
		qtop_quireToPosit1_fifo_stage0_regD_OUT_BITS__ETC__q6 }) -
	     8'd1 ;
  assign x__h29689 =
	     ((qtop_quireToPosit1_fifo_stage0_reg$D_OUT[126:0] == 127'd0 &&
	       qtop_quireToPosit1_fifo_stage0_reg$D_OUT[135:134] == 2'd0) ?
		2'd2 :
		qtop_quireToPosit1_fifo_stage0_reg$D_OUT[135:134]) !=
	     2'd2 &&
	     (!qtop_quireToPosit1_fifo_stage0_reg_first__39_B_ETC___d342 ||
	      carry_int_frac_shifted__h29585[113]) ;
  assign x__h29732 =
	     ((qtop_quireToPosit1_fifo_stage0_reg$D_OUT[126:0] == 127'd0 &&
	       qtop_quireToPosit1_fifo_stage0_reg$D_OUT[135:134] == 2'd0) ?
		2'd2 :
		qtop_quireToPosit1_fifo_stage0_reg$D_OUT[135:134]) ==
	     2'd2 ||
	     qtop_quireToPosit1_fifo_stage0_reg_first__39_B_ETC___d342 &&
	     carry_int_frac_shifted__h29585[112:0] == 113'd0 ;
  assign x__h30359 = frac__h30292 >> x__h30419 ;
  assign x__h30419 =
	     IF_ftop_fToP_fifo_stage0_reg_first__82_BIT_6_8_ETC___d389 +
	     5'd1 ;
  assign x__h30432 =
	     ftop_fToP_fifo_stage0_reg$D_OUT[6] ?
	       frac__h30292[x__h30419[3:0]] :
	       ftop_fToP_fifo_stage0_reg$D_OUT[6:2] != 5'd0 ||
	       ftop_fToP_fifo_stage0_reg$D_OUT[1] ;
  assign x__h30509 = x__h30521 & truncated_frac_zero__h30293 ;
  assign x__h30521 = x__h30522 & ftop_fToP_fifo_stage0_reg$D_OUT[0] ;
  assign x__h30522 = ~ftop_fToP_fifo_stage0_reg$D_OUT[1] ;
  assign x__h31108 =
	     { ptof_ptoF_fifo_stage0_regD_OUT_BITS_38_TO_31__q3[7],
	       ptof_ptoF_fifo_stage0_regD_OUT_BITS_38_TO_31__q3 } +
	     9'd127 ;
  assign x__h31138 = frac__h31053 >> x__h31198 ;
  assign x__h31198 =
	     IF_ptof_ptoF_fifo_stage0_reg_first__21_BIT_7_3_ETC___d435 +
	     6'd1 ;
  assign x__h31225 = x__h31226 | frac_f__h31059[0] ;
  assign x__h31226 = ~truncated_frac_zero__h31054 ;
  assign x__h31246 = ~ptof_ptoF_fifo_stage0_reg$D_OUT[1] ;
  assign x__h3177 =
	     fma_adder_fifo_stage0_reg$D_OUT[7] &
	     fma_adder_fifo_stage0_reg$D_OUT[6] ;
  assign x__h34441 =
	     INV_new_inp3898__q2[14] ?
	       4'd0 :
	       (INV_new_inp3898__q2[13] ?
		  4'd1 :
		  (INV_new_inp3898__q2[12] ?
		     4'd2 :
		     (INV_new_inp3898__q2[11] ?
			4'd3 :
			(INV_new_inp3898__q2[10] ?
			   4'd4 :
			   (INV_new_inp3898__q2[9] ?
			      4'd5 :
			      (INV_new_inp3898__q2[8] ?
				 4'd6 :
				 (INV_new_inp3898__q2[7] ?
				    4'd7 :
				    (INV_new_inp3898__q2[6] ?
				       4'd8 :
				       (INV_new_inp3898__q2[5] ?
					  4'd9 :
					  (INV_new_inp3898__q2[4] ?
					     4'd10 :
					     (INV_new_inp3898__q2[3] ?
						4'd11 :
						(INV_new_inp3898__q2[2] ?
						   4'd12 :
						   (INV_new_inp3898__q2[1] ?
						      4'd13 :
						      (INV_new_inp3898__q2[0] ?
							 4'd14 :
							 4'd15)))))))))))))) ;
  assign x__h36572 = { 1'd0, x__h36579 } ;
  assign x__h36579 =
	     new_inp__h33898[14] ?
	       4'd0 :
	       (new_inp__h33898[13] ?
		  4'd1 :
		  (new_inp__h33898[12] ?
		     4'd2 :
		     (new_inp__h33898[11] ?
			4'd3 :
			(new_inp__h33898[10] ?
			   4'd4 :
			   (new_inp__h33898[9] ?
			      4'd5 :
			      (new_inp__h33898[8] ?
				 4'd6 :
				 (new_inp__h33898[7] ?
				    4'd7 :
				    (new_inp__h33898[6] ?
				       4'd8 :
				       (new_inp__h33898[5] ?
					  4'd9 :
					  (new_inp__h33898[4] ?
					     4'd10 :
					     (new_inp__h33898[3] ?
						4'd11 :
						(new_inp__h33898[2] ?
						   4'd12 :
						   (new_inp__h33898[1] ?
						      4'd13 :
						      (new_inp__h33898[0] ?
							 4'd14 :
							 4'd15)))))))))))))) ;
  assign x__h38936 =
	     IF_IF_ffI_first__75_BIT_87_09_THEN_0_MINUS_ffI_ETC___d646 -
	     4'd1 ;
  assign x__h39786 =
	     INV_new_inp9172__q10[14] ?
	       4'd0 :
	       (INV_new_inp9172__q10[13] ?
		  4'd1 :
		  (INV_new_inp9172__q10[12] ?
		     4'd2 :
		     (INV_new_inp9172__q10[11] ?
			4'd3 :
			(INV_new_inp9172__q10[10] ?
			   4'd4 :
			   (INV_new_inp9172__q10[9] ?
			      4'd5 :
			      (INV_new_inp9172__q10[8] ?
				 4'd6 :
				 (INV_new_inp9172__q10[7] ?
				    4'd7 :
				    (INV_new_inp9172__q10[6] ?
				       4'd8 :
				       (INV_new_inp9172__q10[5] ?
					  4'd9 :
					  (INV_new_inp9172__q10[4] ?
					     4'd10 :
					     (INV_new_inp9172__q10[3] ?
						4'd11 :
						(INV_new_inp9172__q10[2] ?
						   4'd12 :
						   (INV_new_inp9172__q10[1] ?
						      4'd13 :
						      (INV_new_inp9172__q10[0] ?
							 4'd14 :
							 4'd15)))))))))))))) ;
  assign x__h41917 = { 1'd0, x__h41924 } ;
  assign x__h41924 =
	     new_inp__h39172[14] ?
	       4'd0 :
	       (new_inp__h39172[13] ?
		  4'd1 :
		  (new_inp__h39172[12] ?
		     4'd2 :
		     (new_inp__h39172[11] ?
			4'd3 :
			(new_inp__h39172[10] ?
			   4'd4 :
			   (new_inp__h39172[9] ?
			      4'd5 :
			      (new_inp__h39172[8] ?
				 4'd6 :
				 (new_inp__h39172[7] ?
				    4'd7 :
				    (new_inp__h39172[6] ?
				       4'd8 :
				       (new_inp__h39172[5] ?
					  4'd9 :
					  (new_inp__h39172[4] ?
					     4'd10 :
					     (new_inp__h39172[3] ?
						4'd11 :
						(new_inp__h39172[2] ?
						   4'd12 :
						   (new_inp__h39172[1] ?
						      4'd13 :
						      (new_inp__h39172[0] ?
							 4'd14 :
							 4'd15)))))))))))))) ;
  assign x__h44281 =
	     IF_IF_IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84__ETC___d833 -
	     4'd1 ;
  assign x__h50359 =
	     extracter1_fifo_output_reg$D_OUT[20:19] == 2'd1 &&
	     extracter2_fifo_output_reg$D_OUT[20:19] == 2'd2 ||
	     extracter2_fifo_output_reg$D_OUT[20:19] == 2'd1 &&
	     extracter1_fifo_output_reg$D_OUT[20:19] == 2'd2 ;
  assign x__h50444 =
	     x__h50466 &
	     IF_extracter1_fifo_output_reg_first__20_BITS_2_ETC___d939[0] ;
  assign x__h50466 =
	     x__h50468 &
	     IF_extracter1_fifo_output_reg_first__20_BITS_2_ETC___d939[1] ;
  assign x__h50468 =
	     extracter1_fifo_output_reg$D_OUT[18] ^
	     extracter2_fifo_output_reg$D_OUT[18] ;
  assign x__h51353 =
	     extracter1_fifo_output_reg$D_OUT[20:19] == 2'd1 &&
	     extracter2_fifo_output_reg$D_OUT[20:19] == 2'd2 ||
	     extracter2_fifo_output_reg$D_OUT[20:19] == 2'd1 &&
	     extracter1_fifo_output_reg$D_OUT[20:19] == 2'd1 ;
  assign x__h52213 =
	     ffI_f_rv$port1__read[30:23] == 8'd255 &&
	     ffI_f_rv$port1__read[22:0] != 23'd0 ;
  assign x__h52376 = ffI_f_rv$port1__read[9:0] == 10'd0 ;
  assign x__h52613 =
	     SEXT_extracter1_fifo_output_reg_first__20_BITS_ETC___d945 +
	     7'd44 ;
  assign x__h54630 = rg_quire[127] && rg_quire[126:0] == 127'd0 ;
  assign x__h652 = fma_multiplier_fifo_stage0_reg$D_OUT[25:0] >> x__h685 ;
  assign x__h685 =
	     7'd24 -
	     IF_fma_multiplier_fifo_stage0_reg_first_BIT_32_ETC___d10 ;
  assign x__h75275 = k_expo__h75038 + y__h75277 ;
  assign x__h75544 = 4'd14 - _0_MINUS_ftop_ffOD_OUT_BITS_19_TO_15__q4[3:0] ;
  assign x__h75558 =
	     15'd32767 >>
	     IF_ftop_ffO_first__383_BIT_18_394_AND_NOT_ftop_ETC___d1400 ;
  assign x__h76196 =
	     (_14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_THE_ETC___d1407 ==
	      4'd0) ?
	       _theResult___fst__h76225 :
	       ftop_ffO$D_OUT[14] ;
  assign x__h76325 =
	     2'd1 <<
	     _14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_THE_ETC___d1407 ;
  assign x__h77256 =
	     { _14_MINUS_IF_ftop_ffO_first__383_BIT_19_388_THE_ETC___d1407 !=
	       4'd0,
	       ftop_ffO$D_OUT[13:2] } >>
	     shift_new0__h75035 ;
  assign x__h77276 = 1'd0 - ftop_ffO$D_OUT[14] ;
  assign x__h773 = fma_multiplier_fifo_stage0_reg$D_OUT[32:26] + 7'd32 ;
  assign x__h77432 =
	     _12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__383_BI_ETC___d1445 -
	     4'd1 ;
  assign x__h77593 =
	     _12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__383_BI_ETC___d1445 -
	     4'd2 ;
  assign x__h783 =
	     { IF_fma_multiplier_fifo_stage0_reg_first_BIT_32_ETC___d24,
	       IF_fma_multiplier_fifo_stage0_reg_first_BIT_32_ETC___d33 } ;
  assign x__h78885 = k_expo__h78652 + y__h78887 ;
  assign x__h79153 = 4'd14 - _0_MINUS_qtop_ffOD_OUT_BITS_19_TO_15__q5[3:0] ;
  assign x__h79167 =
	     15'd32767 >>
	     IF_qtop_ffO_first__557_BIT_18_568_AND_NOT_qtop_ETC___d1574 ;
  assign x__h7972 =
	     { fma_adder_fifo_stage0_reg$D_OUT[134], x__h1239[126:0] } ;
  assign x__h79805 =
	     (_14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_THE_ETC___d1581 ==
	      4'd0) ?
	       _theResult___fst__h79834 :
	       qtop_ffO$D_OUT[14] ;
  assign x__h79934 =
	     2'd1 <<
	     _14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_THE_ETC___d1581 ;
  assign x__h80865 =
	     { _14_MINUS_IF_qtop_ffO_first__557_BIT_19_562_THE_ETC___d1581 !=
	       4'd0,
	       qtop_ffO$D_OUT[13:2] } >>
	     shift_new0__h78649 ;
  assign x__h80885 = 1'd0 - qtop_ffO$D_OUT[14] ;
  assign x__h81041 =
	     _12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__557_BI_ETC___d1619 -
	     4'd1 ;
  assign x__h81202 =
	     _12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__557_BI_ETC___d1619 -
	     4'd2 ;
  assign x__h814 =
	     fma_multiplier_fifo_stage0_reg$D_OUT[32] &&
	     !IF_fma_multiplier_fifo_stage0_reg_first_BIT_32_ETC___d12 &&
	     fma_multiplier_fifo_stage0_regD_OUT_BITS_25_TO_0__q7[x__h851[4:0]] ;
  assign x__h851 =
	     IF_fma_multiplier_fifo_stage0_reg_first_BIT_32_ETC___d11 - 7'd1 ;
  assign x__h858 =
	     !fma_multiplier_fifo_stage0_reg$D_OUT[32] ||
	     IF_fma_multiplier_fifo_stage0_reg_first_BIT_32_ETC___d12 ||
	     (IF_fma_multiplier_fifo_stage0_reg_first_BIT_32_ETC___d11 ^
	      7'h40) <=
	     7'd65 ||
	     (f_new__h487 & mask1__h694) == 112'd0 ;
  assign x__h875 = 112'hFFFFFFFFFFFFFFFFFFFFFFFFFFFF >> x__h851 ;
  assign x_frac__h30306 =
	     ftop_fToP_fifo_stage0_reg$D_OUT[6] ?
	       x__h30359[11:0] :
	       ((ftop_fToP_fifo_stage0_reg$D_OUT[6:2] == 5'd0) ?
		  ftop_fToP_fifo_stage0_reg$D_OUT[18:7] :
		  12'd4095) ;
  assign y__h1233 =
	     fma_adder_fifo_stage0_reg$D_OUT[4:3] == 2'd1 ||
	     fma_adder_fifo_stage0_reg$D_OUT[2:1] == 2'd1 ;
  assign y__h13803 = ~fma_multiplier_fifo_output_reg$D_OUT[0] ;
  assign y__h14511 = { 1'd0, fda_divider_intDivide_rg_numer[36:1] } ;
  assign y__h14597 = { 24'd0, fda_divider_intDivide_rg_denom } ;
  assign y__h15724 =
	     fda_adder_fifo_stage0_reg$D_OUT[4:3] == 2'd1 ||
	     fda_adder_fifo_stage0_reg$D_OUT[2:1] == 2'd1 ;
  assign y__h22417 = ~fda_adder_fifo_stage0_reg$D_OUT[134] ;
  assign y__h28268 = ~fda_divider_fifo_output_reg$D_OUT[0] ;
  assign y__h31247 =
	     { 8'd0,
	       (frac__h31053 &
		~(24'hFFFFFE <<
		  IF_ptof_ptoF_fifo_stage0_reg_first__21_BIT_7_3_ETC___d435[4:0])) >>
	       0 } ==
	     32'd0 ;
  assign y__h75276 = { 14'd0, _theResult____h75045 } ;
  assign y__h75277 =
	     { 3'd0, x__h77256[11:0] } >>
	     _12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__383_BI_ETC___d1445 ;
  assign y__h77473 = ~ftop_ffO$D_OUT[1] ;
  assign y__h77477 =
	     { 20'd0,
	       (ftop_ffO$D_OUT[13:2] & ~(12'hFFE << i1__h77483)) >> 0 } ==
	     32'd0 ;
  assign y__h78886 = { 14'd0, _theResult____h78659 } ;
  assign y__h78887 =
	     { 3'd0, x__h80865[11:0] } >>
	     _12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__557_BI_ETC___d1619 ;
  assign y__h7948 = ~fma_adder_fifo_stage0_reg$D_OUT[134] ;
  assign y__h81082 = ~qtop_ffO$D_OUT[1] ;
  assign y__h81086 =
	     { 20'd0,
	       (qtop_ffO$D_OUT[13:2] & ~(12'hFFE << i1__h81092)) >> 0 } ==
	     32'd0 ;
  always@(ffO$D_OUT)
  begin
    case (ffO$D_OUT[70:69])
      2'd0, 2'd1:
	  CASE_ffOD_OUT_BITS_70_TO_69_0_ffOD_OUT_BITS__ETC__q1 =
	      ffO$D_OUT[70:69];
      default: CASE_ffOD_OUT_BITS_70_TO_69_0_ffOD_OUT_BITS__ETC__q1 = 2'd2;
    endcase
  end
  always@(IF_IF_ffI_first__75_BIT_87_09_THEN_0_MINUS_ffI_ETC___d646)
  begin
    case (IF_IF_ffI_first__75_BIT_87_09_THEN_0_MINUS_ffI_ETC___d646)
      4'd2: x__h38985 = 12'd11;
      4'd3: x__h38985 = 12'd10;
      4'd4: x__h38985 = 12'd9;
      4'd5: x__h38985 = 12'd8;
      4'd6: x__h38985 = 12'd7;
      4'd7: x__h38985 = 12'd6;
      4'd8: x__h38985 = 12'd5;
      4'd9: x__h38985 = 12'd4;
      4'd10: x__h38985 = 12'd3;
      4'd11: x__h38985 = 12'd2;
      4'd12: x__h38985 = 12'd1;
      4'd13: x__h38985 = 12'd0;
      default: x__h38985 =
		   (IF_IF_ffI_first__75_BIT_87_09_THEN_0_MINUS_ffI_ETC___d646 <=
		    4'd1) ?
		     12'd12 :
		     12'd0;
    endcase
  end
  always@(ffI$D_OUT or in_posit2___1_posit_inp__h39228)
  begin
    case (ffI$D_OUT[2:0])
      3'd2, 3'd3:
	  IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR_ffI_ETC___d693 =
	      in_posit2___1_posit_inp__h39228;
      default: IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84_OR_ffI_ETC___d693 =
		   ffI$D_OUT[21:6];
    endcase
  end
  always@(IF_IF_IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84__ETC___d833)
  begin
    case (IF_IF_IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84__ETC___d833)
      4'd2: x__h44330 = 12'd11;
      4'd3: x__h44330 = 12'd10;
      4'd4: x__h44330 = 12'd9;
      4'd5: x__h44330 = 12'd8;
      4'd6: x__h44330 = 12'd7;
      4'd7: x__h44330 = 12'd6;
      4'd8: x__h44330 = 12'd5;
      4'd9: x__h44330 = 12'd4;
      4'd10: x__h44330 = 12'd3;
      4'd11: x__h44330 = 12'd2;
      4'd12: x__h44330 = 12'd1;
      4'd13: x__h44330 = 12'd0;
      default: x__h44330 =
		   (IF_IF_IF_ffI_first__75_BITS_2_TO_0_76_EQ_2_84__ETC___d833 <=
		    4'd1) ?
		     12'd12 :
		     12'd0;
    endcase
  end
  always@(shift_new0__h75035 or
	  ftop_ffO_first__383_BIT_0_460_AND_INV_ftop_ffO_ETC___d1467 or
	  ftop_ffO$D_OUT or
	  ftop_ffO_first__383_BIT_0_460_AND_INV_ftop_ffO_ETC___d1463)
  begin
    case (shift_new0__h75035)
      2'd0:
	  CASE_shift_new05035_0_ftop_ffOD_OUT_BIT_0_1_f_ETC__q16 =
	      ftop_ffO$D_OUT[0];
      2'd1:
	  CASE_shift_new05035_0_ftop_ffOD_OUT_BIT_0_1_f_ETC__q16 =
	      ftop_ffO_first__383_BIT_0_460_AND_INV_ftop_ffO_ETC___d1463;
      default: CASE_shift_new05035_0_ftop_ffOD_OUT_BIT_0_1_f_ETC__q16 =
		   ftop_ffO_first__383_BIT_0_460_AND_INV_ftop_ffO_ETC___d1467;
    endcase
  end
  always@(shift_new0__h75035 or
	  ftop_ffO_first__383_BIT_0_460_AND_INV_ftop_ffO_ETC___d1467 or
	  ftop_ffO$D_OUT or
	  ftop_ffO_first__383_BIT_0_460_AND_INV_ftop_ffO_ETC___d1463)
  begin
    case (shift_new0__h75035)
      2'd0:
	  CASE_shift_new05035_0_NOT_ftop_ffOD_OUT_BIT_0_ETC__q17 =
	      !ftop_ffO$D_OUT[0];
      2'd1:
	  CASE_shift_new05035_0_NOT_ftop_ffOD_OUT_BIT_0_ETC__q17 =
	      !ftop_ffO_first__383_BIT_0_460_AND_INV_ftop_ffO_ETC___d1463;
      default: CASE_shift_new05035_0_NOT_ftop_ffOD_OUT_BIT_0_ETC__q17 =
		   !ftop_ffO_first__383_BIT_0_460_AND_INV_ftop_ffO_ETC___d1467;
    endcase
  end
  always@(ftop_ffO$D_OUT or a__h75082)
  begin
    case (ftop_ffO$D_OUT[22:21])
      2'd0:
	  output_regf_out_posit__h75066 =
	      { ftop_ffO$D_OUT[23],
		ftop_ffO$D_OUT[23] ? 15'd0 - a__h75082 : a__h75082 };
      2'd1: output_regf_out_posit__h75066 = 16'd32768;
      default: output_regf_out_posit__h75066 = 16'd0;
    endcase
  end
  always@(shift_new0__h78649 or
	  qtop_ffO_first__557_BIT_0_634_AND_INV_qtop_ffO_ETC___d1641 or
	  qtop_ffO$D_OUT or
	  qtop_ffO_first__557_BIT_0_634_AND_INV_qtop_ffO_ETC___d1637)
  begin
    case (shift_new0__h78649)
      2'd0:
	  CASE_shift_new08649_0_qtop_ffOD_OUT_BIT_0_1_q_ETC__q20 =
	      qtop_ffO$D_OUT[0];
      2'd1:
	  CASE_shift_new08649_0_qtop_ffOD_OUT_BIT_0_1_q_ETC__q20 =
	      qtop_ffO_first__557_BIT_0_634_AND_INV_qtop_ffO_ETC___d1637;
      default: CASE_shift_new08649_0_qtop_ffOD_OUT_BIT_0_1_q_ETC__q20 =
		   qtop_ffO_first__557_BIT_0_634_AND_INV_qtop_ffO_ETC___d1641;
    endcase
  end
  always@(shift_new0__h78649 or
	  qtop_ffO_first__557_BIT_0_634_AND_INV_qtop_ffO_ETC___d1641 or
	  qtop_ffO$D_OUT or
	  qtop_ffO_first__557_BIT_0_634_AND_INV_qtop_ffO_ETC___d1637)
  begin
    case (shift_new0__h78649)
      2'd0:
	  CASE_shift_new08649_0_NOT_qtop_ffOD_OUT_BIT_0_ETC__q21 =
	      !qtop_ffO$D_OUT[0];
      2'd1:
	  CASE_shift_new08649_0_NOT_qtop_ffOD_OUT_BIT_0_ETC__q21 =
	      !qtop_ffO_first__557_BIT_0_634_AND_INV_qtop_ffO_ETC___d1637;
      default: CASE_shift_new08649_0_NOT_qtop_ffOD_OUT_BIT_0_ETC__q21 =
		   !qtop_ffO_first__557_BIT_0_634_AND_INV_qtop_ffO_ETC___d1641;
    endcase
  end
  always@(qtop_ffO$D_OUT or a__h78692)
  begin
    case (qtop_ffO$D_OUT[22:21])
      2'd0:
	  output_regf_out_posit__h78676 =
	      { qtop_ffO$D_OUT[23],
		qtop_ffO$D_OUT[23] ? 15'd0 - a__h78692 : a__h78692 };
      2'd1: output_regf_out_posit__h78676 = 16'd32768;
      default: output_regf_out_posit__h78676 = 16'd0;
    endcase
  end
  always@(ffI$D_OUT or
	  extracter1_fifo_output_reg$FULL_N or
	  extracter2_fifo_output_reg$FULL_N or ffI_f_rv)
  begin
    case (ffI$D_OUT[2:0])
      3'd0, 3'd1, 3'd2, 3'd3:
	  IF_ffI_first__75_BITS_2_TO_0_76_EQ_4_77_THEN_N_ETC___d498 =
	      extracter1_fifo_output_reg$FULL_N &&
	      extracter2_fifo_output_reg$FULL_N;
      3'd4:
	  IF_ffI_first__75_BITS_2_TO_0_76_EQ_4_77_THEN_N_ETC___d498 =
	      !ffI_f_rv[32];
      default: IF_ffI_first__75_BITS_2_TO_0_76_EQ_4_77_THEN_N_ETC___d498 =
		   ffI$D_OUT[2:0] != 3'd5 && ffI$D_OUT[2:0] != 3'd7 ||
		   extracter1_fifo_output_reg$FULL_N;
    endcase
  end
  always@(opcode_out$D_OUT or
	  ffO$FULL_N or
	  normalizer_fifo_output_reg$EMPTY_N or
	  fma_ffO$EMPTY_N or
	  fda_ffO$EMPTY_N or ptof_ffO$EMPTY_N or ptoq_ffO$EMPTY_N)
  begin
    case (opcode_out$D_OUT)
      3'd0, 3'd2:
	  IF_opcode_out_first__759_EQ_0_760_OR_opcode_ou_ETC___d1788 =
	      fma_ffO$EMPTY_N && ffO$FULL_N;
      3'd1, 3'd3:
	  IF_opcode_out_first__759_EQ_0_760_OR_opcode_ou_ETC___d1788 =
	      ffO$FULL_N && fda_ffO$EMPTY_N;
      3'd5:
	  IF_opcode_out_first__759_EQ_0_760_OR_opcode_ou_ETC___d1788 =
	      ffO$FULL_N && ptof_ffO$EMPTY_N;
      3'd7:
	  IF_opcode_out_first__759_EQ_0_760_OR_opcode_ou_ETC___d1788 =
	      ffO$FULL_N && ptoq_ffO$EMPTY_N;
      default: IF_opcode_out_first__759_EQ_0_760_OR_opcode_ou_ETC___d1788 =
		   opcode_out$D_OUT != 3'd4 && opcode_out$D_OUT != 3'd6 ||
		   ffO$FULL_N && normalizer_fifo_output_reg$EMPTY_N;
    endcase
  end
  always@(server_core_request_put)
  begin
    case (server_core_request_put[137:136])
      2'd0, 2'd1:
	  CASE_server_core_request_put_BITS_137_TO_136_0_ETC__q28 =
	      server_core_request_put[137:136];
      default: CASE_server_core_request_put_BITS_137_TO_136_0_ETC__q28 = 2'd2;
    endcase
  end
  always@(server_core_request_put)
  begin
    case (server_core_request_put[71:70])
      2'd0, 2'd1:
	  CASE_server_core_request_put_BITS_71_TO_70_0_s_ETC__q29 =
	      server_core_request_put[71:70];
      default: CASE_server_core_request_put_BITS_71_TO_70_0_s_ETC__q29 = 2'd2;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        fda_check_quire <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fda_divider_intDivide_rg_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ffI_f_rv <= `BSV_ASSIGNMENT_DELAY 33'h0AAAAAAAA;
	fma_check_quire <= `BSV_ASSIGNMENT_DELAY 1'd0;
	opcode_in_rv <= `BSV_ASSIGNMENT_DELAY 4'd2;
	rg_quire <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_quire_busy <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (fda_check_quire$EN)
	  fda_check_quire <= `BSV_ASSIGNMENT_DELAY fda_check_quire$D_IN;
	if (fda_divider_intDivide_rg_state$EN)
	  fda_divider_intDivide_rg_state <= `BSV_ASSIGNMENT_DELAY
	      fda_divider_intDivide_rg_state$D_IN;
	if (ffI_f_rv$EN) ffI_f_rv <= `BSV_ASSIGNMENT_DELAY ffI_f_rv$D_IN;
	if (fma_check_quire$EN)
	  fma_check_quire <= `BSV_ASSIGNMENT_DELAY fma_check_quire$D_IN;
	if (opcode_in_rv$EN)
	  opcode_in_rv <= `BSV_ASSIGNMENT_DELAY opcode_in_rv$D_IN;
	if (rg_quire$EN) rg_quire <= `BSV_ASSIGNMENT_DELAY rg_quire$D_IN;
	if (rg_quire_busy$EN)
	  rg_quire_busy <= `BSV_ASSIGNMENT_DELAY rg_quire_busy$D_IN;
      end
    if (fda_divider_intDivide_rg_denom$EN)
      fda_divider_intDivide_rg_denom <= `BSV_ASSIGNMENT_DELAY
	  fda_divider_intDivide_rg_denom$D_IN;
    if (fda_divider_intDivide_rg_denom2$EN)
      fda_divider_intDivide_rg_denom2 <= `BSV_ASSIGNMENT_DELAY
	  fda_divider_intDivide_rg_denom2$D_IN;
    if (fda_divider_intDivide_rg_n$EN)
      fda_divider_intDivide_rg_n <= `BSV_ASSIGNMENT_DELAY
	  fda_divider_intDivide_rg_n$D_IN;
    if (fda_divider_intDivide_rg_numer$EN)
      fda_divider_intDivide_rg_numer <= `BSV_ASSIGNMENT_DELAY
	  fda_divider_intDivide_rg_numer$D_IN;
    if (fda_divider_intDivide_rg_quo$EN)
      fda_divider_intDivide_rg_quo <= `BSV_ASSIGNMENT_DELAY
	  fda_divider_intDivide_rg_quo$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    fda_check_quire = 1'h0;
    fda_divider_intDivide_rg_denom = 13'h0AAA;
    fda_divider_intDivide_rg_denom2 = 37'h0AAAAAAAAA;
    fda_divider_intDivide_rg_n = 25'h0AAAAAA;
    fda_divider_intDivide_rg_numer = 37'h0AAAAAAAAA;
    fda_divider_intDivide_rg_quo = 25'h0AAAAAA;
    fda_divider_intDivide_rg_state = 2'h2;
    ffI_f_rv = 33'h0AAAAAAAA;
    fma_check_quire = 1'h0;
    opcode_in_rv = 4'hA;
    rg_quire = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_quire_busy = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_77___d878)
	begin
	  v__h50031 = $stime;
	  #0;
	end
    v__h50025 = v__h50031 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_77___d878)
	$write("%0d: %m: rl_extract_in: ", v__h50025);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_77___d878 &&
	  ffI$D_OUT[2:0] == 3'd0)
	$write("FMA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_77___d878 &&
	  ffI$D_OUT[2:0] == 3'd1)
	$write("FDA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_77___d878 &&
	  ffI$D_OUT[2:0] == 3'd2)
	$write("FMS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_77___d878 &&
	  ffI$D_OUT[2:0] == 3'd3)
	$write("FDS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_77___d878 &&
	  ffI$D_OUT[2:0] == 3'd4)
	$write("FCVT_P_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_77___d878 &&
	  ffI$D_OUT[2:0] == 3'd5)
	$write("FCVT_S_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_77___d878 &&
	  ffI$D_OUT[2:0] == 3'd6)
	$write("FCVT_P_R");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_77___d878 &&
	  ffI$D_OUT[2:0] != 3'd0 &&
	  ffI$D_OUT[2:0] != 3'd1 &&
	  ffI$D_OUT[2:0] != 3'd2 &&
	  ffI$D_OUT[2:0] != 3'd3 &&
	  ffI$D_OUT[2:0] != 3'd4 &&
	  ffI$D_OUT[2:0] != 3'd5 &&
	  ffI$D_OUT[2:0] != 3'd6)
	$write("FCVT_R_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_77___d878)
	$write("'h%h", ffI$D_OUT[87:72]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_77___d878)
	$write("'h%h", ffI$D_OUT[21:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_77___d878)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd4 &&
	  NOT_verbosity_ULE_1_77___d878)
	begin
	  v__h78576 = $stime;
	  #0;
	end
    v__h78570 = v__h78576 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd4 &&
	  NOT_verbosity_ULE_1_77___d878)
	$write("%0d: %m: rl_norm: ", v__h78570);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd4 &&
	  NOT_verbosity_ULE_1_77___d878)
	$write("FCVT_P_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd4 &&
	  NOT_verbosity_ULE_1_77___d878)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd6 &&
	  NOT_verbosity_ULE_1_77___d878)
	begin
	  v__h82208 = $stime;
	  #0;
	end
    v__h82202 = v__h82208 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd6 &&
	  NOT_verbosity_ULE_1_77___d878)
	$write("%0d: %m: rl_norm: ", v__h82202);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd6 &&
	  NOT_verbosity_ULE_1_77___d878)
	$write("FCVT_P_R");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd6 &&
	  NOT_verbosity_ULE_1_77___d878)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT != 3'd4 &&
	  opcode_norm$D_OUT != 3'd6)
	begin
	  v__h74994 = $stime;
	  #0;
	end
    v__h74988 = v__h74994 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT != 3'd4 &&
	  opcode_norm$D_OUT != 3'd6)
	$write("%0d: %m: rl_norm: Error Illegal Opcode", v__h74988);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd0) $write("FMA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd1) $write("FDA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd2) $write("FMS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd3) $write("FDS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd5)
	$write("FCVT_S_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT != 3'd4 &&
	  opcode_norm$D_OUT != 3'd6 &&
	  opcode_norm$D_OUT != 3'd0 &&
	  opcode_norm$D_OUT != 3'd1 &&
	  opcode_norm$D_OUT != 3'd2 &&
	  opcode_norm$D_OUT != 3'd3 &&
	  opcode_norm$D_OUT != 3'd5)
	$write("FCVT_R_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT != 3'd4 &&
	  opcode_norm$D_OUT != 3'd6)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_77___d878)
	begin
	  v__h83600 = $stime;
	  #0;
	end
    v__h83594 = v__h83600 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_77___d878)
	$write("%0d: %m: rl_out: ", v__h83594);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_77___d878 &&
	  opcode_out$D_OUT == 3'd0)
	$write("FMA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_77___d878 &&
	  opcode_out$D_OUT == 3'd1)
	$write("FDA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_77___d878 &&
	  opcode_out$D_OUT == 3'd2)
	$write("FMS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_77___d878 &&
	  opcode_out$D_OUT == 3'd3)
	$write("FDS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_77___d878 &&
	  opcode_out$D_OUT == 3'd4)
	$write("FCVT_P_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_77___d878 &&
	  opcode_out$D_OUT == 3'd5)
	$write("FCVT_S_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_77___d878 &&
	  opcode_out$D_OUT == 3'd6)
	$write("FCVT_P_R");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_77___d878 &&
	  opcode_out$D_OUT != 3'd0 &&
	  opcode_out$D_OUT != 3'd1 &&
	  opcode_out$D_OUT != 3'd2 &&
	  opcode_out$D_OUT != 3'd3 &&
	  opcode_out$D_OUT != 3'd4 &&
	  opcode_out$D_OUT != 3'd5 &&
	  opcode_out$D_OUT != 3'd6)
	$write("FCVT_R_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_77___d878) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_77___d878)
	$display("  QUIRE: %h", rg_quire);
  end
  // synopsys translate_on
endmodule  // mkPositCore

